const fs = require('fs')


var totalData = [
    {
        "name": "1\n设计篇：需求分析\n学习时长: 6分42秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>一般常规的项目立项之初会有一份 <strong>MRD</strong>（Market Requirements Document，市场需求文档）用来判断产品的必需性以及价值等。</p>\n<p>对于基础项目开发来说，使用 <strong>MRD</strong> 可能有些重量级，但我们也需要对一个新的基建类型项目做一个简单评估，包括研发必需性、投入的成本以及产生的价值等等。有些轮子是必造，而有些轮子不是。</p>\n<p>这一章，我们就来探讨一下：<strong>你的团队需要一个网关系统吗？</strong></p>\n<h2 data-id=\"heading-1\">应用场景</h2>\n<p>对于现在主流的后端架构来说，微服务的普及范围还是比较广的，毕竟巨石项目的维护与开发都不太灵活。</p>\n<p>以电商服务为例子来说，一个系统可以拆分成<strong>用户、交易、订单、商品、活动</strong>等多个功能模块，如果全部的功能都维护在一个项目里面，某些可以公用的模块（例如<strong>用户、权限</strong>等）就没办法共享给其他项目，项目的体积与代码复杂度也会逐步上升，导致后期维护与协同的成本会逐步增加。</p>\n<p><strong>但上述缺点都不是最主要的问题，最主要的问题是所有功能都放在一个系统里面开发部署，其中任意一个模块出现了问题都可能会导致整个系统雪崩</strong>。</p>\n<p><strong>对于一个应用的稳定性来说，如果没办法对单一的模块做熔断、升级、回滚等操作，线上不可控的概率极大，这也是目前主流采用微服务架构最大的原因之一</strong>。</p>\n<p>但是，当一个系统的微服务模块数量非常多的情况下，也经常会出现以下问题：</p>\n<ol>\n<li>通用性的认证、鉴权、限流等功能会导致每个微服务都存在造轮子的行为；</li>\n<li>业务复杂度上升之后，存在域名分配的问题，没办法对每个服务都分配一个新的域名，同时每一个新的服务上线，运维重复配置的工作量多不少；</li>\n<li>太多的域名服务对客户端并不友好，特别是请求层没有做 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F463196408\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://zhuanlan.zhihu.com/p/463196408\" ref=\"nofollow noopener noreferrer\">BFF</a> 的话，每一次拆分新的微服务出来都可能会引起前端的改造；</li>\n<li>并非每个服务都是同一种语言或者框架所开发，前面提到的公共的插件并不能满足所有的服务，这个情况可能在 <code>DevOps</code> 系统中比较常见。</li>\n</ol>\n<p>为了解决上述的问题，网关系统随之诞生。我们可以通过网关的统一入口来调度各个微服务功能模块，使得每个微服务可以关注于自身的业务功能开发。</p>\n<h2 data-id=\"heading-2\">什么是网关系统（Gateway）</h2>\n<p><strong>网关系统根据请求类型可以分为</strong>：</p>\n<ol>\n<li>静态资源网关：处理前端资源数据包括 <strong>CSR</strong>、<strong>SSR</strong> 等；</li>\n<li><strong>API</strong> 网关：随着微服务架构（<strong>MSA</strong>）的普及，通过统一的 <strong>API</strong> 网关可以聚合所有零散的微服务资源，保持统一的出入口，降低多项目的接入成本以及其他项目的使用成本。</li>\n</ol>\n<p><strong>从功能属性上可以分为</strong>：</p>\n<ol>\n<li>流量网关：无关业务属性，单纯做安全（黑白名单）、分流（负载均衡）等；</li>\n<li>业务网关：用户（认证、鉴权）、服务稳定性（降级、容灾）、业务属性灰度、代理（资源代理、缓存）、统一前置（日志、数据校验）等。</li>\n</ol>\n<p>所以，市面上常见的网关系统除了提供<strong>请求聚合功能</strong>之外基本都包含所有通用功能：</p>\n<ul>\n<li>认证（验证登录态，一般不做鉴权）</li>\n<li>分流</li>\n<li>代理（静态资源、<strong>API</strong> 等）</li>\n<li><strong>AB test</strong> （流量灰度，一般根据 <strong>IP</strong> 或者用户信息灰度）</li>\n<li>缓存（成本不低，看看就行）</li>\n<li>等等</li>\n</ul>\n<h2 data-id=\"heading-3\">Gateway 功能拆解</h2>\n<p>通过上面对网关系统的简单了解和分析，我们能够知道，拥有网关系统对团队技术的价值贡献不小。那么如何实现一个网关系统呢？接下来，我们可以根据自己团队情况与需求，对将要实现的网关功能进行拆解，方便后期业务开发。</p>\n<blockquote>\n<p>前文也提到了，业务网关最大的价值是与微服务架构的配合，如果后端服务没有使用微服务架构，网关的价值会打一定的折扣，所以具体是否需要网关服务还是需要结合团队的架构设计来考虑。同时在需求拆解的过程中要考虑侧重点，例如当前只需要完成前端静态资源转发就没必要去开发后端 <strong>API</strong> 转发的逻辑，可以把架构设计方案做大一点，后面有需求方便拓展，但没必要一次性全部做完，从团队的角度来考虑，寻求 <strong>ROI（投资回报率）</strong> 的最大化。</p>\n</blockquote>\n<h4 data-id=\"heading-4\">Nginx</h4>\n<p><code>Nginx</code> 作为专业的 <code>WEB</code> 代理服务器，在代理方面能够提供<strong>负载均衡、流量切换</strong>等功能，脚本语言也有 <code>lua</code> 支持。</p>\n<p>那么 <code>Nginx</code> 做不到什么呢？</p>\n<ol>\n<li><code>Nginx</code> 作为专业的转发服务器，对 <code>Session</code> 以及 <code>Cookie</code> 的处理比较弱。</li>\n<li><code>Nginx</code>仅仅支持 <code>HTTP</code> 协议（<code>Email</code> 不算常用功能）。</li>\n<li>虽然可以通过 <code>Lua</code> 脚本来处理一些拓展的功能，但是 <code>Lua</code> 脚本的变更以及修改 <code>Nginx</code> 的配置都需要重新启动无法做到热更新，比较麻烦。</li>\n<li>没有可视化管理界面也是一个比较大的硬伤（开源的有一些可视化配置项目，但跟可视化管理有一定的区别与差距）。</li>\n</ol>\n<h4 data-id=\"heading-5\">Gateway</h4>\n<p>业务性的 <code>Gateway</code> 需要做点啥：</p>\n<ol>\n<li>统一鉴权收口，通过统一配置给接口资源添加权限；</li>\n<li>支持 <code>RPC</code> 微服务调用，减少资源消耗；</li>\n<li>系统易于监控，同时可以采集收口进来的信息。</li>\n</ol>\n<p>通过两者的对比可以看出，<code>Nginx</code> 更关注<strong>负载均衡以及反向代理</strong>，对业务部分的侵入很低，而 <code>Gateway</code> 作为后端应用，可以携带业务属性，两者可以很好的互补。</p>\n<p>在系统架构设计上，我们可以使用 <code>Nginx</code> 作为上文所说的流量网关，由 <code>Nginx</code> 做一层流量代理，通过负载均衡到 <code>Gateway</code> 做业务层的转发处理，这样可以减少我们自建网关系统的工作量。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e15b1e4bc0b842a1affeba55594b232d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"网关系统整体架构.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h2 data-id=\"heading-6\">我们的网关系统设计</h2>\n<p>一个完整的网关系统是大而全的，接下来我们将挑选几个比较常见的模块来完成自研 <code>Gateway</code> 开发（如果目前团队欠缺或者自己有需求的话，可以接着使用 <code>demo</code> 项目继续优化，拓展需要的模块，达到理想可用的状态）：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f73f00d3e2aa4b779c6539089252c54e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>由上图可以看出，我们的网关系统架构可以分为两大模块，分别是<strong>代理转发的基础模块</strong>以及独立的<strong>用户模块</strong>。</p>\n<ul>\n<li><strong>网关基础服务</strong></li>\n</ul>\n<p>因为流量入口已经有 <code>Nginx</code> 作负载均衡，我们网关的基础服务就可以专注于代理模块的开发：</p>\n<ol>\n<li>专注于前后端资源分发以及不同类型的项目 <strong>API</strong> 分发；</li>\n<li>常用资源缓存模块；</li>\n<li><strong>AB Test</strong> 模块；</li>\n<li>通用日志模块。</li>\n</ol>\n<ul>\n<li><strong>统一用户中心系统</strong></li>\n</ul>\n<p>用户系统需要提供的功能有：</p>\n<ol>\n<li>用户登录、认证等基础功能；</li>\n<li>权限系统（基于 <strong>RBAC</strong> 包括角色、系统、资源等权限控制）。</li>\n</ol>\n<blockquote>\n<p>如果当前团队中没有统一用户中心的话，建议将用户中心系统优先级提高，作为第一优先级的基建项目，完成之后可以赋能给予其他后端项目用户登录、鉴权的功能，可以减少其他后端基建的很多重复工作量。</p>\n</blockquote>\n<ul>\n<li><strong>物料系统</strong></li>\n</ul>\n<p>物料系统主要是针对于静态资源的管理，一般物料系统会跟 <strong>DevOps</strong> 体系关联比较大，毕竟物料会涉及构建部署的过程，但我们的主题并不是 <strong>DevOps</strong>，所以物料系统在小册的占比不会很高，只是作为一个辅助类型的项目为网关服务提供静态资源路由的配置、资源版本的管理等功能。</p>\n<h2 data-id=\"heading-7\">写在最后</h2>\n<p>本章主要针对网关系统的必要性做了简单分析，介绍了网关系统应用的场景以及网关的类型、作用等，最后针对我们要做的系统进行架构设计与功能拆解。</p>\n<p>按照一个完整的项目迭代来说，在架构设计与需求模块都敲定之后，接下来就需要开发同学出技术方案进行项目开发，所以下一章我们将对技术方面的内容进行设计与规划。</p>\n<p>如果你有什么疑问，欢迎在评论区提出或者加群沟通。 👏</p></div>"
    },
    {
        "name": "2\n设计篇：技术选型\n学习时长: 7分34秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>通过上一章的学习，我们了解了网关系统，并且针对要做的功能做了项目架构设计与需求拆解。</p>\n<p>那在一个项目正式开发之前，我们还需要做一个技术调研，从开发框架、使用的工具、数据库等等进行一系列的预研，避免在业务开发过程中出现因为技术原因导致完成不了需求的局面。</p>\n<p>例如团队中并没有 <code>Java</code> 开发，构建工具使用了基于 <code>Java</code> 的 <code>Jenkins</code>，这个时候想对 <code>Jenkins</code> 有一些技术改造要求无法顺利完成。</p>\n<p>本章我们就一起对<strong>开发框架</strong>与<strong>数据库</strong>的类型做简单的对比与选择。</p>\n<blockquote>\n<p>对于工程中所使用的环境以及中间件配置，感谢后端大佬<a href=\"https://juejin.cn/user/325111173878983\" target=\"_blank\" title=\"https://juejin.cn/user/325111173878983\">和耳朵</a>专门写了一篇介绍的文章配合一下，内容非常全面，需要的同学可以点击查看【<a href=\"https://juejin.cn/post/7118919471317647397/\" target=\"_blank\" title=\"https://juejin.cn/post/7118919471317647397/\">环境与中间件配置</a>】</p>\n</blockquote>\n<h2 data-id=\"heading-1\">技术选型</h2>\n<h3 data-id=\"heading-2\">开发框架选型</h3>\n<p>市面上常见的网关系统及框架有如下几种。</p>\n<blockquote>\n<p>只是举了一些常见的框架，并未全部列出，还有很多其他优秀的框架可以自行找寻</p>\n</blockquote>\n<ul>\n<li>Nginx+Lua：Open Resty、Abtesting Gateway。</li>\n<li>Java：Spring Cloud Gateway。</li>\n<li>Go：Janus、Grpc-Gateway。</li>\n<li>Node.js：Express Gateway、MicroGateway。</li>\n</ul>\n<p>上述都是业内成熟的框架以及方案，并且网关系统作为<strong>独立</strong>于业务的技术中间层，并不存在开发语言与框架的限制，所以可以根据自己团队的实际技术栈选择适合自己团队的网关框架。</p>\n<p>但对于前端来说，使用其他语言的成本不低。同时为了更好地理解业务需求，我们并不打算使用市面已经开源或者成熟的框架去搭建一个网关系统，而是使用 <code>JS</code> 来从头搭建一个网关系统。</p>\n<p>既然选择了 <code>JS</code> 来开发系统，服务端的开发框架也有很多比如老牌的 <code>Express</code>、<code>Koa</code> 等，我们选择基于它俩封装的上层框架 <code>Egg</code> 与 <code>NestJs</code> 进行简单对比。</p>\n<h4 data-id=\"heading-3\"><code>Egg</code> 与 <code>NestJs</code> 对比</h4>\n<p>首先，我们先看看两家的 <strong>Slogan</strong>：</p>\n<ul>\n<li><code>Egg</code>: 为企业级框架和应用而生。</li>\n<li><code>NestJS</code>: 用于构建高效、可伸缩的服务端应用程序的渐进式 <strong>Node.js</strong> 框架。</li>\n</ul>\n<p>从 <strong>Slogan</strong> 上我们可以看出， <code>Egg</code>更关注<strong>企业</strong>的维度，<code>NestJS</code> 更注重<strong>项目</strong>这个维度。</p>\n<p>接下来是它们的学习体验。首先是 <code>Egg</code>：</p>\n<ol>\n<li>文档体验非常棒，毕竟是阿里开源，国人开发的框架，中文文档内容很丰富，使用过程中出现问题，可以很方便地找到对应的内容。</li>\n<li>奉行『<strong>约定优于配置</strong>』，按照<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fwww.eggjs.org%2Fzh-CN%2Fadvanced%2Floader\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://www.eggjs.org/zh-CN/advanced/loader\" ref=\"nofollow noopener noreferrer\">一套统一的约定</a>进行应用开发，团队内部采用这种方式可以减少开发人员的学习与协同成本。</li>\n<li>使用的总人数虽然不比 NestJS，但胜在国人多，遇到问题可以咨询的人也会多一些。</li>\n</ol>\n<p>接着是 <code>NestJS</code>：</p>\n<ol>\n<li>中文文档大部分的内容是中文直译，有些内容没有翻译完整或者翻译意境不对。另外，中文版本的内容也会落后英文版本很多，文档资料使用、学习起来会比较麻烦。</li>\n<li>使用总人数虽然比 <code>Egg</code> 更多一些，但是在国内使用的人数不及 <code>Egg</code>，所以很多问题解答中文版本会少于 <code>Egg</code>。</li>\n</ol>\n<h4 data-id=\"heading-4\">技术分析</h4>\n<p><strong>Egg</strong></p>\n<ol>\n<li><code>Egg</code> 的底层框架是基于 <code>Koa</code> 开发，在性能与开发体验上会比 <code>Express</code> 更优越。</li>\n<li>可选用 <code>JS</code> 以及 <code>TS</code> 开发，两者都是基于 <code>Classify</code> 开发，对刚接触服务端开发的前端更友好。</li>\n<li>约定优于配置，减少开发负担、学习以及协作成本。</li>\n<li>高度可扩展的插件机制，可以方便定制插件。</li>\n<li>内置集群：使用 <code>Cluster</code>，自带进程守护、多进程以及进程间通讯等功能。</li>\n</ol>\n<p><strong>NestJS</strong></p>\n<ol>\n<li><code>NestJS</code> 的底层框架是基于 <code>Express</code> 开发的。</li>\n<li>除了 <code>Express</code> 之外，<code>NestJS</code> 也支持使用 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Ffastify%2Ffastify\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/fastify/fastify\" ref=\"nofollow noopener noreferrer\">Fastify</a> 作为底层框架。因为 <code>NestJS</code> 的设计理念本身就是一个框架适配器，其主要功能是代理中间件和处理器到适当的特定库应用中，从而达到框架的独立性。</li>\n<li><code>TS</code> 编程并结合了 <code>OOP</code>（面向对象编程），<code>FP</code>（函数式编程）和 <code>FRP</code>（函数式响应编程）的元素，学习成本会高于 <code>Egg</code>，对新手前端友好度不高，再加上文档缺陷，劝退概率倍增。</li>\n<li>模块加载方面使用 IoC 模式：模块容器 - 依赖注入(通过装饰器和元数据实现)，开发效率以及维护性会更高。</li>\n<li>整个框架的配套功能非常完善例如：鉴权、文档、微服务、<code>CLI</code> 工具等。</li>\n</ol>\n<h4 data-id=\"heading-5\">综合对比</h4>\n<p><code>NestJS</code> 提供了更多的选择，更加自由以及更偏向后端开发的体验，而 <code>Egg</code> 作为深度定制过的框架，自定义的程度会弱于 <code>NestJS</code>，在团队初期快速开发业务的时候非常适合。</p>\n<p>上述对比并不代表两个框架一定有个高下之分，针对于团队、项目的不同时期，开发人员的能力、喜好，哪一种框架能发挥最大价值，它就是当前对你来说最好的框架。</p>\n<p>此外，使用 <code>Egg</code> 来对比 <code>NestJS</code> 并不是非常合适，两者的设计模式上有差别，理论上应该用另一款 <strong>IoC</strong> 框架 <a href=\"https://link.juejin.cn?target=http%3A%2F%2Fwww.midwayjs.org%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://www.midwayjs.org/\" ref=\"nofollow noopener noreferrer\">Midway</a> 来对比，不过在 <a href=\"https://juejin.cn/book/6948353204648148995\" target=\"_blank\" title=\"https://juejin.cn/book/6948353204648148995\">DevOps</a> 小册中我们使用 <code>Egg</code> 作为开发框架，所以这本小册优先使用了 <code>Egg</code> 作为选型对比。</p>\n<h3 data-id=\"heading-6\">数据库选型</h3>\n<p>数据库部分，我们主要对比 <strong>MySQL</strong> 和 <strong>MongoDB</strong>。</p>\n<p><code>MySQL</code> 作为典型的关系型数据库，支持<strong>单点、集群部署架构</strong>，成熟度非常高。它作为开源数据库拥有非常全的文档与社区资源，出现问题能快速获得对应的帮助，后端首推数据库之一。</p>\n<p>但是对于复杂读写操作，需要组合索引查询多表，对性能消耗不小，需要做读写分离或者表结构拆解，对业务架构设计要求比较高。</p>\n<p><code>MongoDB</code> 是非关系型数据库、<code>nosql</code> 的代表作。它可以通过副本集、分片实现高可用，在集群架构拥有十分<strong>高的扩展性</strong>，但要实现这种高可用对运维的要求比较高。</p>\n<p><code>MongoDB</code> <strong>数据处理方式</strong> 是基于内存的，将热数据存在物理内存中，从而达到<strong>高速读写</strong>。由于性能出色，一般用在博客、内管管理等大数据存储的系统中较为合适。</p>\n<p>总的来说，这两种数据库各有千秋，我们要根据不同的项目需求来选择合适的数据库。</p>\n<p>在之前的架构设计中，我们一共需要开发 <strong>3</strong> 个系统，其中物料系统除了需要保存物料的版本信息之外，还需要存储 <code>HTML</code> 这种内容数据，所以<strong>在物料系统中使用 <code>MongoDB</code> 无疑是非常好的选择</strong>。<strong>常规的项目如用户中心，针对于权限的管理非常复杂，所以选择 <code>MySQL</code> 使用多表关联来存储数据更为合适。</strong></p>\n<p>但是用户中心使用 <code>MySQL</code> 作为数据库的话，用户登录信息这种共用的数据就不可能保存在每个 <code>pod</code>，而且频繁的读取 <code>MySQL</code> 也不太实际。这个时候就需要使用 <code>Redis</code> 来做统一缓存，弥补关系型数据的缺陷。<code>Redis</code> 是一个高性能的 <strong>key-value</strong> 数据库，一般常用于业务数据缓存的操作。</p>\n<h2 data-id=\"heading-7\">写在最后</h2>\n<p>本章主要针对项目需求对技术选型做了一些介绍，对于 <code>Egg</code> 与 <code>NestJS</code> 的篇幅介绍较多，毕竟小册主要还是围绕 <code>NestJS</code> 展开的，其他工具详细的介绍与使用会在对应的篇幅再拓展。</p>\n<p>此外，一个团队对技术的选择除了适配业务需求，也要考虑团队的整体水平与技术栈。例如，在团队后端的开发语言使用的是 <code>Go</code>，那么 <code>CICD</code> 工具选择 <code>Jenkins</code> 显然不是最优的选择，要考虑到使用与后期维护的问题。同样如果团队水平梯度不高的情况下，没有必要一定强上 <code>NestJS</code>，可以优先选用 <code>Egg</code> 这种对前端体验友好的框架，后期过渡升级到 <code>Midway</code> 也是合理的技术规划。</p>\n<p>如果你有什么疑问，欢迎在评论区提出或者加群沟通。 👏</p></div>"
    },
    {
        "name": "3\n新手篇：熟悉 NestJS\n已学完\n学习时长: 23分3秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>经过了需求分析以及技术选型之后，我们正式步入了第三个环节：<strong>脚手架搭建</strong>。</p>\n<p><strong>工欲善其事，必先利其器</strong>，<code>NestJS</code> 为开发者提供了很多开箱即用的功能，我们可以根据团队的需求搭建一套适配所有业务开发的基础脚手架。所以接下来的 2 章是基础篇的教学，将带领大家逐步的学习与搭建一套基础业务脚手架，便于后期快速开发业务。</p>\n<blockquote>\n<p>本章的内容比较基础，如果使用过 NestJs 的同学或者对 IoC 模式熟悉的同学可以快速略过。</p>\n</blockquote>\n<h2 data-id=\"heading-1\">控制反转 IoC</h2>\n<p>在之前的介绍中有提到，<code>NestJS</code> 作为开发体验上最接近于传统后端的开发框架，其中最大的相同点就是 <strong>IoC</strong>，也就是 <code>JAVA</code> 中经常提到的<strong>控制反转</strong>。</p>\n<p>在接下去使用 <code>NestJS</code> 的开发过程中会大量接触到 <strong>IoC</strong> 模式，所以先对 <strong>IoC</strong> 做一个简单概念解析，了解一下什么是 <strong>IoC</strong>，以及为什么要使用 <strong>IoC</strong>。</p>\n<blockquote>\n<p><strong>控制反转</strong>（Inversion of Control，缩写为 <strong>IoC</strong>）是<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%25E9%259D%25A2%25E5%2590%2591%25E5%25AF%25B9%25E8%25B1%25A1%25E7%25BC%2596%25E7%25A8%258B%2F254878\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/254878\" ref=\"nofollow noopener noreferrer\">面向对象编程</a>中的一种设计原则，可以用来降低计算机<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%25E4%25BB%25A3%25E7%25A0%2581%2F86048\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81/86048\" ref=\"nofollow noopener noreferrer\">代码</a>之间的<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%25E8%2580%25A6%25E5%2590%2588%25E5%25BA%25A6%2F2603938\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938\" ref=\"nofollow noopener noreferrer\">耦合度</a>。其中最常见的方式叫做<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%25E4%25BE%259D%25E8%25B5%2596%25E6%25B3%25A8%25E5%2585%25A5%2F5177233\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://baike.baidu.com/item/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/5177233\" ref=\"nofollow noopener noreferrer\">依赖注入</a><strong>（Dependency Injection，简称DI</strong>），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p>\n</blockquote>\n<p>如果学过 <code>JAVA</code> 的同学应该会比较熟悉，但如果是前端同学刚刚接触的话，可能会比较陌生，一时间难以上手。纯文字版本的解释难免晦涩，接下来我们用一个简单的小例子来解释 <strong>IoC</strong> 容器的使用：</p>\n<pre><code class=\"hljs language-js\" lang=\"js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">params</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">params</span> = params\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">B</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">A</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">params</span>) {\n    <span class=\"hljs-variable language_\">super</span>(params)\n  }\n  <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">params</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">B</span>(<span class=\"hljs-string\">'hello'</span>).<span class=\"hljs-title function_\">run</span>();\n</code></pre>\n<p>我们可以看到，<strong>B</strong> 中代码的实现是需要依赖 <strong>A</strong> 的，<strong>两者的代码耦合度非常高。当两者之间的业务逻辑复杂程度增加的情况下，维护成本与代码可读性都会随着增加，并且很难再多引入额外的模块进行功能拓展</strong>。</p>\n<p>为了解决这个情况，我们可以引入一个 <strong>IoC</strong> 容器：</p>\n<pre><code class=\"hljs language-js\" lang=\"js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">params</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">params</span> = params\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">C</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">params</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">params</span> = params\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Container</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">modules</span> = {} }\n\n  <span class=\"hljs-title function_\">provide</span>(<span class=\"hljs-params\">key, object</span>) { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">modules</span>[key] = object }\n\n  <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">key</span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">modules</span>[key] }\n}\n\n<span class=\"hljs-keyword\">const</span> mo = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Container</span>();\n\nmo.<span class=\"hljs-title function_\">provide</span>(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">A</span>(<span class=\"hljs-string\">'hello'</span>))\nmo.<span class=\"hljs-title function_\">provide</span>(<span class=\"hljs-string\">'c'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">C</span>(<span class=\"hljs-string\">'world'</span>))\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">B</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">container</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span> = container.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'a'</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">c</span> = container.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'c'</span>);\n  }\n  <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span>.<span class=\"hljs-property\">params</span> + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">c</span>.<span class=\"hljs-property\">params</span>)\n  }\n}\n\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">B</span>(mo).<span class=\"hljs-title function_\">run</span>();\n</code></pre>\n<p>如上述代码所示，在引入 <strong>IoC</strong> 容器 <code>container</code> 之后，<strong>B</strong> 与 <strong>A</strong> 的代码逻辑已经解耦，可以单独拓展其他功能，也可以方便地加入其他模块 <strong>C</strong>。所以在面对复杂的后端业务逻辑中，引入 <strong>IoC</strong> 可以降低组件之间的耦合度，实现系统各层之间的解耦，减少维护与理解成本。</p>\n<blockquote>\n<p>当然，上述的 <strong>Demo</strong> 只是一个非常简单的例子，实际开发过程中场景远比 <strong>Demo</strong> 更加复杂。</p>\n</blockquote>\n<h2 data-id=\"heading-2\">Nest CLI</h2>\n<p>与所有的主流框架一样，<code>NestJs</code> 也有自己的 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fnestjs%2Fnest-cli\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/nestjs/nest-cli\" ref=\"nofollow noopener noreferrer\">Nest CLI</a> 工具，除了提供创建基础模板的功能之外，额外提供了很多方便的功能。</p>\n<p>与前端项目的开发模式不同，在后端业务开发中存在着大量可复用或者有规则的模块，善于使用 <code>CLI</code> 可以帮助我们节约大量的重复工作，现在我们来一起学一下 <code>CLI</code> 的运用。首先看下 <code>CLI</code> 提供了多少的功能：</p>\n<pre><code class=\"hljs language-shell\" lang=\"shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">nest --<span class=\"hljs-built_in\">help</span></span>\n</code></pre>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/033026f8259846ee9f491e67fdecdbed~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>如上图所示，运行完 <code>help</code> 命令之后，可以使用 <code>generate</code> 便捷地生成常用文件，例如<strong>超频使用</strong>的 <code>Controller</code> 以及 <code>Service</code> 的文件等。</p>\n<h4 data-id=\"heading-3\">使用规则</h4>\n<p>除了 <code>nest --help</code> 查看全局命令之外，运行<code>nest &lt;command&gt; --help</code>&nbsp;可以查看特定于命令的选项。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c9409f599ecc40be8c8517f506a37297~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>命令</th><th>别名</th><th>描述</th></tr></thead><tbody><tr><td><code>new</code></td><td><code>n</code></td><td>搭建一个新的标准模式应用程序，包含所有需要运行的样板文件。</td></tr><tr><td><code>generate</code></td><td><code>g</code></td><td>根据原理图生成或修改文件。</td></tr></tbody></table>\n<p>通用的命令选项</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>--dry-run</code></td><td>报告将要进行的更改，但不更改文件系统，别名: -d。</td></tr><tr><td><code>--skip-git</code></td><td>跳过&nbsp;<code>git</code>&nbsp;存储库初始化，别名: -g。</td></tr><tr><td><code>--skip-install</code></td><td>跳过软件包安装，别名：-s。</td></tr><tr><td><code>--package-manager [package-manager]</code></td><td>指定包管理器，使用&nbsp;<code>npm</code>&nbsp;或&nbsp;<code>yarn</code>，必须全局安装包管理器，别名: -p。</td></tr><tr><td><code>--language [language]</code></td><td>指定编程语言(<code>TS</code>&nbsp;或&nbsp;<code>JS</code>)，别名: -l。</td></tr><tr><td><code>--collection [collectionName]</code></td><td>指定逻辑示意图集合，使用已安装的包含原理的&nbsp;<code>npm</code>&nbsp;软件包的软件包名称，别名：-c。</td></tr></tbody></table>\n<blockquote>\n<p>在常规项目中，使用<strong>创建模板和文件这两个命令</strong>最多，所以小册只列举了这两个功能，如果你想了解更多的 <code>CLI</code> 功能可以直接查看<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fdocs.nestjs.com%2Fcli%2Foverview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://docs.nestjs.com/cli/overview\" ref=\"nofollow noopener noreferrer\">源文档</a>。</p>\n</blockquote>\n<h4 data-id=\"heading-4\">配置规则</h4>\n<p>直接通过 <code>CLI</code> 创建的项目根路径下会自动生成一个 <code>nest-cli.json</code> 配置文件：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/141a0784f4754767ab7236d42f5cd7c6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<pre><code class=\"hljs language-perl\" lang=\"perl\">{\n  <span class=\"hljs-string\">\"$schema\"</span>: <span class=\"hljs-string\">\"https://json.schemastore.org/nest-cli\"</span>,\n  <span class=\"hljs-string\">\"collection\"</span>: <span class=\"hljs-string\">\"@nestjs/schematics\"</span>,\n  <span class=\"hljs-string\">\"root\"</span>: <span class=\"hljs-string\">\"src\"</span>\n}\n</code></pre>\n<p>默认生成的配置文件有如上一些属性：</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>配置属性</th><th>属性描述</th></tr></thead><tbody><tr><td>collection</td><td>用于配置生成部件的 schematics 组合的点，一般无需修改</td></tr><tr><td>sourceRoot</td><td>默认项目根目录</td></tr><tr><td>---</td><td>---</td></tr><tr><td>compilerOptions</td><td>编译选项与设置</td></tr><tr><td>generateOptions</td><td>全局生成的选项和选项的设置</td></tr><tr><td>monorepo</td><td>启用 monorepo</td></tr><tr><td>project</td><td>monorepo 模式结构项目配置</td></tr><tr><td>---</td><td>---</td></tr><tr><td>assets</td><td>额外文件类型资源处理，非 TS 与 JS 类型</td></tr><tr><td>watchAssets</td><td>是否使用 watch 模式来监控指定资源文件</td></tr></tbody></table>\n<blockquote>\n<p><code>monorepo</code> 模式开发有它的优点，如果是个人维护或者是关联性比较高的项目可以尝试使用 <code>monorepo</code> 来开发项目，但是小册选择的网关项目拆出的三个模块虽然有一定的关系，但物料以及用户系统同时还会与 <code>DevOps</code> 等其他系统有关联，所以会使用 <code>multirepo</code> 维护三个不同的项目，以微服务的模式关联各个模块功能。</p>\n</blockquote>\n<h2 data-id=\"heading-5\">创建项目工程模板</h2>\n<p>在查看完 <code>Nest CLI</code> 的常用命令之后，可以使用以下命令快速创建一个简单的工程模板：</p>\n<pre><code class=\"hljs language-ruby\" lang=\"ruby\"><span class=\"hljs-variable\">$ </span>npm i -g <span class=\"hljs-variable\">@nestjs</span>/cli\n<span class=\"hljs-variable\">$ </span>nest new gateway\n</code></pre>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9be61963c4bf400b925f4445f9fb7f6b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h4 data-id=\"heading-6\">项目文件介绍</h4>\n<p>除去配置常见的配置文件之外，在 <code>src</code> 目录下有一些 <code>Nestjs</code> 标准的文件规范：</p>\n<pre><code class=\"hljs language-css\" lang=\"css\"><span class=\"hljs-attribute\">src</span>\n ├── app<span class=\"hljs-selector-class\">.controller</span><span class=\"hljs-selector-class\">.spec</span><span class=\"hljs-selector-class\">.ts</span>\n ├── app<span class=\"hljs-selector-class\">.controller</span><span class=\"hljs-selector-class\">.ts</span>\n ├── app<span class=\"hljs-selector-class\">.module</span><span class=\"hljs-selector-class\">.ts</span>\n ├── app<span class=\"hljs-selector-class\">.service</span><span class=\"hljs-selector-class\">.ts</span>\n └── <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.ts</span>\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>文件名</th><th>文件描述</th></tr></thead><tbody><tr><td>app.controller.ts</td><td>常见功能是用来处理 http 请求以及调用 service 层的处理方法</td></tr><tr><td>app.module.ts</td><td>根模块用于处理其他类的引用与共享。</td></tr><tr><td>app.service.ts</td><td>封装通用的业务逻辑、与数据层的交互（例如数据库）、其他额外的一些三方请求</td></tr><tr><td>main.ts</td><td>应用程序入口文件。它使用&nbsp;<code>NestFactory</code>&nbsp;用来创建 Nest 应用实例。</td></tr></tbody></table>\n<p>在后续开发项目的过程中，使用约定俗成的 <code>name.[type]</code> 规则来创建对应的类型文件，便于查找对应的模块。</p>\n<h4 data-id=\"heading-7\">第一个 http 请求</h4>\n<p>再依赖安装完毕之后，可以使用如下命令启动 <code>NestJS</code> 应用，然后浏览器即可访问 <a href=\"https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://localhost:3000/\" ref=\"nofollow noopener noreferrer\">http://localhost:3000/</a> ：出现如下界面即代表项目已经正常启动了。</p>\n<pre><code class=\"hljs language-arduino\" lang=\"arduino\">$ npm run start\n</code></pre>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd6ca06553cc45f18162ce05b100cef3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>服务正常启动之后，接下来我们要开始写下第一个功能【用户模块】。</p>\n<p>首先运行如下命令，<code>CLI</code> 会快速帮助我们自动生成一个用户的 <code>UserController</code></p>\n<pre><code class=\"hljs language-ruby\" lang=\"ruby\"><span class=\"hljs-variable\">$ </span>nest g co user\n</code></pre>\n<p>不过此命令同时也会生成后缀为 <code>spec</code> 的测试文件，虽然有测试功能非常好，但在快速开发过程中，并非每一个功能都需要自动化测试覆盖，只要保证主要的功能有用例覆盖即可。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/695e104a35584d0983d4705b3cdfdff4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>如果不需要每一次生成 <code>spec</code> 文件，可以在根目录下的 <code>nest-cli.json</code> 添加如下配置，禁用测试用例生成，后续再使用 <code>CLI</code> 创建 <code>Controller</code> 或者 <code>Service</code> 类型文件的时候，将不会继续生成：</p>\n<pre><code class=\"hljs language-json\" lang=\"json\">  <span class=\"hljs-attr\">\"generateOptions\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"spec\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">false</span>\n  <span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e4056a6db47430ba49fa4f537e1a442~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>回归正题，再创建 <code>UserController</code> 的同时 <code>CLI</code> 也会自动在 <code>app.module.ts</code> 里面帮我们注册好 <code>Controller</code>。整个过程非常简便，只要在 <code>UserController</code> 写下第一个 <code>http</code> 请求即可。</p>\n<pre><code class=\"hljs language-kotlin\" lang=\"kotlin\"><span class=\"hljs-keyword\">import</span> { Controller, Get } from <span class=\"hljs-string\">'@nestjs/common'</span>;\n\n<span class=\"hljs-meta\">@Controller(<span class=\"hljs-string\">'user'</span>)</span>\nexport <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserController</span> </span>{\n  <span class=\"hljs-meta\">@Get()</span>\n  getHello(): string {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'hello, world!'</span>;\n  }\n}\n</code></pre>\n<p>等待程序重新编译运行完毕之后，在浏览器输入 <a href=\"https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2Fuser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://localhost:3000/user\" ref=\"nofollow noopener noreferrer\">http://localhost:3000/user</a> 访问即可看到：【<strong>你好，世界！</strong>】</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/309b5021d7514ac1ac16ee667c97485c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h4 data-id=\"heading-8\">第一个 CURD</h4>\n<p>在小试牛刀之后，下面我们要开始借助 <code>CLI</code> 的能力快速生成 <code>CURD</code> 模块：</p>\n<ul>\n<li>生成一个模块 (nest g mo) 来组织代码，使其保持清晰的界限（Module）。</li>\n<li>生成一个控制器 (nest g co) 来定义CRUD路径（Controller）。</li>\n<li>生成一个服务 (nest g s) 来表示/隔离业务逻辑（Service）。</li>\n<li>生成一个实体类/接口来代表资源数据类型（Entity）。</li>\n</ul>\n<p>可以看出一个最简单的 <code>CURD</code> 涉及的模块也会非常多（至少需要以上四个模块才能完成一个基础的 <code>CURD</code> 功能），并且要运行多个命令才能得到想要的结果，所幸 <code>Nest CLI</code> 已经集成了这样的功能来帮助我们减少重复的工作量：</p>\n<pre><code class=\"hljs language-ruby\" lang=\"ruby\"><span class=\"hljs-variable\">$ </span>nest g resource user \n</code></pre>\n<blockquote>\n<p>之前我们已经生成 <code>user</code> 的 <code>controller</code> 文件，所以在使用此条命令之前需要将之前生成的 <code>user</code> 目录全部删除，同时删除 <code>app.module.ts</code> 中的 <code>UserController</code> 引入。</p>\n</blockquote>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83e636a4559c47feb3f7f297fdb81c5f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<blockquote>\n<p>第一次使用这个命令的时候，除了生成文件之外还会自动使用 <code>npm</code> 帮我们更新资源，安装一些额外的插件，后续再次使用就不会更新了。</p>\n</blockquote>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ada9368017b496d956fecdf78b4d8f7~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>安装依赖之后可以看到，我们借助了 <code>Nest CLI</code> 快速的生成了一套标准的 <code>CURD</code> 模块甚至 <code>dto</code> 文件也一并生成了，后续只需要更新用户模块的业务逻辑即可。</p>\n<h2 data-id=\"heading-9\">写在最后</h2>\n<p>本章主要是介绍了 <strong>IoC</strong> 设计模式以及如何借助 <code>CLI</code> 创建了简单的工程模板与 <code>CURD</code> 模块。可以看到 <code>Nest CLI</code> 对比其他一些 <code>CLI</code> 工具，在针对开发功能优化这块做得非常不错，特别是模块生成跟自动注册这块逻辑。不过，也是基于后端有一套规则可循，这些功能才能实现，这也正是前后端项目不太一样的地方。</p>\n<p>虽然 <code>NestJs</code> 提供了一个简单的工程模板，但这个模板离实际可用的工程差距还有点大，接下来将与大家一起逐步添加对应的功能，使之达到一个符合实际项目开发要求的模板。</p>\n<blockquote>\n<p>基础篇的内容大部分都是围绕着 <code>NestJS</code> 提供的功能模块开发，所以有一些细节的部分可以参考 <code>NestJS</code> 的英文文档一起阅读，小册中使用到的部分会尽可能讲解得详细一点。</p>\n</blockquote>\n<p>本章的 <strong>Demo</strong> 地址放在 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway%2Ftree%2Fdemo%2Fv1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway/tree/demo/v1\" ref=\"nofollow noopener noreferrer\">demo/v1</a>，需要的同学自取。</p>\n<p>如果你有什么疑问，欢迎在评论区提出或者加群沟通。 👏</p></div>"
    },
    {
        "name": "4\n配置篇：基础功能配置\n学习时长: 70分24秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>在上一章节中，我们学习了 <code>NestJS CLI</code> 的用法，得到了一套基础的项目工程。最开始做项目对比的时候也提到过，<code>NestJS</code> 作为一款<strong>自定义程度较高</strong>的框架，<code>CLI</code> 直接提供的基础功能并不是完善，但是同时也为开发者提供了非常多的内置或配套的功能例如<strong>高速缓存、日志拦截、过滤器、微服务</strong>等多种模块，方便开发者根据自身的业务需求定制适合当前业务的工程。</p>\n<p>本章将根据业务需求或者团队规范，选择对应的模块搭建出一个符合要求的通用性脚手架。</p>\n<h2 data-id=\"heading-1\">Fastify</h2>\n<p>对于网关系统来说，无论是资源还是 <code>API</code> 接口数据，它都将承担所有的请求转发，虽然外层可以有 <code>Nginx</code> 做负载均衡策略，但如果框架本身的性能越好，业务实现的效果就会越好，同时对业务代码要求也可以稍微降低一点。</p>\n<blockquote>\n<p>框架或者语言带来的性能提升还是非常重要的。可以给大家举一个明显的例子，<strong>Windows</strong> 自带的 <code>VBS</code> 脚本可以操作 <strong>Excel</strong>，<code>Java</code> 或者其他语言框架也可以操作 <strong>Excel</strong>。但是，其他语言的操作效率会远超 <code>VBS</code>，即使是在操作更为复杂或者文件读写内容更多的情况下。这里我们并不去深究为什么其他语言的速度会更快，但是对于一个快速迭代的业务项目或者小团队来说，选择效率高、性能高的框架作为开发语言无疑是降低整体成本最好的一种方式。</p>\n</blockquote>\n<p>而 <code>Nest</code> 作为一个上层框架，可以通过适配器模式使得底层可以兼容任意 <code>HTTP</code> 类型的 <code>Node</code> 框架，本身内置的框架有两种 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fexpressjs.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://expressjs.com/\" ref=\"nofollow noopener noreferrer\">Express</a> 与 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fwww.fastify.io%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://www.fastify.io/\" ref=\"nofollow noopener noreferrer\">Fastify</a>。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3aaf3b9e3b64b6ca5bd0afb3d7b1d4b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>如上图所示，<code>Fastify</code> 与其他主流 <code>HTTP</code> 框架对比，其在 <strong>QPS</strong>(<strong>并发处理请求</strong>)的效率上要远超其他框架，达到了几乎两倍的基准测试结果，所以在网关系统这个对性能要求非常高的项目中使用 <code>Fastify</code> 无疑是一种非常好的选择。</p>\n<blockquote>\n<p>当然具体的性能开销、优化大部分还是依赖业务复杂度以及代码质量，框架能够提供的是只是一层基础架构。能从这层架构上搭建出什么样的产品，取决于开发者自身。同时，我并不是鼓励所有的项目都使用 <code>Fastify</code>，在业务复杂度以及对性能要求并非十分敏感的项目中，<code>Express</code> 也是一种非常好的选择，作为老牌的框架，它经历了非常多的大型项目实战的考验以及长期的迭代，使得 <code>Express</code> 社区生态非常的丰富，遇到任何的问题都可以快速找到解决方案，这也是为什么 <code>NestJS</code> 采用 <code>Express</code> 作为默认基础框架的原因。</p>\n</blockquote>\n<p>介绍完 <code>Fastify</code> 的优势之后，接下来我们开始着手改造模板项目框架。首先，通过 <code>CLI</code> 默认生成的项目框架中，底层平台使用的是 <code>Express</code>，代码如下所示：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NestFactory</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.module'</span>;\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bootstrap</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">NestFactory</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">AppModule</span>);\n  <span class=\"hljs-keyword\">await</span> app.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">3000</span>);\n}\n<span class=\"hljs-title function_\">bootstrap</span>();\n</code></pre>\n<p>毕竟 <code>Fastify</code> 作为唯二内置的平台，整体的替换过程会非常顺畅。首先，安装对应的适配器依赖 <code>@nestjs/platform-fastify</code>。其次，使用 <code>FastifyAdapter</code> 替换默认的 <code>Express</code> 。</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NestFactory</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/core'</span>;\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">FastifyAdapter</span>,\n  <span class=\"hljs-title class_\">NestFastifyApplication</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/platform-fastify'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.module'</span>;\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bootstrap</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">NestFactory</span>.<span class=\"hljs-property\">create</span>&lt;<span class=\"hljs-title class_\">NestFastifyApplication</span>&gt;(\n    <span class=\"hljs-title class_\">AppModule</span>,\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FastifyAdapter</span>(),\n  );\n  <span class=\"hljs-keyword\">await</span> app.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">3000</span>);\n}\n<span class=\"hljs-title function_\">bootstrap</span>();\n</code></pre>\n<h2 data-id=\"heading-2\">版本控制</h2>\n<p>之前学习过 <strong>DevOps</strong> 小册的同学，应该对 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fdocs.gitlab.com%2Fee%2Fapi%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://docs.gitlab.com/ee/api/\" ref=\"nofollow noopener noreferrer\">Gitlab OpenApi</a> 比较熟悉，肯定也使用过这样的请求 <strong><a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgitlab.example.com%2Fapi%2Fv4%2Fprojects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://gitlab.example.com/api/v4/projects\" ref=\"nofollow noopener noreferrer\">gitlab.example.com/api/v4/proj…</a></strong> ，可以看出链接上面是带 v4 版本的。</p>\n<p>因为我们有两种项目分别是<strong>物料</strong>与<strong>用户</strong>，这两款系统作为基础应用，后期也会对其他的项目提供类似的 Open Api，同时避免不了升级之后，需要兼容老项目的情况。此时就会存在多种版本的 Api，所以我们也在工程添加版本控制来避免未来升级的时候，造成其他系统崩溃的情况。</p>\n<h4 data-id=\"heading-3\">单个请求控制</h4>\n<p><strong>第一步</strong>：在 <code>main.ts</code> 启用版本配置：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">VersioningType</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NestFactory</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/core'</span>;\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">FastifyAdapter</span>,\n  <span class=\"hljs-title class_\">NestFastifyApplication</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/platform-fastify'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.module'</span>;\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bootstrap</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">NestFactory</span>.<span class=\"hljs-property\">create</span>&lt;<span class=\"hljs-title class_\">NestFastifyApplication</span>&gt;(\n    <span class=\"hljs-title class_\">AppModule</span>,\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FastifyAdapter</span>(),\n  );\n\n  <span class=\"hljs-comment\">// 接口版本化管理</span>\n  app.<span class=\"hljs-title function_\">enableVersioning</span>({\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">VersioningType</span>.<span class=\"hljs-property\">URI</span>,\n  });\n\n  <span class=\"hljs-keyword\">await</span> app.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">3000</span>);\n}\n<span class=\"hljs-title function_\">bootstrap</span>();\n\n</code></pre>\n<p><strong>第二步</strong>：启用版本配置之后再在 <code>Controller</code> 中请求方法添加对应的版本号装饰器：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Controller</span>, <span class=\"hljs-title class_\">Version</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n\n  <span class=\"hljs-meta\">@Get</span>()\n  <span class=\"hljs-meta\">@Version</span>(<span class=\"hljs-string\">'1'</span>)\n  <span class=\"hljs-title function_\">findAll</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userService</span>.<span class=\"hljs-title function_\">findAll</span>();\n  }\n</code></pre>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2015a74a73e04d32a9672c9a46e508c8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>配置完毕之后从上图可以看到，只有携带了版本号的请求 <a href=\"https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2Fv1%2Fuser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://localhost:3000/v1/user\" ref=\"nofollow noopener noreferrer\">http://localhost:3000/v1/user</a> 能正常返回数据，而之前未携带版本号的请求 <a href=\"https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2Fuser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://localhost:3000/user\" ref=\"nofollow noopener noreferrer\">http://localhost:3000/user</a> 返回了 404 错误。</p>\n<p>除了针对某一个请求添加版本之外，同样也可以添加全局以及整个 <code>Controller</code> 的版本，具体的版本配置规则可以根据自己的实际需求取舍。</p>\n<h4 data-id=\"heading-4\">全局配置请求控制</h4>\n<p><strong>第一步</strong>：修改 <code>enableVersioning</code> 配置项：</p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\">app.enableVersioning({\n<span class=\"hljs-addition\">+   defaultVersion: '1',</span>\n    type: VersioningType.URI,\n});\n</code></pre>\n<p><strong>第二步</strong>：修改 <code>Controller</code> 的配置，在 <code>Controller</code> 装饰器中添加 <code>version</code> 属性：</p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\"><span class=\"hljs-deletion\">- @Get()</span>\n<span class=\"hljs-deletion\">- @Version('1')</span>\n<span class=\"hljs-addition\">+ @Controller({</span>\n<span class=\"hljs-addition\">+  path: 'user',</span>\n<span class=\"hljs-addition\">+  version: '1',</span>\n<span class=\"hljs-addition\">+ })</span>\n</code></pre>\n<p>完成上述的操作就可以对一整个 <code>Controller</code> 进行版本控制。但有的时候，我们需要做针对一些接口做兼容性的更新，而其他的请求是不需要携带版本，又或者请求有多个版本的时候，而默认请求想指定一个版本的话，我们可以在 <code>enableVersioning</code> 添加 <code>defaultVersion</code> 参数达到上述的要求：</p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\"><span class=\"hljs-addition\">+ import { VersioningType, VERSION_NEUTRAL } from '@nestjs/common';</span>\n  app.enableVersioning({\n<span class=\"hljs-deletion\">-    defaultVersion: '1',</span>\n<span class=\"hljs-addition\">+    defaultVersion: [VERSION_NEUTRAL, '1', '2']</span>\n  });\n</code></pre>\n<pre><code class=\"hljs language-ts\" lang=\"ts\">  <span class=\"hljs-meta\">@Get</span>()\n  <span class=\"hljs-meta\">@Version</span>([<span class=\"hljs-variable constant_\">VERSION_NEUTRAL</span>, <span class=\"hljs-string\">'1'</span>])\n  <span class=\"hljs-title function_\">findAll</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userService</span>.<span class=\"hljs-title function_\">findAll</span>();\n  }\n\n  <span class=\"hljs-meta\">@Get</span>()\n  <span class=\"hljs-meta\">@Version</span>(<span class=\"hljs-string\">'2'</span>)\n  <span class=\"hljs-title function_\">findAll2</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'i am new one'</span>;\n  }\n</code></pre>\n<p>接下来分别访问对应的请求<a href=\"https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2Fuser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://localhost:3000/user\" ref=\"nofollow noopener noreferrer\">http://localhost:3000/user</a> 与 <a href=\"https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2Fv2%2Fuser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://localhost:3000/v2/user\" ref=\"nofollow noopener noreferrer\">http://localhost:3000/v2/user</a> 可以获取到如下的返回值：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38d458d6dedc49a7949b5cd0d84def5b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h2 data-id=\"heading-5\">全局返回参数</h2>\n<p>在配置版本的过程中，也不断地测试了很多次接口，不难发现返回的接口数据非常的不标准，在一个正常的项目中不太合适用这种数据结构返回，毕竟这样对前端不友好，也不利于前端做统一的拦截与取值，所以需要格式化请求参数，输出统一的接口规范。</p>\n<p>一般正常项目的返回参数应该包括如下的内容：</p>\n<pre><code class=\"hljs language-json\" lang=\"json\"><span class=\"hljs-punctuation\">{</span>\n    data<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 数据</span>\n    status<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 接口状态值</span>\n    extra<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 拓展信息</span>\n    message<span class=\"hljs-punctuation\">:</span> 'success'<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 异常信息</span>\n    success：<span class=\"hljs-keyword\">true</span> <span class=\"hljs-comment\">// 接口业务返回状态</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>想要输出上述标准的返回参数格式的话：</p>\n<p><strong>第一步</strong>：新建 <code>src/common/interceptors/transform.interceptor.ts</code> 文件：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">Injectable</span>,\n  <span class=\"hljs-title class_\">NestInterceptor</span>,\n  <span class=\"hljs-title class_\">ExecutionContext</span>,\n  <span class=\"hljs-title class_\">CallHandler</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Observable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs'</span>;\n<span class=\"hljs-keyword\">import</span> { map } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs/operators'</span>;\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Response</span>&lt;T&gt; {\n  <span class=\"hljs-attr\">data</span>: T;\n}\n\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TransformInterceptor</span>&lt;T&gt;\n  <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">NestInterceptor</span>&lt;T, <span class=\"hljs-title class_\">Response</span>&lt;T&gt;&gt;\n{\n  <span class=\"hljs-title function_\">intercept</span>(\n    <span class=\"hljs-attr\">context</span>: <span class=\"hljs-title class_\">ExecutionContext</span>,\n    <span class=\"hljs-attr\">next</span>: <span class=\"hljs-title class_\">CallHandler</span>,\n  ): <span class=\"hljs-title class_\">Observable</span>&lt;<span class=\"hljs-title class_\">Response</span>&lt;T&gt;&gt; {\n    <span class=\"hljs-keyword\">return</span> next.<span class=\"hljs-title function_\">handle</span>().<span class=\"hljs-title function_\">pipe</span>(\n      <span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =&gt;</span> ({\n        data,\n        <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">0</span>,\n        <span class=\"hljs-attr\">extra</span>: {},\n        <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'success'</span>,\n        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">true</span>,\n      })),\n    );\n  }\n}\n</code></pre>\n<p><strong>第二步</strong>：修改 <code>main.ts</code> 文件，添加 <code>useGlobalInterceptors</code> 全局拦截器，处理返回值</p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\"><span class=\"hljs-addition\">+ import { TransformInterceptor } from './common/interceptors/transform.interceptor';</span>\n// 统一响应体格式\n<span class=\"hljs-addition\">+ app.useGlobalInterceptors(new TransformInterceptor());</span>\n</code></pre>\n<p>然后我们再次访问之前的请求，就能获取到标准格式的接口返回值了：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/826099eac0d4471b922d919d64e6040e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h2 data-id=\"heading-6\">全局异常拦截</h2>\n<p>再处理完毕正常的返回参数格式之后，对于异常处理也应该同样做一层标准的封装，这样利于开发前端的同学统一处理这类异常错误。</p>\n<p><strong>第一步</strong>：新建 <code>src/common/exceptions/base.exception.filter.ts</code> 与 <code>http.exception.filter.ts</code> 两个文件，从命名中可以看出它们分别处理<strong>统一异常</strong>与 <code>HTTP</code> 类型的接口相关异常。</p>\n<p><code>base.exception.filter</code> =&gt; <strong><code>Catch</code> 的参数为空时，默认捕获所有异常</strong></p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FastifyReply</span>, <span class=\"hljs-title class_\">FastifyRequest</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"fastify\"</span>;\n\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">ExceptionFilter</span>,\n  <span class=\"hljs-title class_\">Catch</span>,\n  <span class=\"hljs-title class_\">ArgumentsHost</span>,\n  <span class=\"hljs-title class_\">HttpStatus</span>,\n  <span class=\"hljs-title class_\">ServiceUnavailableException</span>,\n  <span class=\"hljs-title class_\">HttpException</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n\n<span class=\"hljs-meta\">@Catch</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AllExceptionsFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ExceptionFilter</span> {\n  <span class=\"hljs-keyword\">catch</span>(<span class=\"hljs-attr\">exception</span>: <span class=\"hljs-title class_\">Error</span>, <span class=\"hljs-attr\">host</span>: <span class=\"hljs-title class_\">ArgumentsHost</span>) {\n    <span class=\"hljs-keyword\">const</span> ctx = host.<span class=\"hljs-title function_\">switchToHttp</span>();\n    <span class=\"hljs-keyword\">const</span> response = ctx.<span class=\"hljs-property\">getResponse</span>&lt;<span class=\"hljs-title class_\">FastifyReply</span>&gt;();\n    <span class=\"hljs-keyword\">const</span> request = ctx.<span class=\"hljs-property\">getRequest</span>&lt;<span class=\"hljs-title class_\">FastifyRequest</span>&gt;();\n\n    request.<span class=\"hljs-property\">log</span>.<span class=\"hljs-title function_\">error</span>(exception)\n\n    <span class=\"hljs-comment\">// 非 HTTP 标准异常的处理。</span>\n    response.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-title class_\">HttpStatus</span>.<span class=\"hljs-property\">SERVICE_UNAVAILABLE</span>).<span class=\"hljs-title function_\">send</span>({\n      <span class=\"hljs-attr\">statusCode</span>: <span class=\"hljs-title class_\">HttpStatus</span>.<span class=\"hljs-property\">SERVICE_UNAVAILABLE</span>,\n      <span class=\"hljs-attr\">timestamp</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">toISOString</span>(),\n      <span class=\"hljs-attr\">path</span>: request.<span class=\"hljs-property\">url</span>,\n      <span class=\"hljs-attr\">message</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServiceUnavailableException</span>().<span class=\"hljs-title function_\">getResponse</span>(),\n    });\n  }\n}\n</code></pre>\n<p><code>http.exception.filter.ts</code> =&gt; <code>Catch</code> 的参数为 <code>HttpException</code> 将只捕获 <code>HTTP</code> 相关的异常错误</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FastifyReply</span>, <span class=\"hljs-title class_\">FastifyRequest</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"fastify\"</span>;\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">ExceptionFilter</span>,\n  <span class=\"hljs-title class_\">Catch</span>,\n  <span class=\"hljs-title class_\">ArgumentsHost</span>,\n  <span class=\"hljs-title class_\">HttpException</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n\n<span class=\"hljs-meta\">@Catch</span>(<span class=\"hljs-title class_\">HttpException</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HttpExceptionFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ExceptionFilter</span> {\n  <span class=\"hljs-keyword\">catch</span>(<span class=\"hljs-attr\">exception</span>: <span class=\"hljs-title class_\">HttpException</span>, <span class=\"hljs-attr\">host</span>: <span class=\"hljs-title class_\">ArgumentsHost</span>) {\n    <span class=\"hljs-keyword\">const</span> ctx = host.<span class=\"hljs-title function_\">switchToHttp</span>();\n    <span class=\"hljs-keyword\">const</span> response = ctx.<span class=\"hljs-property\">getResponse</span>&lt;<span class=\"hljs-title class_\">FastifyReply</span>&gt;();\n    <span class=\"hljs-keyword\">const</span> request = ctx.<span class=\"hljs-property\">getRequest</span>&lt;<span class=\"hljs-title class_\">FastifyRequest</span>&gt;();\n    <span class=\"hljs-keyword\">const</span> status = exception.<span class=\"hljs-title function_\">getStatus</span>();\n\n    response.<span class=\"hljs-title function_\">status</span>(status).<span class=\"hljs-title function_\">send</span>({\n      <span class=\"hljs-attr\">statusCode</span>: status,\n      <span class=\"hljs-attr\">timestamp</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">toISOString</span>(),\n      <span class=\"hljs-attr\">path</span>: request.<span class=\"hljs-property\">url</span>,\n      <span class=\"hljs-attr\">message</span>: exception.<span class=\"hljs-title function_\">getResponse</span>(),\n    });\n  }\n}\n</code></pre>\n<p><strong>第二步</strong>：在 <code>main.ts</code> 文件中添加 <code>useGlobalFilters</code> 全局过滤器：</p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\"><span class=\"hljs-addition\">+ import { AllExceptionsFilter } from './common/exceptions/base.exception.filter';</span>\n<span class=\"hljs-addition\">+ import { HttpExceptionFilter } from './common/exceptions/http.exception.filter';</span>\n  // 异常过滤器\n<span class=\"hljs-addition\">+ app.useGlobalFilters(new AllExceptionsFilter(), new HttpExceptionFilter());</span>\n</code></pre>\n<blockquote>\n<p><strong>这里一定要注意引入自定义异常的先后顺序，不然异常捕获逻辑会出现混乱</strong>。</p>\n</blockquote>\n<p>完成上述操作之后开始检验是否配置正常。首先访问一个不存在的接口 <a href=\"https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2Ftest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://localhost:3000/test\" ref=\"nofollow noopener noreferrer\">http://localhost:3000/test</a> ，此时可以对比自定义与原生的异常返回参数区别。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0b8f5e7f9b24dcaacf33ab10d88f613~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>验证完 <code>HTTP</code> 异常之后，我们接着在 <code>UserController</code> 中伪造一个程序运行异常的接口，来验证常规异常是否能被正常捕获：</p>\n<pre><code class=\"hljs language-less\" lang=\"less\">  <span class=\"hljs-variable\">@Get</span>(<span class=\"hljs-string\">'findError'</span>)\n  <span class=\"hljs-variable\">@Version</span>([VERSION_NEUTRAL, <span class=\"hljs-string\">'1'</span>])\n  findError() {\n    <span class=\"hljs-selector-tag\">const</span> <span class=\"hljs-selector-tag\">a</span>: <span class=\"hljs-selector-tag\">any</span> = {}\n    console.log(a.b.c)\n    return this.userService.findAll();\n  }\n</code></pre>\n<p>再次访问 <a href=\"https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2Fuser%2FfindError\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://localhost:3000/user/findError\" ref=\"nofollow noopener noreferrer\">http://localhost:3000/user/findError</a> ，此时可以看到原生与自定义返回的异常错误存在一定的区别了。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23892fd1a32e4e4cba805df4e3bf7892~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>除了全局异常拦截处理之外，我们需要再新建一个 <code>business.exception.ts</code> 来处理业务运行中预知且主动抛出的异常：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">HttpException</span>, <span class=\"hljs-title class_\">HttpStatus</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">BUSINESS_ERROR_CODE</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./business.error.codes'</span>;\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">BusinessError</span> = {\n  <span class=\"hljs-attr\">code</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">message</span>: <span class=\"hljs-built_in\">string</span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BusinessException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">HttpException</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">err: BusinessError | <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> err === <span class=\"hljs-string\">'string'</span>) {\n      err = {\n        <span class=\"hljs-attr\">code</span>: <span class=\"hljs-variable constant_\">BUSINESS_ERROR_CODE</span>.<span class=\"hljs-property\">COMMON</span>,\n        <span class=\"hljs-attr\">message</span>: err,\n      };\n    }\n    <span class=\"hljs-variable language_\">super</span>(err, <span class=\"hljs-title class_\">HttpStatus</span>.<span class=\"hljs-property\">OK</span>);\n  }\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">throwForbidden</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>({\n      <span class=\"hljs-attr\">code</span>: <span class=\"hljs-variable constant_\">BUSINESS_ERROR_CODE</span>.<span class=\"hljs-property\">ACCESS_FORBIDDEN</span>,\n      <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'抱歉哦，您无此权限！'</span>,\n    });\n  }\n}\n</code></pre>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">BUSINESS_ERROR_CODE</span> = {\n  <span class=\"hljs-comment\">// 公共错误码</span>\n  <span class=\"hljs-attr\">COMMON</span>: <span class=\"hljs-number\">10001</span>,\n  <span class=\"hljs-comment\">// 特殊错误码</span>\n  <span class=\"hljs-attr\">TOKEN_INVALID</span>: <span class=\"hljs-number\">10002</span>,\n  <span class=\"hljs-comment\">// 禁止访问</span>\n  <span class=\"hljs-attr\">ACCESS_FORBIDDEN</span>: <span class=\"hljs-number\">10003</span>,\n  <span class=\"hljs-comment\">// 权限已禁用</span>\n  <span class=\"hljs-attr\">PERMISSION_DISABLED</span>: <span class=\"hljs-number\">10003</span>,\n  <span class=\"hljs-comment\">// 用户已冻结</span>\n  <span class=\"hljs-attr\">USER_DISABLED</span>: <span class=\"hljs-number\">10004</span>,\n};\n\n</code></pre>\n<p>简单改造一下 <code>HttpExceptionFilter</code>，在处理 <code>HTTP</code> 异常返回之前先处理业务异常：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FastifyReply</span>, <span class=\"hljs-title class_\">FastifyRequest</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"fastify\"</span>;\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">ExceptionFilter</span>,\n  <span class=\"hljs-title class_\">Catch</span>,\n  <span class=\"hljs-title class_\">ArgumentsHost</span>,\n  <span class=\"hljs-title class_\">HttpException</span>,\n  <span class=\"hljs-title class_\">HttpStatus</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BusinessException</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./business.exception\"</span>;\n\n<span class=\"hljs-meta\">@Catch</span>(<span class=\"hljs-title class_\">HttpException</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HttpExceptionFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ExceptionFilter</span> {\n  <span class=\"hljs-keyword\">catch</span>(<span class=\"hljs-attr\">exception</span>: <span class=\"hljs-title class_\">HttpException</span>, <span class=\"hljs-attr\">host</span>: <span class=\"hljs-title class_\">ArgumentsHost</span>) {\n    <span class=\"hljs-keyword\">const</span> ctx = host.<span class=\"hljs-title function_\">switchToHttp</span>();\n    <span class=\"hljs-keyword\">const</span> response = ctx.<span class=\"hljs-property\">getResponse</span>&lt;<span class=\"hljs-title class_\">FastifyReply</span>&gt;();\n    <span class=\"hljs-keyword\">const</span> request = ctx.<span class=\"hljs-property\">getRequest</span>&lt;<span class=\"hljs-title class_\">FastifyRequest</span>&gt;();\n    <span class=\"hljs-keyword\">const</span> status = exception.<span class=\"hljs-title function_\">getStatus</span>();\n\n    <span class=\"hljs-comment\">// 处理业务异常</span>\n    <span class=\"hljs-keyword\">if</span> (exception <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">BusinessException</span>) {\n      <span class=\"hljs-keyword\">const</span> error = exception.<span class=\"hljs-title function_\">getResponse</span>();\n      response.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-title class_\">HttpStatus</span>.<span class=\"hljs-property\">OK</span>).<span class=\"hljs-title function_\">send</span>({\n        <span class=\"hljs-attr\">data</span>: <span class=\"hljs-literal\">null</span>,\n        <span class=\"hljs-attr\">status</span>: error[<span class=\"hljs-string\">'code'</span>],\n        <span class=\"hljs-attr\">extra</span>: {},\n        <span class=\"hljs-attr\">message</span>: error[<span class=\"hljs-string\">'message'</span>],\n        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span>,\n      });\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    response.<span class=\"hljs-title function_\">status</span>(status).<span class=\"hljs-title function_\">send</span>({\n      <span class=\"hljs-attr\">statusCode</span>: status,\n      <span class=\"hljs-attr\">timestamp</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">toISOString</span>(),\n      <span class=\"hljs-attr\">path</span>: request.<span class=\"hljs-property\">url</span>,\n      <span class=\"hljs-attr\">message</span>: exception.<span class=\"hljs-title function_\">getResponse</span>(),\n    });\n  }\n}\n</code></pre>\n<blockquote>\n<p>由于异常拦截的返回函数使用的是 <code>Fastify</code> 提供的，所以我们使用的返回方法是 <code>.send（）</code>，如果你没有使用 <code>Fastify</code> 作为 <code>HTTP</code> 底层服务的话，拦截返回的方法要保持跟官网一致（官网默认的是 <code>Express</code> 的框架，所以返回方法不一样）。</p>\n</blockquote>\n<p>完成配置之后，我们继续在 <code>UserController</code> 中重新伪造一个业务异常的场景：</p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\"><span class=\"hljs-addition\">+ import { BusinessException } from 'src/common/exceptions/business.exception';</span>\n\n  @Get('findBusinessError')\n  @Version([VERSION_NEUTRAL, '1'])\n  findBusinessError() {\n    const a: any = {}\n    try {\n      console.log(a.b.c)\n    } catch (error) {\n      throw new BusinessException('你这个参数错了')\n    }\n    return this.userService.findAll();\n  }\n</code></pre>\n<p>访问接口 <a href=\"https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2Fuser%2FfindBusinessError\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://localhost:3000/user/findBusinessError\" ref=\"nofollow noopener noreferrer\">http://localhost:3000/user/findBusinessError</a> ，可以看到能够返回我们预期的错误了。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44e2d881639342428a05875258e7dba3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<blockquote>\n<p>自定义业务异常的优点在于，当你的业务逻辑复杂到一定的地步，在任意的一处出现可预知的错误，此时可以直接抛出异常让用户感知，不需要写很多冗余的返回代码。</p>\n</blockquote>\n<p>异常拦截、全局返回参数修改以及替换 <code>Fastify</code> 框架的代码已上传 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway%2Ftree%2Fdemo%2Fv2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway/tree/demo/v2\" ref=\"nofollow noopener noreferrer\">demo/v2</a>， 需要的同学可以自取。</p>\n<h2 data-id=\"heading-7\">环境配置</h2>\n<p>一般在项目开发中，至少会经历过 <code>Dev</code> -&gt; <code>Test</code> -&gt; <code>Prod</code> 三个环境。如果再富余一点的话，还会再多一个 <code>Pre</code> 环境。甚至在不差钱的情况下，每个环境可能都会有<strong>多套配置</strong>。那么对应的使用的数据库、<code>Redis</code> 或者其他的配置项都会随着环境的变换而改变，所以在实际项目开发中，多环境的配置非常必要。</p>\n<h4 data-id=\"heading-8\">自带环境配置</h4>\n<p><code>NestJS</code> 本身也自带了多环境配置方法</p>\n<ol>\n<li>安装 <code>@nestjs/config</code></li>\n</ol>\n<pre><code class=\"hljs language-ruby\" lang=\"ruby\"><span class=\"hljs-variable\">$ </span>yarn add  <span class=\"hljs-variable\">@nestjs</span>/config\n</code></pre>\n<ol start=\"2\">\n<li>安装完毕之后，在 <code>app.module.ts</code> 中添加 <code>ConfigModule</code> 模块</li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Module</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppController</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.controller'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.service'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./user/user.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ConfigModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/config'</span>;\n\n<span class=\"hljs-meta\">@Module</span>({\n  <span class=\"hljs-attr\">imports</span>: [<span class=\"hljs-title class_\">ConfigModule</span>.<span class=\"hljs-title function_\">forRoot</span>(), <span class=\"hljs-title class_\">UserModule</span>],\n  <span class=\"hljs-attr\">controllers</span>: [<span class=\"hljs-title class_\">AppController</span>],\n  <span class=\"hljs-attr\">providers</span>: [<span class=\"hljs-title class_\">AppService</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> { }\n</code></pre>\n<p><code>@nestjs/config</code> 默认会从<strong>项目根目录</strong>载入并解析一个 <code>.env</code> 文件，从 <code>.env</code> 文件和 <code>process.env</code> 合并环境变量键值对，并将结果存储到一个可以通过 <code>ConfigService</code> 访问的私有结构。</p>\n<p><code>forRoot()</code> 方法注册了 <code>ConfigService</code> 提供者，后者提供了一个 <code>get()</code> 方法来读取这些<strong>解析/合并</strong>的配置变量。</p>\n<blockquote>\n<p>当一个键同时作为环境变量（例如，通过操作系统终端如<code>export DATABASE_USER=test</code>导出）存在于运行环境中以及<code>.env</code>文件中时，以运行环境变量优先。</p>\n</blockquote>\n<p>默认的 <code>.env</code> 文件变量定义如下所示，配置后会默认读取此文件:</p>\n<pre><code class=\"hljs language-ini\" lang=\"ini\"><span class=\"hljs-attr\">DATABASE_USER</span>=test\n<span class=\"hljs-attr\">DATABASE_PASSWORD</span>=test\n</code></pre>\n<h4 data-id=\"heading-9\">自定义 YAML</h4>\n<p>虽然 <code>Nest</code> 自带了环境配置的功能，使用的 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmotdotla%2Fdotenv\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/motdotla/dotenv\" ref=\"nofollow noopener noreferrer\">dotenv</a> 来作为默认解析，但默认配置项看起来并不是非常清爽，我们接下来使用结构更加清晰的 <code>YAML</code> 来覆盖默认配置。</p>\n<blockquote>\n<p>想要了解 <code>YAML</code> 更多细节的同学可以点击<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fbaike.baidu.com%2Fitem%2FYAML%2F1067697\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://baike.baidu.com/item/YAML/1067697\" ref=\"nofollow noopener noreferrer\">链接</a>看下，如果使用过 <code>Gitlab CICD</code> 的同学，应该对 <code>.yml</code> 文件比较熟悉了，这里就不对 <code>YAML</code> 配置文件做过多的阐述了。</p>\n</blockquote>\n<ol>\n<li>在使用自定义 <code>YAML</code> 配置文件之前，先要修改 <code>app.module.ts</code> 中 <code>ConfigModule</code> 的配置项 <code>ignoreEnvFile</code>，禁用默认读取 <code>.env</code> 的规则：</li>\n</ol>\n<pre><code class=\"hljs language-php\" lang=\"php\">ConfigModule.<span class=\"hljs-title function_ invoke__\">forRoot</span>({ <span class=\"hljs-attr\">ignoreEnvFile</span>: <span class=\"hljs-literal\">true</span>, });\n</code></pre>\n<ol start=\"2\">\n<li>然后再安装 <code>YAML</code> 的 <code>Node</code> 库 <code>yaml</code>：</li>\n</ol>\n<pre><code class=\"hljs language-csharp\" lang=\"csharp\">$ yarn <span class=\"hljs-keyword\">add</span> yaml\n</code></pre>\n<ol start=\"3\">\n<li>安装完毕之后，在根目录新建 <code>.config</code> 文件夹，并创建对应环境的 <code>yaml</code> 文件，如下图所示：</li>\n</ol>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71e2c740648641b499440a0bd0038e31~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<ol start=\"4\">\n<li>新建 <code>utils/index.ts</code> 文件，添加读取 <code>YAML</code> 配置文件的方法：</li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { parse } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'yaml'</span>\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);\n\n<span class=\"hljs-comment\">// 获取项目运行环境</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getEnv</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">RUNNING_ENV</span>\n}\n\n<span class=\"hljs-comment\">// 读取项目配置</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getConfig</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> environment = <span class=\"hljs-title function_\">getEnv</span>()\n  <span class=\"hljs-keyword\">const</span> yamlPath = path.<span class=\"hljs-title function_\">join</span>(process.<span class=\"hljs-title function_\">cwd</span>(), <span class=\"hljs-string\">`./.config/.<span class=\"hljs-subst\">${environment}</span>.yaml`</span>)\n  <span class=\"hljs-keyword\">const</span> file = fs.<span class=\"hljs-title function_\">readFileSync</span>(yamlPath, <span class=\"hljs-string\">'utf8'</span>)\n  <span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-title function_\">parse</span>(file)\n  <span class=\"hljs-keyword\">return</span> config\n}\n</code></pre>\n<ol start=\"5\">\n<li>最后添加在 <code>app.module.ts</code> 自定义配置项即可正常使用环境变量：</li>\n</ol>\n<pre><code class=\"hljs language-diff\" lang=\"diff\"><span class=\"hljs-addition\">+ import { getConfig } from './utils';</span>\n    ConfigModule.forRoot({\n      ignoreEnvFile: true,\n<span class=\"hljs-addition\">+     isGlobal: true,</span>\n<span class=\"hljs-addition\">+     load: [getConfig]</span>\n    }),\n</code></pre>\n<blockquote>\n<p>注意：<code>load</code> 方法中传入的 <code>getConfig</code> 是一个函数，并不是直接 JSON 格式的配置对象，直接添加变量会报错。</p>\n</blockquote>\n<h4 data-id=\"heading-10\">使用自定义配置</h4>\n<p>完成之前的配置后，就可以使用 <code>cross-env</code> 指定运行环境来使用对应环境的配置变量。</p>\n<ol>\n<li>添加 cross-env 依赖：</li>\n</ol>\n<pre><code class=\"hljs language-shell\" lang=\"shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">yarn add cross-env</span>\n</code></pre>\n<ol start=\"2\">\n<li>修改启动命令：</li>\n</ol>\n<pre><code class=\"hljs language-json\" lang=\"json\"><span class=\"hljs-attr\">\"start:dev\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"cross-env RUNNING_ENV=dev nest start --watch\"</span><span class=\"hljs-punctuation\">,</span>\n</code></pre>\n<ol start=\"3\">\n<li>添加 .dev.yaml 配置:</li>\n</ol>\n<pre><code class=\"hljs language-yaml\" lang=\"yaml\"><span class=\"hljs-attr\">TEST_VALUE:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cookie</span>\n</code></pre>\n<blockquote>\n<p>注意 <code>yaml</code> 配置的规则，缩进以及冒号 <strong>:</strong> 后的空格是经常容易出错的地方</p>\n</blockquote>\n<ol start=\"4\">\n<li>在我们之前创建好的 <code>UserController</code> 中添加 <code>ConfigService</code> 以及新的请求：</li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> userService: UserService,\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> configService: ConfigService\n  </span>) { }\n\n  <span class=\"hljs-meta\">@Get</span>(<span class=\"hljs-string\">'getTestName'</span>)\n  <span class=\"hljs-title function_\">getTestName</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">configService</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'TEST_VALUE'</span>).<span class=\"hljs-property\">name</span>;\n  }\n}\n</code></pre>\n<p>完成上述所有步骤之后，重启项目，接下来访问 <a href=\"https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2Fv1%2Fuser%2FgetTestName\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://localhost:3000/v1/user/getTestName\" ref=\"nofollow noopener noreferrer\">http://localhost:3000/v1/user/getTestName</a> 能看到已经能够根据环境变量拿到对应的值：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc2fc65526944018b70040715cbcb340~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<blockquote>\n<p>这里应该注意到，我们并没有注册 <code>ConfigModule</code>。这是因为在 <code>app.module</code> 中添加 <code>isGlobal</code> 属性，开启 <code>Config</code> 全局注册，如果 <code>isGlobal</code> 没有添加的话，则需要先在对应的 <code>module</code> 文件中注册后才能正常使用 <code>ConfigService</code>。</p>\n</blockquote>\n<blockquote>\n<p>项目配置的相关代码已上传 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway%2Ftree%2Fdemo%2Fv3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway/tree/demo/v3\" ref=\"nofollow noopener noreferrer\">demo/v3</a> 分支中，需要的同学自取。由于 <code>.config</code> 里面的配置信息比较隐私，所以不会上传到 <code>git</code> 当中，需要的同学可以在<a href=\"https://juejin.cn/book/7065201654273933316/section/7111992826132430859\" target=\"_blank\" title=\"https://juejin.cn/book/7065201654273933316/section/7111992826132430859\">第九章节-学习里程碑</a>中获取对应的模板。</p>\n</blockquote>\n<h2 data-id=\"heading-11\">热重载</h2>\n<p><code>NestJS</code> 的 <code>dev</code> 模式是将 <code>TS</code> 代码编译成 <code>JS</code> 再启动，这样每次我们修改代码都会重复经历一次编译的过程，在项目开发初期，业务模块体量不大的情况下，性能开销并不会有很大的影响，但是在业务模块增加到一定数量时，每一次更新代码导致的重新编译就会异常痛苦。为了避免这个情况，<code>NestJS</code> 也提供了热重载的功能，借助 <code>Webpack</code> 的 <code>HMR</code>，使得每次更新只需要替换更新的内容，减少编译的时间与过程。</p>\n<blockquote>\n<p>注意：<code>Webpack</code>并不会自动将（例如&nbsp;<code>graphql</code>&nbsp;文件）复制到&nbsp;<code>dist</code>&nbsp;文件夹中。同理，<code>Webpack</code>&nbsp;与静态路径（例如 <code>TypeOrmModule</code> 中的&nbsp;<code>entities</code> 属性）不兼容。所以如果有同学跳过本章，直接配置了 <code>TypeOrmModule</code> 中的 <code>entities</code>，反过来再直接配置热重载会导致启动失败。</p>\n</blockquote>\n<p>由于我们是使用 <code>CLI</code> 插件安装的工程模板，可以直接使用 <code>HotModuleReplacementPlugin</code> 创建配置，减少工作量。</p>\n<ol>\n<li>照例安装所需依赖：</li>\n</ol>\n<pre><code class=\"hljs language-arduino\" lang=\"arduino\">$ yarn add webpack-node-externals run-script-webpack-plugin webpack\n</code></pre>\n<ol start=\"2\">\n<li>根目录新建 <code>webpack-hmr.config.js</code> 文件，复制下述代码：</li>\n</ol>\n<pre><code class=\"hljs language-js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> nodeExternals = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack-node-externals'</span>);\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">RunScriptWebpackPlugin</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'run-script-webpack-plugin'</span>);\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">options, webpack</span>) {\n  <span class=\"hljs-keyword\">return</span> {\n    ...options,\n    <span class=\"hljs-attr\">entry</span>: [<span class=\"hljs-string\">'webpack/hot/poll?100'</span>, options.<span class=\"hljs-property\">entry</span>],\n    <span class=\"hljs-attr\">externals</span>: [\n      <span class=\"hljs-title function_\">nodeExternals</span>({\n        <span class=\"hljs-attr\">allowlist</span>: [<span class=\"hljs-string\">'webpack/hot/poll?100'</span>],\n      }),\n    ],\n    <span class=\"hljs-attr\">plugins</span>: [\n      ...options.<span class=\"hljs-property\">plugins</span>,\n      <span class=\"hljs-keyword\">new</span> webpack.<span class=\"hljs-title class_\">HotModuleReplacementPlugin</span>(),\n      <span class=\"hljs-keyword\">new</span> webpack.<span class=\"hljs-title class_\">WatchIgnorePlugin</span>({\n        <span class=\"hljs-attr\">paths</span>: [<span class=\"hljs-regexp\">/.js$/</span>, <span class=\"hljs-regexp\">/.d.ts$/</span>],\n      }),\n      <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RunScriptWebpackPlugin</span>({ <span class=\"hljs-attr\">name</span>: options.<span class=\"hljs-property\">output</span>.<span class=\"hljs-property\">filename</span> }),\n    ],\n  };\n};\n</code></pre>\n<ol start=\"3\">\n<li>修改 <code>main.ts</code>，开启 <code>HMR</code> 功能：</li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">module</span>: <span class=\"hljs-built_in\">any</span>;\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bootstrap</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">hot</span>) {\n    <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">hot</span>.<span class=\"hljs-title function_\">accept</span>();\n    <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">hot</span>.<span class=\"hljs-title function_\">dispose</span>(<span class=\"hljs-function\">() =&gt;</span> app.<span class=\"hljs-title function_\">close</span>());\n  }\n}\n<span class=\"hljs-title function_\">bootstrap</span>();\n</code></pre>\n<ol start=\"4\">\n<li>修改启动脚本启动命令即可：</li>\n</ol>\n<pre><code class=\"hljs language-less\" lang=\"less\">\"start:hotdev\": \"cross-env RUNNING_ENV=dev nest build <span class=\"hljs-attr\">--webpack</span> <span class=\"hljs-attr\">--webpackPath</span> webpack-hmr.config.js <span class=\"hljs-attr\">--watch</span>\"\n</code></pre>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7b960fe772e404cbac3276e5e167db9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>然后修改一段简单的代码（随意修改即可），测试一下热更新的是否正常生效：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/659b2d68c1d145d1b3a7f5bfff96ee98~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>如上图所示，我们已经开启了 <code>HMR</code> 功能，具体什么时候使用可以根据自己的项目以及喜好开启，如果没有使用 <code>CLI</code> 创建的工程模板，但也想开启 <code>HMR</code> 功能的话，可以根据<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fdocs.nestjs.cn%2F8%2Frecipes%3Fid%3D%25e6%25b2%25a1%25e6%259c%2589%25e4%25bd%25bf%25e7%2594%25a8-cli\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://docs.nestjs.cn/8/recipes?id=%e6%b2%a1%e6%9c%89%e4%bd%bf%e7%94%a8-cli\" ref=\"nofollow noopener noreferrer\">文档</a> 自行配置。</p>\n<blockquote>\n<p>热更新的功能看自己的需求再开启，有的时候存在缓存的情况出现，<strong>另外，在使用热更新的时候，数据库章节中实体类需要手动注册，不能自动注册</strong>，所以如果项目不大的啥情况，使用 <strong>NestJS</strong> 自带的项目启动脚本即可。</p>\n</blockquote>\n<h2 data-id=\"heading-12\">文档</h2>\n<p>作为一个后端服务，<strong>API</strong> 文档是必不可少的，除了接口描述、参数描述之外，自测也十分方便。<code>NestJS</code> 自带了 <code>Swagger</code> 文档，集成非常简单，接下来进行文档的配置部分。</p>\n<ol>\n<li>工程之前使用了 <code>fastify</code> 所以需要安装以下依赖：</li>\n</ol>\n<pre><code class=\"hljs language-ruby\" lang=\"ruby\"><span class=\"hljs-variable\">$ </span>yarn add <span class=\"hljs-variable\">@nestjs</span>/swagger \n</code></pre>\n<blockquote>\n<p>新版本已经不需要安装 fastify-swagger 依赖，默认被内置在 <code>@nestjs/swagger</code> 中了。</p>\n</blockquote>\n<ol start=\"2\">\n<li>依赖安装完毕之后，先创建 <code>src/doc.ts</code> 文件：</li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">SwaggerModule</span>, <span class=\"hljs-title class_\">DocumentBuilder</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/swagger'</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> packageConfig <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../package.json'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">generateDocument</span> = (<span class=\"hljs-params\">app</span>) =&gt; {\n\n  <span class=\"hljs-keyword\">const</span> options = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DocumentBuilder</span>()\n    .<span class=\"hljs-title function_\">setTitle</span>(packageConfig.<span class=\"hljs-property\">name</span>)\n    .<span class=\"hljs-title function_\">setDescription</span>(packageConfig.<span class=\"hljs-property\">description</span>)\n    .<span class=\"hljs-title function_\">setVersion</span>(packageConfig.<span class=\"hljs-property\">version</span>)\n    .<span class=\"hljs-title function_\">build</span>();\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable language_\">document</span> = <span class=\"hljs-title class_\">SwaggerModule</span>.<span class=\"hljs-title function_\">createDocument</span>(app, options);\n\n  <span class=\"hljs-title class_\">SwaggerModule</span>.<span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-string\">'/api/doc'</span>, app, <span class=\"hljs-variable language_\">document</span>);\n}\n</code></pre>\n<blockquote>\n<p>为了节约配置项，<code>Swagger</code> 的配置信息全部取自 <code>package.json</code>，有额外需求的话可以自己维护配置信息的文件。</p>\n</blockquote>\n<p>默认情况下，在 <code>TS</code> 开发的项目中是没办法导入 <code>.json</code> 后缀的模块，所以可以在 <code>tsconfig.json</code> 中新增 <code>resolveJsonModule</code> 配置即可。</p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\">{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"declaration\": true,\n    \"removeComments\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"target\": \"es2017\",\n    \"sourceMap\": true,\n    \"outDir\": \"./dist\",\n    \"baseUrl\": \"./\",\n    \"incremental\": true,\n    \"skipLibCheck\": true,\n    \"strictNullChecks\": false,\n    \"noImplicitAny\": false,\n    \"strictBindCallApply\": false,\n    \"forceConsistentCasingInFileNames\": false,\n    \"noFallthroughCasesInSwitch\": false,\n<span class=\"hljs-addition\">+   \"resolveJsonModule\": true</span>\n  }\n}\n</code></pre>\n<ol start=\"4\">\n<li>在 <code>main.ts</code> 中引入方法即可：</li>\n</ol>\n<pre><code class=\"hljs language-diff\" lang=\"diff\">import { VersioningType, VERSION_NEUTRAL } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from '@nestjs/platform-fastify';\nimport { AppModule } from './app.module';\nimport { AllExceptionsFilter } from './common/exceptions/base.exception.filter';\nimport { HttpExceptionFilter } from './common/exceptions/http.exception.filter';\nimport { TransformInterceptor } from './common/interceptors/transform.interceptor';\n<span class=\"hljs-addition\">+ import { generateDocument } from './doc';</span>\n\ndeclare const module: any;\n\nasync function bootstrap() {\n  const app = await NestFactory.create&lt;NestFastifyApplication&gt;(\n    AppModule,\n    new FastifyAdapter(),\n  );\n\n  // 统一响应体格式\n  app.useGlobalInterceptors(new TransformInterceptor());\n\n  // 异常过滤器\n  app.useGlobalFilters(new AllExceptionsFilter(), new HttpExceptionFilter());\n\n  // 接口版本化管理\n  app.enableVersioning({\n    defaultVersion: [VERSION_NEUTRAL, '1', '2'],\n    type: VersioningType.URI,\n  });\n\n<span class=\"hljs-addition\">+  // 创建文档</span>\n<span class=\"hljs-addition\">+  generateDocument(app)</span>\n\n  // 添加热更新\n  if (module.hot) {\n    module.hot.accept();\n    module.hot.dispose(() =&gt; app.close());\n  }\n\n  await app.listen(3000);\n}\nbootstrap();\n</code></pre>\n<p>完成上述内容之后，浏览器打开 <a href=\"https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2Fapi%2Fdoc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://localhost:3000/api/doc\" ref=\"nofollow noopener noreferrer\">http://localhost:3000/api/doc</a> 就能看到 <code>Swagger</code> 已经将我们的前面写好的接口信息收集起来了。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/777e652772fe47ce8ea0ac87dd17812e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<blockquote>\n<p>从上图可以看出，<code>Swagger</code> 会默认收集我们的接口信息，但是没有描述与分类，使用上很不方便，由于使用过程中的细节较多，具体的配置细节可以从<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fdocs.nestjs.cn%2F8%2Frecipes%3Fid%3Dswagger\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://docs.nestjs.cn/8/recipes?id=swagger\" ref=\"nofollow noopener noreferrer\">官网文档</a>获取。</p>\n</blockquote>\n<blockquote>\n<p>热更新与 <code>Swagger</code> 文档配置代码以上传 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway%2Ftree%2Fdemo%2Fv4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway/tree/demo/v4\" ref=\"nofollow noopener noreferrer\">demo/v4</a>，需要的同学可以自取。</p>\n</blockquote>\n<h2 data-id=\"heading-13\">写在最后</h2>\n<p>本章主要介绍了，对 <code>CLI</code> 创建的标准工程模板进行一些常规项目必备的功能配置，例如替换底层 <code>Http</code> 框架、环境变量配置等等内容。</p>\n<p>添加了上述<strong>通用性基础配置</strong>后的工程模板能基本满足一个小型的业务需求功能，如果还有其他要求的话可以增减功能或者修改某些配置来适配，总体还是看<strong>团队自身的业务需求进行定制</strong>，比如团队中有<code>统一权限控制的插件</code>或者<code>构建服务的脚本</code>都可以放在工程模板中，方便其他同学开箱即用。</p>\n<p>现在，我们已经对 <code>NestJS</code> 有了初步了解。下一章，我们将正式使用 <code>NestJS</code> 开发业务需求。</p>\n<p>如果你有什么疑问，欢迎在评论区提出或者加群沟通。 👏</p></div>"
    },
    {
        "name": "5\n工具篇：飞书应用对接\n学习时长: 54分46秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>在上一章中，我们对 <strong>CLI</strong> 创建的基础工程模板添加了一些通用性的功能配置，也能满足大部分业务开发的需求。</p>\n<p>在完成了基础配置之后，就可以根据自身团队的情况来开发专属的业务功能，例如团队中使用企业微信、钉钉、飞书等企业工具，可以对接匹配的三方功能。在用户系统中，为了开发便捷以及方便团队的使用，我们可以借助三方登录帮助获取团队和个人的信息。另外上述几个三方软件也提供了很多便捷的功能，例如机器人、消息通知、文档等。</p>\n<p>在 <a href=\"https://juejin.cn/book/6948353204648148995\" target=\"_blank\" title=\"https://juejin.cn/book/6948353204648148995\">DevOps 小册</a>中，使用钉钉作为三方拓展，为了带给大家不一样的学习体验，这次将使用飞书作为用例来完成我们用户、机器人等功能。</p>\n<h2 data-id=\"heading-1\">飞书应用对接</h2>\n<h3 data-id=\"heading-2\">创建应用</h3>\n<p>要利用飞书的功能的话，首先先要去<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fopen.feishu.cn%2Fapp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://open.feishu.cn/app\" ref=\"nofollow noopener noreferrer\">开放平台</a>创建一个飞书应用，如下图所示：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bfe6b0b9245341da933be8c9c2f86091~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>创建完毕之后，需要拿到飞书应用的 <strong>App ID</strong>（应用唯一的 ID 标识） 与 <strong>App Secret</strong>（应用的密钥） 才能调用飞书的 <strong>Open API</strong>。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/348117865caf41b09d9bdd7be54f82b3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h3 data-id=\"heading-3\">封装底层请求库</h3>\n<p>虽然 <code>NestJS</code> 内置了 <code>@nestjs/axios</code> 请求库，但是对于飞书的 <code>Open API</code> 封装，我们还是利用之前的模式，不将它与 <code>NestJS</code> 过度的耦合在一起。</p>\n<blockquote>\n<p>将飞书 <strong>Open Api</strong> 独立封装之后，可以抽成一个工具库，后期可以提供给其他的 <code>SDK</code> 使用，如果跟 <code>NestJS</code> 耦合过多，想提供给其他 <code>SDK</code> 使用的话，就只能提供 <code>Http</code> 请求调用的方式，使用起来不太方便。看个人习惯，我倾向使用独立封装的模式。</p>\n</blockquote>\n<ol>\n<li>添加应用配置，使用上一章节的环境配置功能，在 <code>yaml</code> 文件中添加飞书的配置项：</li>\n</ol>\n<pre><code class=\"hljs language-yaml\" lang=\"yaml\"><span class=\"hljs-attr\">FEISHU_CONFIG:</span>\n  <span class=\"hljs-attr\">FEISHU_URL:</span> <span class=\"hljs-string\">https://open.feishu.cn/open-apis</span>\n  <span class=\"hljs-attr\">FEISHU_API_HOST:</span> <span class=\"hljs-string\">https://open.feishu.cn</span>\n  <span class=\"hljs-attr\">FEISHU_APP_ID:</span> <span class=\"hljs-string\">balabalabala</span>\n  <span class=\"hljs-attr\">FEISHU_APP_SECRET:</span> <span class=\"hljs-string\">balabalabala</span>\n</code></pre>\n<blockquote>\n<p><strong>ID</strong> 与 <strong>Secret</strong> 的信息记得妥善保管，如果你创建的应用权限过高的话，意外泄密可能会导致不可预期的损失，<strong>切记</strong>！</p>\n</blockquote>\n<ol start=\"2\">\n<li>新建 <code>utils/request.ts</code> 文件：</li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> axios, { <span class=\"hljs-title class_\">Method</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>;\n<span class=\"hljs-keyword\">import</span> { getConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/utils'</span>;\n\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-attr\">FEISHU_CONFIG</span>: { <span class=\"hljs-variable constant_\">FEISHU_URL</span> } } = <span class=\"hljs-title function_\">getConfig</span>()\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@description</span>: 任意请求\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">request</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">{ url, option = {} }</span>) =&gt; {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">return</span> axios.<span class=\"hljs-title function_\">request</span>({\n      url,\n      ...option,\n    });\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-keyword\">throw</span> error;\n  }\n};\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IMethodV</span> {\n  <span class=\"hljs-attr\">url</span>: <span class=\"hljs-built_in\">string</span>;\n  method?: <span class=\"hljs-title class_\">Method</span>;\n  headers?: { [<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-built_in\">string</span> };\n  params?: <span class=\"hljs-title class_\">Record</span>&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">unknown</span>&gt;;\n  query?: <span class=\"hljs-title class_\">Record</span>&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">unknown</span>&gt;;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IRequest</span> {\n  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>;\n  <span class=\"hljs-attr\">code</span>: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@description</span>: 带 version 的通用 api 请求\n */</span>\n<span class=\"hljs-keyword\">const</span> methodV = <span class=\"hljs-keyword\">async</span> ({\n  url,\n  method,\n  headers,\n  params = {},\n  query = {},\n}: <span class=\"hljs-title class_\">IMethodV</span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">IRequest</span>&gt; =&gt; {\n  <span class=\"hljs-keyword\">let</span> sendUrl = <span class=\"hljs-string\">''</span>;\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-regexp\">/^(http:\\/\\/|https:\\/\\/)/</span>.<span class=\"hljs-title function_\">test</span>(url)) {\n    sendUrl = url;\n  } <span class=\"hljs-keyword\">else</span> {\n    sendUrl = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${FEISHU_URL}</span><span class=\"hljs-subst\">${url}</span>`</span>;\n  }\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n      <span class=\"hljs-title function_\">axios</span>({\n        <span class=\"hljs-attr\">headers</span>: {\n          <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>,\n          ...headers,\n        },\n        <span class=\"hljs-attr\">url</span>: sendUrl,\n        method,\n        <span class=\"hljs-attr\">params</span>: query,\n        <span class=\"hljs-attr\">data</span>: {\n          ...params,\n        },\n      })\n        .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ data, status }</span>) =&gt;</span> {\n          <span class=\"hljs-title function_\">resolve</span>({ data, <span class=\"hljs-attr\">code</span>: status });\n        })\n        .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> {\n          <span class=\"hljs-title function_\">reject</span>(error);\n        });\n    });\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-keyword\">throw</span> error;\n  }\n};\n\n<span class=\"hljs-keyword\">export</span> { request, methodV };\n</code></pre>\n<blockquote>\n<p>这里跟之前一样，封装了两种请求方法，一种是植入飞书请求的版本，另一种是自由请求，这个习惯也看个人，如果自己的项目不需要自由请求或者直接使用 <code>@nestjs/axios</code> 的请求模块的话，可以把 <code>request</code> 方法删除。</p>\n</blockquote>\n<p>此外上述引用中，使用了 <code>alias @</code>，正常情况也是不会被 <code>TS</code> 项目识别，需要在 tsconfig.json 配置文件中添加 <code>path</code> 参数：</p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\">{\n  \"compilerOptions\": {\n<span class=\"hljs-addition\">+    \"paths\": {</span>\n<span class=\"hljs-addition\">+      \"@/*\": [</span>\n<span class=\"hljs-addition\">+        \"src/*\"</span>\n<span class=\"hljs-addition\">+      ],</span>\n<span class=\"hljs-addition\">+    },</span>\n    \"module\": \"commonjs\",\n    \"declaration\": true,\n    \"removeComments\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"target\": \"es2017\",\n    \"sourceMap\": true,\n    \"outDir\": \"./dist\",\n    \"baseUrl\": \"./\",\n    \"incremental\": true,\n    \"skipLibCheck\": true,\n    \"strictNullChecks\": false,\n    \"noImplicitAny\": false,\n    \"strictBindCallApply\": false,\n    \"forceConsistentCasingInFileNames\": false,\n    \"noFallthroughCasesInSwitch\": false,\n    \"resolveJsonModule\": true\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>创建飞书请求基础层，如下图所示：</li>\n</ol>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5940e9416a8d4b4aa34c7fb4e0c8edf7~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>上图中封装的模块比较少，只有权限、用户等模块，实际开发中需要按照业务需求选择性封装对应的模块，比如群组、消息、通讯录等等。下面以获取 <code>Token</code> 的方法做一个简单的示例：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">APP_ID</span>, <span class=\"hljs-variable constant_\">APP_SECRET</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./const'</span>;\n<span class=\"hljs-keyword\">import</span> { methodV } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'src/utils/request'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">GetAppTokenRes</span> = {\n  <span class=\"hljs-attr\">code</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">app_access_token</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">expire</span>: <span class=\"hljs-built_in\">number</span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getAppToken</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> { data } = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">methodV</span>({\n    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">`/auth/v3/app_access_token/internal`</span>,\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,\n    <span class=\"hljs-attr\">params</span>: {\n      <span class=\"hljs-attr\">app_id</span>: <span class=\"hljs-variable constant_\">APP_ID</span>,\n      <span class=\"hljs-attr\">app_secret</span>: <span class=\"hljs-variable constant_\">APP_SECRET</span>,\n    },\n  });\n  <span class=\"hljs-keyword\">return</span> data <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">GetAppTokenRes</span>;\n};\n</code></pre>\n<p>以上就已经完成了一个独立的飞书应用底层请求层的封装，接下来看如何在业务中使用。</p>\n<h2 data-id=\"heading-4\">调用飞书 API</h2>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ff30c28ef3a46a789afab078648819d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>飞书的调用文档还是非常详细的，正确的按照上图所示的流程操作，一般出现异常的概率不大。</p>\n<p>第 <strong>1</strong>,<strong>2</strong> 步骤，我们已经完成了（应用申请与权限授予），按照步骤 <strong>3</strong> 需要封装 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fopen.feishu.cn%2Fdocument%2FukTMukTMukTM%2FuMTNz4yM1MjLzUzM\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://open.feishu.cn/document/ukTMukTMukTM/uMTNz4yM1MjLzUzM\" ref=\"nofollow noopener noreferrer\">API 访问凭证</a> 方便后续的调用。</p>\n<h4 data-id=\"heading-5\">封装 API 访问凭证</h4>\n<p>根据文档描述，飞书提供了下述 <strong>3</strong> 种访问凭证，分别有不同的用途：</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>访问凭证类型</th><th>是否需要用户授权</th><th>是否需要租户管理员授权</th><th>适用的应用场景</th></tr></thead><tbody><tr><td>app_access_token</td><td>不需要</td><td>不需要</td><td>纯后台服务等</td></tr><tr><td>tenant_access_token</td><td>不需要</td><td>需要</td><td>网页应用、机器人、纯后台服务等</td></tr><tr><td>user_access_token</td><td>需要</td><td>不需要</td><td>小程序、网页应用等</td></tr></tbody></table>\n<p>凭证的有效期是 <strong>2</strong> 小时，只有在小于 <strong>30</strong> 分钟的时候调用才会返回新的凭证，否则返回的还是原凭证，所以频繁调用返回的价值不大。</p>\n<p>调用三方接口获取凭证后，再使用凭证调用 <strong>API</strong> 的链路过程比较长，同时也可能收网络波动、请求频率的限制，需要将凭证缓存在本地，等有效期小于 <strong>30</strong> 分钟时再去换取新的凭证，减少调用链接、降低请求频率。</p>\n<p><code>NestJS</code> 提供了<strong>高速缓存</strong>的插件 <code>cache-manager</code>，为对各种缓存存储提供程序提供了统一的&nbsp;<code>API</code>，内置的是内存中的数据存储。</p>\n<ol>\n<li>安装对应的依赖与 <code>@types</code></li>\n</ol>\n<pre><code class=\"hljs language-shell\" lang=\"shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">yarn add cache-manager</span> \n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">yarn add -D @types/cache-manager</span>\n</code></pre>\n<ol start=\"2\">\n<li>再在使用的 <code>Module</code> 中注册 <code>CacheModule</code>，新建 <code>src/user/user.module.ts</code></li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">CacheModule</span>, forwardRef, <span class=\"hljs-title class_\">Module</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FeishuService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./feishu/feishu.service'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FeishuController</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./feishu/feishu.controller'</span>;\n\n<span class=\"hljs-meta\">@Module</span>({\n  <span class=\"hljs-attr\">imports</span>: [\n    <span class=\"hljs-title class_\">CacheModule</span>.<span class=\"hljs-title function_\">register</span>(),\n  ],\n  <span class=\"hljs-attr\">controllers</span>: [\n    <span class=\"hljs-title class_\">FeishuController</span>\n  ],\n  <span class=\"hljs-attr\">providers</span>: [<span class=\"hljs-title class_\">FeishuService</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserModule</span> { }\n</code></pre>\n<p>如果需要在其他地方也使用缓存，但又不想每次都引入 <code>CacheModule</code>，也可以在 <code>app.module.ts</code> 中引入，跟 <code>ConfigModule</code> 开启全局配置即可：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">CacheModule</span>, <span class=\"hljs-title class_\">Module</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppController</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.controller'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.service'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./user/user.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ConfigModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/config'</span>;\n<span class=\"hljs-keyword\">import</span> { getConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./utils'</span>;\n\n<span class=\"hljs-meta\">@Module</span>({\n  <span class=\"hljs-attr\">imports</span>: [\n    <span class=\"hljs-title class_\">CacheModule</span>.<span class=\"hljs-title function_\">register</span>({\n      <span class=\"hljs-attr\">isGlobal</span>: <span class=\"hljs-literal\">true</span>,\n    }),\n    <span class=\"hljs-title class_\">ConfigModule</span>.<span class=\"hljs-title function_\">forRoot</span>({\n      <span class=\"hljs-attr\">ignoreEnvFile</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">isGlobal</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">load</span>: [getConfig]\n    }), <span class=\"hljs-title class_\">UserModule</span>],\n  <span class=\"hljs-attr\">controllers</span>: [<span class=\"hljs-title class_\">AppController</span>],\n  <span class=\"hljs-attr\">providers</span>: [<span class=\"hljs-title class_\">AppService</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> { }\n</code></pre>\n<blockquote>\n<p>为了项目开发方便，我们的项目默认开启全局缓存配置，所以不需要在 <code>user.module.ts</code> 再次注册 <code>CacheModule</code></p>\n</blockquote>\n<p>在 <code>yaml</code> 配置文件中添加缓存 <code>key</code> =&gt; <code>APP_TOKEN_CACHE_KEY</code>，注意如果不添加缓存 <code>key</code> 的话，在高速缓存里面可以读取数据，但是在下一章替换 <code>Redis</code> 的时候，由于未配置 <code>key</code>，程序将使用 <code>undefined</code> 读取 <code>Redis</code>，导致 <code>Redis</code> 报错。</p>\n<pre><code class=\"hljs language-yaml\" lang=\"yaml\"><span class=\"hljs-attr\">APP_TOKEN_CACHE_KEY:</span> <span class=\"hljs-string\">APP_TOKEN_CACHE_KEY</span>\n</code></pre>\n<ol start=\"3\">\n<li>新建 <code>src/user/feishu/feishu.service.ts</code></li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">CACHE_MANAGER</span>, <span class=\"hljs-title class_\">Inject</span>, <span class=\"hljs-title class_\">Injectable</span>, <span class=\"hljs-title class_\">Logger</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> {\n  getAppToken,\n  getUserAccessToken,\n  getUserToken,\n  refreshUserToken,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'src/helper/feishu/auth'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Cache</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'cache-manager'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BusinessException</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/common/exceptions/business.exception'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ConfigService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/config'</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FeishuService</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable constant_\">APP_TOKEN_CACHE_KEY</span>\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-meta\">@Inject</span>(CACHE_MANAGER) <span class=\"hljs-keyword\">private</span> cacheManager: Cache,\n    <span class=\"hljs-keyword\">private</span> configService: ConfigService,\n  </span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">APP_TOKEN_CACHE_KEY</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">configService</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'APP_TOKEN_CACHE_KEY'</span>)\n  }\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getAppToken</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">appToken</span>: <span class=\"hljs-built_in\">string</span>;\n    appToken = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cacheManager</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">APP_TOKEN_CACHE_KEY</span>);\n    <span class=\"hljs-keyword\">if</span> (!appToken) {\n      <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getAppToken</span>();\n      <span class=\"hljs-keyword\">if</span> (response.<span class=\"hljs-property\">code</span> === <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-comment\">// token 有效期为 2 小时，在此期间调用该接口 token 不会改变。当 token 有效期小于 30 分的时候,再次请求获取 token 的时候，会生成一个新的 token，与此同时老的 token 依然有效。</span>\n        appToken = response.<span class=\"hljs-property\">app_access_token</span>;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cacheManager</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">APP_TOKEN_CACHE_KEY</span>, appToken, {\n          <span class=\"hljs-attr\">ttl</span>: response.<span class=\"hljs-property\">expire</span> - <span class=\"hljs-number\">60</span>,\n        });\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(<span class=\"hljs-string\">'飞书调用异常'</span>)\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> appToken;\n  }\n}\n</code></pre>\n<p>为了和缓存管理器实例进行交互，需要使用 <code>CACHE_MANAGER</code> 标记将其注入 <code>cacheManager</code> 实例。</p>\n<p><code>Cache</code> 的实例 <code>cacheManager</code>，拥有 <code>get</code>、<code>set</code>、<code>del</code> 等多个方法，使用起来非常方便，也提供存储缓存过期时间的配置项 <code>ttl</code>（位于 <code>key</code> 与 <code>value</code> 之后的第三个传入参数），可以根据需求自行配置，上述代码就是配置了缓存时间的示例，在换取不到凭证或者本地缓存超时之后才会请求飞书的接口换取新的凭证。</p>\n<h4 data-id=\"heading-6\">飞书机器人</h4>\n<p>封装完应用凭证之后就可以使用凭证调用飞书的 Open API，这里我们使用飞书机器人推送消息作为例子给大家演示一下。</p>\n<ol>\n<li>\n<p>首先需要开启机器人的能力。\n<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b07f7db3b604a5db992049e0e3447ef~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n</li>\n<li>\n<p>发布应用并选择应用使用范围，如果不在应用可用范围的用户，机器人是没办法推送消息的。\n<img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7a9bee8fb874984850c08acf70cfb22~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n</li>\n<li>\n<p>封装机器人发送消息对应的 API。</p>\n</li>\n</ol>\n<p>发送消息的接口为 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fopen.feishu.cn%2Fopen-apis%2Fim%2Fv1%2Fmessages%3Freceive_id_type%3D%255B%255D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://open.feishu.cn/open-apis/im/v1/messages?receive_id_type=%5B%5D\" ref=\"nofollow noopener noreferrer\">open.feishu.cn/open-apis/i…</a> ，可用根据以下几种类型发送消息给指定的用户或群组：</p>\n<p><code>Query 参数 receive_id_type</code> <strong>可选值</strong>：</p>\n<ul>\n<li><code>open_id</code>：以 open_id 来识别用户(<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fopen.feishu.cn%2Fdocument%2Fhome%2Fuser-identity-introduction%2Fopen-id\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://open.feishu.cn/document/home/user-identity-introduction/open-id\" ref=\"nofollow noopener noreferrer\">什么是 Open ID</a>) 。</li>\n<li><code>user_id</code>：以 user_id 来识别用户，需要有获取用户 userID 的权限 (<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fopen.feishu.cn%2Fdocument%2Fhome%2Fuser-identity-introduction%2Fuser-id\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://open.feishu.cn/document/home/user-identity-introduction/user-id\" ref=\"nofollow noopener noreferrer\">什么是 User ID</a>)。</li>\n<li><code>union_id</code>：以 union_id 来识别用户(<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fopen.feishu.cn%2Fdocument%2Fhome%2Fuser-identity-introduction%2Funion-id\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://open.feishu.cn/document/home/user-identity-introduction/union-id\" ref=\"nofollow noopener noreferrer\">什么是 Union ID</a>)。</li>\n<li><code>email</code>：以 email 来识别用户，是用户的真实邮箱。</li>\n<li><code>chat_id</code>：以 chat_id 来识别群聊，群 ID 说明请参考：<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fopen.feishu.cn%2Fdocument%2FuAjLw4CM%2FukTMukTMukTM%2Freference%2Fim-v1%2Fchat-id-description\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description\" ref=\"nofollow noopener noreferrer\">群ID 说明</a> 。</li>\n</ul>\n<p>根据发送用户与信息的类型有如下几种参数。</p>\n<p><code>Body</code> <strong>参数</strong>：</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>名称</th><th>类型</th><th>必填</th><th>描述</th></tr></thead><tbody><tr><td>receive_id</td><td>string</td><td>是</td><td>依据 receive_id_type 的值，填写对应的消息接收者 id<strong>示例值</strong>：\"ou_7d8a6e6df7621556ce0d21922b676706ccs\"</td></tr><tr><td>content</td><td>string</td><td>是</td><td>消息内容，json 结构序列化后的字符串。不同msg_type对应不同内容。消息类型 包括：text、post、image、file、audio、media、sticker、interactive、share_chat、share_user等，具体格式说明参考：<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fopen.feishu.cn%2Fdocument%2FuAjLw4CM%2FukTMukTMukTM%2Fim-v1%2Fmessage%2Fcreate_json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json\" ref=\"nofollow noopener noreferrer\">发送消息content说明</a></td></tr><tr><td>msg_type</td><td>string</td><td>是</td><td>消息类型 包括：text、post、image、file、audio、media、sticker、interactive、share_chat、share_user等，类型定义请参考<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fopen.feishu.cn%2Fdocument%2FuAjLw4CM%2FukTMukTMukTM%2Fim-v1%2Fmessage%2Fcreate_json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json\" ref=\"nofollow noopener noreferrer\">发送消息content说明</a></td></tr></tbody></table>\n<p>根据上述的接口描述，可用封装如下的函数：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { methodV } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'src/utils/request'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-variable constant_\">RECEIVE_TYPE</span> { <span class=\"hljs-string\">'open_id'</span>, <span class=\"hljs-string\">'user_id'</span>, <span class=\"hljs-string\">'union_id'</span>, <span class=\"hljs-string\">'email'</span>, <span class=\"hljs-string\">'chat_id'</span> }\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-variable constant_\">MSG_TYPE</span> { text, post, image, file, audio, media, sticker, interactive, share_chat, share_user}\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-variable constant_\">MESSAGES_PARAMS</span> = {\n  <span class=\"hljs-attr\">receive_id</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">msg_type</span>: <span class=\"hljs-variable constant_\">MSG_TYPE</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">messages</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">receive_id_type: RECEIVE_TYPE, params: MESSAGES_PARAMS, app_token: <span class=\"hljs-built_in\">string</span></span>) =&gt; {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(receive_id_type, params, app_token)\n\n  <span class=\"hljs-keyword\">const</span> { data } = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">methodV</span>({\n    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">`/im/v1/messages`</span>,\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,\n    <span class=\"hljs-attr\">query</span>: { receive_id_type },\n    params,\n    <span class=\"hljs-attr\">headers</span>: {\n      <span class=\"hljs-title class_\">Authorization</span>: <span class=\"hljs-string\">`Bearer <span class=\"hljs-subst\">${app_token}</span>`</span>,\n    },\n  });\n  <span class=\"hljs-keyword\">return</span> data;\n};\n</code></pre>\n<ol start=\"4\">\n<li>开发对应的 <code>Service</code>。</li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\">  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">sendMessage</span>(<span class=\"hljs-params\">receive_id_type, params</span>) {\n    <span class=\"hljs-keyword\">const</span> app_token = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getAppToken</span>()\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">messages</span>(receive_id_type, params, app_token <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">string</span>)\n  }\n</code></pre>\n<p>注意：这里的 <code>app_token</code> 获取方式使用上述封装好的访问凭证方法，带有缓存的版本。</p>\n<ol start=\"5\">\n<li>新建对应的 <code>feishu.controller.ts</code>  以及 <code>feishu.dto.ts</code>：</li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Body</span>, <span class=\"hljs-title class_\">Controller</span>, <span class=\"hljs-title class_\">Post</span>, <span class=\"hljs-title class_\">Version</span>, <span class=\"hljs-variable constant_\">VERSION_NEUTRAL</span>, } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ApiOperation</span>, <span class=\"hljs-title class_\">ApiTags</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/swagger'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FeishuService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./feishu.service'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FeishuMessageDto</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./feishu.dto'</span>;\n\n<span class=\"hljs-meta\">@ApiTags</span>(<span class=\"hljs-string\">'飞书'</span>)\n<span class=\"hljs-meta\">@Controller</span>(<span class=\"hljs-string\">'feishu'</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FeishuController</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> feishuService: FeishuService</span>) { }\n\n  <span class=\"hljs-meta\">@ApiOperation</span>({\n    <span class=\"hljs-attr\">summary</span>: <span class=\"hljs-string\">'消息推送'</span>,\n  })\n  <span class=\"hljs-meta\">@Version</span>([<span class=\"hljs-variable constant_\">VERSION_NEUTRAL</span>])\n  <span class=\"hljs-meta\">@Post</span>(<span class=\"hljs-string\">'sendMessage'</span>)\n  <span class=\"hljs-title function_\">sendMessage</span>(<span class=\"hljs-params\"><span class=\"hljs-meta\">@Body</span>() params: FeishuMessageDto</span>) {\n    <span class=\"hljs-keyword\">const</span> { receive_id_type, ...rest } = params\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">feishuService</span>.<span class=\"hljs-title function_\">sendMessage</span>(receive_id_type, rest);\n  }\n}\n</code></pre>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">RECEIVE_TYPE</span>, <span class=\"hljs-variable constant_\">MSG_TYPE</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/helper/feishu/message'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ApiProperty</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/swagger'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FeishuMessageDto</span> {\n  <span class=\"hljs-meta\">@ApiProperty</span>({ <span class=\"hljs-attr\">example</span>: <span class=\"hljs-string\">'email'</span>})\n  <span class=\"hljs-attr\">receive_id_type</span>: <span class=\"hljs-variable constant_\">RECEIVE_TYPE</span>\n\n  <span class=\"hljs-meta\">@ApiProperty</span>({ <span class=\"hljs-attr\">example</span>: <span class=\"hljs-string\">'cookieboty@qq.com'</span> })\n  receive_id?: <span class=\"hljs-built_in\">string</span>\n\n  <span class=\"hljs-meta\">@ApiProperty</span>({ <span class=\"hljs-attr\">example</span>: <span class=\"hljs-string\">'{\\\"text\\\":\\\" test content\\\"}'</span> })\n  content?: <span class=\"hljs-built_in\">string</span>\n\n  <span class=\"hljs-meta\">@ApiProperty</span>({ <span class=\"hljs-attr\">example</span>: <span class=\"hljs-string\">'text'</span>, <span class=\"hljs-attr\">enum</span>: <span class=\"hljs-variable constant_\">MSG_TYPE</span> })\n  msg_type?: keyof <span class=\"hljs-variable constant_\">MSG_TYPE</span>\n}\n</code></pre>\n<ol start=\"6\">\n<li>正常导入 <code>Module</code> 之后，打开 <code>swagger</code> 可以看到对应的接口信息。</li>\n</ol>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8dd231ebdd648129c393dd01fc3c1e2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<ol start=\"7\">\n<li>点击 <strong>Try it out</strong> 发送测试信息，如果按照步骤一路下来的话，应该能正常收到飞书机器人推送的消息了。</li>\n</ol>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eca80f9932d048e9b049c41d8515e29b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>以上就完成了飞书机器人推送消息的开发，大家可以发挥自己的想象，看在什么场景需要推送消息，例如：<code>CICD</code>、安全预警、流程流转、<code>Bug</code> 通知等等各种场景推送。</p>\n<p>同时，飞书机器的消息有很多个性化的设计，例如卡片消息、富文本、语音等等，卡片消息飞书也提供了<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fopen.feishu.cn%2Ftool%2Fcardbuilder\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://open.feishu.cn/tool/cardbuilder\" ref=\"nofollow noopener noreferrer\">可视化搭建的工具</a>，非常方便定制化一套漂亮的卡片消息：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6608a7fe10e446449f548bdb2056c80f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<blockquote>\n<p><strong>飞书发送消息使用的邮箱与你登录注册邮箱并不相同</strong>，有不少同学会卡在这一步，如果需要使用邮箱发送的同学需要在管理员后台配置该用户的邮箱才能正常发送信息，或者可以使用手机号、用户 id 来发送消息。<strong>同时要注意发送消息的机器人要具备推送消息的权限</strong>。</p>\n</blockquote>\n<h4 data-id=\"heading-7\">完善体验</h4>\n<p>前面的流程都是正常请求，接下来我们看下非正常请求。首先，将 <code>receive_id_type</code> 的类型改成 <code>email2</code>，这个参数没有存在于飞书文档中提供的参数类型中，然后请求接口：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/825fe40a83e746b79e9256a51d5e70a9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>可以看到，返回的接口是业务性质的通用报错 503，但我们已经预先知道了请求参数类型有几种，这种错误可以在请求飞书之后就预先校验出来，减少请求次数同时给予用户正确的反馈，我们可以借助 <code>class-validator</code> 来做入参校验：</p>\n<ol>\n<li>安装 <code>class-validator</code> 相关的依赖。</li>\n</ol>\n<pre><code class=\"hljs language-shell\" lang=\"shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">yarn add class-validator class-transformer</span>\n</code></pre>\n<ol start=\"2\">\n<li><code>main.ts</code> 添加 <code>ValidationPipe</code> 验证管道，从 <code>@nestjs/common</code> 导出。</li>\n</ol>\n<pre><code class=\"hljs language-diff\" lang=\"diff\"><span class=\"hljs-addition\">+import { ValidationPipe, VersioningType, VERSION_NEUTRAL } from '@nestjs/common';</span>\nimport { NestFactory } from '@nestjs/core';\nimport {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from '@nestjs/platform-fastify';\nimport { AppModule } from './app.module';\nimport { AllExceptionsFilter } from './common/exceptions/base.exception.filter';\nimport { HttpExceptionFilter } from './common/exceptions/http.exception.filter';\nimport { TransformInterceptor } from './common/interceptors/transform.interceptor';\nimport { generateDocument } from './doc';\n\ndeclare const module: any;\n\nasync function bootstrap() {\n  const app = await NestFactory.create&lt;NestFastifyApplication&gt;(\n    AppModule,\n    new FastifyAdapter(),\n  );\n\n  // 统一响应体格式\n  app.useGlobalInterceptors(new TransformInterceptor());\n\n  // 异常过滤器\n  app.useGlobalFilters(new AllExceptionsFilter(), new HttpExceptionFilter());\n\n  // 接口版本化管理\n  app.enableVersioning({\n    defaultVersion: [VERSION_NEUTRAL, '1', '2'],\n    type: VersioningType.URI,\n  });\n\n<span class=\"hljs-addition\">+  // 启动全局字段校验，保证请求接口字段校验正确。</span>\n<span class=\"hljs-addition\">+  app.useGlobalPipes(new ValidationPipe());</span>\n\n  // 创建文档\n  generateDocument(app)\n\n  // 添加热更新\n  if (module.hot) {\n    module.hot.accept();\n    module.hot.dispose(() =&gt; app.close());\n  }\n\n  await app.listen(3000);\n}\nbootstrap();\n\n</code></pre>\n<ol start=\"3\">\n<li>使用 <code>class-validator</code> 内置的验证装饰器对需要验证的 Dto 参数添加校验。</li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">RECEIVE_TYPE</span>, <span class=\"hljs-variable constant_\">MSG_TYPE</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/helper/feishu/message'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ApiProperty</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/swagger'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">IsNotEmpty</span>, <span class=\"hljs-title class_\">IsEnum</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'class-validator'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FeishuMessageDto</span> {\n  <span class=\"hljs-meta\">@IsNotEmpty</span>()\n  <span class=\"hljs-meta\">@IsEnum</span>(<span class=\"hljs-variable constant_\">RECEIVE_TYPE</span>)\n  <span class=\"hljs-meta\">@ApiProperty</span>({ <span class=\"hljs-attr\">example</span>: <span class=\"hljs-string\">'email'</span> })\n  <span class=\"hljs-attr\">receive_id_type</span>: <span class=\"hljs-variable constant_\">RECEIVE_TYPE</span>\n\n  <span class=\"hljs-meta\">@IsNotEmpty</span>()\n  <span class=\"hljs-meta\">@ApiProperty</span>({ <span class=\"hljs-attr\">example</span>: <span class=\"hljs-string\">'cookieboty@qq.com'</span> })\n  receive_id?: <span class=\"hljs-built_in\">string</span>\n\n  <span class=\"hljs-meta\">@IsNotEmpty</span>()\n  <span class=\"hljs-meta\">@ApiProperty</span>({ <span class=\"hljs-attr\">example</span>: <span class=\"hljs-string\">'{\\\"text\\\":\\\" test content\\\"}'</span> })\n  content?: <span class=\"hljs-built_in\">string</span>\n\n  <span class=\"hljs-meta\">@IsNotEmpty</span>()\n  <span class=\"hljs-meta\">@IsEnum</span>(<span class=\"hljs-variable constant_\">MSG_TYPE</span>)\n  <span class=\"hljs-meta\">@ApiProperty</span>({ <span class=\"hljs-attr\">example</span>: <span class=\"hljs-string\">'text'</span> })\n  msg_type?: <span class=\"hljs-variable constant_\">MSG_TYPE</span>\n}\n</code></pre>\n<p>我们使用了 <code>IsNotEmpty</code>（禁止传空）以及 <code>IsEnum</code>(参数必须是有效的枚举）来约束前端传参数，然后一起来看看效果：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfcfaad80df64c5880949e773fe0f2bd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>如上图所示，由于 <code>email2</code> 并不存在于之前定义好的枚举 <code>RECEIVE_TYPE</code> 里面，所以在参数校验的时候就被拦截并且返回了具体的错误信息 <code>receive_id_type must be a valid enum value</code>，对于前端传参数与错误提示比较友好。</p>\n<p>内置的验证装饰器非常多，下面只是简单的一些例子，更多的装饰器可以<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Ftypestack%2Fclass-validator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/typestack/class-validator\" ref=\"nofollow noopener noreferrer\">翻阅文档</a></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>装饰器</th><th>描述</th></tr></thead><tbody><tr><td><strong>常见的验证装饰器</strong></td><td></td></tr><tr><td><code>@IsDefined(value: any)</code></td><td>检查值是否已定义（!== undefined, !== null）。这是唯一忽略 skipMissingProperties 选项的装饰器。</td></tr><tr><td><code>@IsOptional()</code></td><td>检查给定值是否为空（=== null，=== undefined），如果是，则忽略该属性上的所有验证器。</td></tr><tr><td><code>@Equals(comparison: any)</code></td><td>检查值是否等于 (\"===\") 比较。</td></tr><tr><td><code>@NotEquals(comparison: any)</code></td><td>检查值是否不等于 (\"!==\") 比较。</td></tr><tr><td><code>@IsEmpty()</code></td><td>检查给定值是否为空（=== ''、=== null、=== 未定义）。</td></tr><tr><td><code>@IsNotEmpty()</code></td><td>检查给定值是否不为空（！== ''，！== null，！== undefined）。</td></tr><tr><td><code>@IsIn(values: any[])</code></td><td>检查值是否在允许值的数组中。</td></tr><tr><td><code>@IsNotIn(values: any[])</code></td><td>检查 value 是否不在不允许的值数组中。</td></tr><tr><td><strong>类型验证装饰器</strong></td><td></td></tr><tr><td><code>@IsBoolean()</code></td><td>检查值是否为布尔值。</td></tr><tr><td><code>@IsDate()</code></td><td>检查值是否为日期。</td></tr><tr><td><code>@IsString()</code></td><td>检查字符串是否为字符串。</td></tr><tr><td><code>@IsNumber(options: IsNumberOptions)</code></td><td>检查值是否为数字。</td></tr><tr><td><code>@IsInt()</code></td><td>检查值是否为整数。</td></tr><tr><td><code>@IsArray()</code></td><td>检查值是否为数组</td></tr><tr><td><code>@IsEnum(entity: object)</code></td><td>检查值是否是有效的枚举</td></tr></tbody></table>\n<ol start=\"4\">\n<li>完成了参数校验后，还剩下最后一步，先看下现在的文档描述。</li>\n</ol>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db00ae1e05024339b3a14e9fe61609e2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>从上述页面中可以看出，接口字段描述使用 <code>enum</code> 类型在展示上并不直观，对接的前端同学无法感知到底用了什么、需要传什么值才能符合要求，这个可以使用 <code>Swagger</code> 中 <code>ApiProperty</code> 的 <code>enum</code> 参数，来让文档识别出对应的枚举参数：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\">  <span class=\"hljs-meta\">@IsNotEmpty</span>()\n  <span class=\"hljs-meta\">@IsEnum</span>(<span class=\"hljs-variable constant_\">RECEIVE_TYPE</span>)\n  <span class=\"hljs-meta\">@ApiProperty</span>({ <span class=\"hljs-attr\">example</span>: <span class=\"hljs-string\">'email'</span>, <span class=\"hljs-attr\">enum</span>: <span class=\"hljs-variable constant_\">RECEIVE_TYPE</span> })\n  <span class=\"hljs-attr\">receive_id_type</span>: <span class=\"hljs-variable constant_\">RECEIVE_TYPE</span>\n</code></pre>\n<p>配置完毕之后可以看到 <code>Swagger</code> 的字段描述也能将对应的枚举正确显示了</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7fa969b31964fa3b43b1bcc264dc4b9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h2 data-id=\"heading-8\">写在最后</h2>\n<p>本章的示例代码以上传 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway%2Ftree%2Fdemo%2Fv5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway/tree/demo/v5\" ref=\"nofollow noopener noreferrer\">demo/v5</a>，需要的同学自取。</p>\n<p>本章以<strong>对接飞书应用</strong>完成了一个简单的业务后端需求开发，包括飞书 <strong>Open Api</strong> 的对接以及<strong>NestJs</strong> 的缓存、<code>Controller</code>、<code>Service</code> 等模块的开发，从小的需求逐步熟悉 <code>NestJs</code> 框架的开发模式与后端业务开发逻辑。</p>\n<p>飞书的三方应用还提供了很多额外的外部接口，例如飞书文档、组织架构（人员信息管理）、审批等等都是非常有用处的功能，在接下去的用户系统中我们就会使用组织架构中的接口作为自建用户系统的底层数据与三方登录。</p>\n<p>大家可以根据自己团队的需求选择对应的模块来减少开发工作量，比如审批的任务流开发就非常麻烦，就算有开源的插件集成，还是需要额外对接消息通知。而直接利用飞书提供的审批接口不仅能减少代码量、提高开发效率同时也打通飞书的交互，给用户最小的心智学习成本。</p>\n<p>如果你有什么疑问，欢迎在评论区提出或者加群沟通。 👏</p></div>"
    },
    {
        "name": "6\n工具篇：数据库\n学习时长: 38分6秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>在上一章中，我们通过接入飞书应用以及机器人消息推送，对使用 <code>NestJS</code> 框架以及后端业务开发有了一定的经验，也开启了正式开发的第一步。</p>\n<p>在一个普通的后端业务开发中基本上逃离不了 <strong>CURD</strong>，也就是对数据的常规操作。在技术选型中提到，网关系统中将同时使用 <strong>2</strong> 种数据库 <code>MySQL</code> 与 <code>MongoDB</code>（分别是关系型数据库与非关系数据库的代表）分别进行用户与物料服务的数据存储。</p>\n<p>作为基础脚手架的搭建，为了便于业务开发同学的使用与开发体验，比较好的方式是使用配置模式提供统一的 <strong>API</strong> 调用减少开发的理解与接入成本。</p>\n<p>本章我们将学习对数据库的封装以及常规的数据库操作。</p>\n<h2 data-id=\"heading-1\">TypeORM</h2>\n<p>日常对数据库的操作需要借助于 <code>SQL</code>，至少需要掌握基础的 <code>SQL</code> 语法就有建表、增删改查等。但如果想要在代码中直接实现对数据库的操作，就需要去写大量 <code>SQL</code> ，这在<strong>可读性、维护性、开发体验以及维护上都是非常糟糕的</strong>。</p>\n<p>所以 <strong>ORM</strong> 框架也就应运而生，这一类的框架是为了解决面型对象与关系数据库存在的互不匹配的现象，把面向 <code>SQL</code> 开发转变为面向对象开发，开发不需要关注底层实现细节，可以以操作对象的模式使用数据库。</p>\n<blockquote>\n<p>对象关系映射（Object Relational Mapping，简称 ORM）模式是一种为了解决面向对象与关系数据库存在的互不匹配现象的技术。</p>\n</blockquote>\n<p><a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Ftypeorm%2Ftypeorm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/typeorm/typeorm\" ref=\"nofollow noopener noreferrer\">TypeORM</a>&nbsp;作为 <code>Node.js</code> 中老牌的 <code>ORM</code> 框架，无论是接口定义，还是代码实现方面都简单易懂、可读性高，也很容易对接多种数据源。</p>\n<p>虽然市面上也有其他不错的 <code>ORM</code> 框架，比如 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fsequelize.org%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://sequelize.org/\" ref=\"nofollow noopener noreferrer\">Sequelize</a>、<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fwww.prisma.io%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://www.prisma.io/\" ref=\"nofollow noopener noreferrer\">Prisma</a> 等，但 <code>TypeORM</code> 使用&nbsp;<code>TypeScript</code>&nbsp;编写，在&nbsp;<code>NestJS</code>&nbsp;框架下运行得非常好，也是 <code>NestJS</code> 首推的 <code>ORM</code> 框架，有开箱即用的&nbsp;<code>@nestjs/typeorm</code>&nbsp;软件包支持。</p>\n<p>综上所述，我们的 <code>ORM</code> 框架也将选用 <code>TypeORM</code> 来开发（看个人喜好与需求，如果喜欢 <strong>GraphQL</strong> 的，使用 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fwww.prisma.io%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://www.prisma.io/\" ref=\"nofollow noopener noreferrer\">Prisma</a> 更好）。</p>\n<h4 data-id=\"heading-2\">封装</h4>\n<p><code>NestJS</code> 使用 <code>TypeORM</code> 的方式有两种。一种是 <code>NestJS</code> 提供的 <code>@nestjs/typeorm</code> 集成包，可以导出 <code>TypeOrmModule.forRoot</code> 方法来连接数据库，同时可以使用 <code>ormconfig.json</code> 将数据库链接配置项剥离。另外一种是直接使用 <code>typeorm</code>，自由封装 <code>Providers</code> 导入使用。</p>\n<p>两种方案各有优缺点，使用 <code>@nestjs/typeorm</code> 集成的方案较为简便，但自建的业务脚手架需要两种数据库保证在开发中体验一致性，此外之前已经自定义了全局环境变量的配置，没有必要再多一个 <code>ormconfig.json</code> 的配置来增加额外理解成本，所以接下来我们将使用第二种方案来连接数据库。</p>\n<p><strong>第一步</strong>：跟之前一样，为了使用 <code>TypeORM</code>，先安装以下依赖。</p>\n<pre><code class=\"hljs language-shell\" lang=\"shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">yarn add typeorm mysql2 mongoose</span>\n</code></pre>\n<p><strong>第二步</strong>：在 <code>dev.yaml</code> 中添加数据库配置参数。</p>\n<pre><code class=\"hljs language-yaml\" lang=\"yaml\"><span class=\"hljs-attr\">MONGODB_CONFIG:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"fast_gateway_test\"</span>          <span class=\"hljs-comment\"># 自定义次数据库链接名称</span>\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">mongodb</span>                      <span class=\"hljs-comment\"># 数据库链接类型</span>\n  <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">\"mongodb://localhost:27017\"</span>   <span class=\"hljs-comment\"># 数据库链接地址</span>\n  <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">\"xxxx\"</span>                   <span class=\"hljs-comment\"># 数据库链接用户名</span>\n  <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">\"123456\"</span>                 <span class=\"hljs-comment\"># 数据库链接密码</span>\n  <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">\"fast_gateway_test\"</span>      <span class=\"hljs-comment\"># 数据库名</span>\n  <span class=\"hljs-attr\">entities:</span> <span class=\"hljs-string\">\"mongo\"</span>                  <span class=\"hljs-comment\"># 自定义加载类型</span>\n  <span class=\"hljs-attr\">logging:</span> <span class=\"hljs-literal\">false</span>                     <span class=\"hljs-comment\"># 数据库打印日志</span>\n  <span class=\"hljs-attr\">synchronize:</span> <span class=\"hljs-literal\">true</span>                  <span class=\"hljs-comment\"># 是否开启同步数据表功能</span>\n</code></pre>\n<p>以上是数据库连接的必要参数，其他的参数可以<a href=\"https://link.juejin.cn?target=https%3A%2F%2Ftypeorm.io%2Fdata-source-options\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://typeorm.io/data-source-options\" ref=\"nofollow noopener noreferrer\">参考文档</a>根据需求添加，例如 <code>retryAttempts</code>（重试连接数据库的次数）、<code>keepConnectionAlive</code>（应用程序关闭后连接是否关闭） 等配置项。</p>\n<p><strong>第三步</strong>：新建 <code>src/common/database/database.providers.ts</code></p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">DataSource</span>, <span class=\"hljs-title class_\">DataSourceOptions</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'typeorm'</span>;\n<span class=\"hljs-keyword\">import</span> { getConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'src/utils/index'</span>\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n\n<span class=\"hljs-comment\">// 设置数据库类型</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">databaseType</span>: <span class=\"hljs-title class_\">DataSourceOptions</span>[<span class=\"hljs-string\">'type'</span>] = <span class=\"hljs-string\">'mongodb'</span>;\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-variable constant_\">MONGODB_CONFIG</span> } = <span class=\"hljs-title function_\">getConfig</span>()\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">MONGODB_DATABASE_CONFIG</span> = {\n  ...<span class=\"hljs-variable constant_\">MONGODB_CONFIG</span>,\n  <span class=\"hljs-attr\">type</span>: databaseType,\n  <span class=\"hljs-attr\">entities</span>: [path.<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">`../../**/*.<span class=\"hljs-subst\">${MONGODB_CONFIG.entities}</span>.entity{.ts,.js}`</span>)],\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">MONGODB_DATA_SOURCE</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DataSource</span>(<span class=\"hljs-variable constant_\">MONGODB_DATABASE_CONFIG</span>)\n\n<span class=\"hljs-comment\">// 数据库注入</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">DatabaseProviders</span> = [\n  {\n    <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-string\">'MONGODB_DATA_SOURCE'</span>,\n    <span class=\"hljs-attr\">useFactory</span>: <span class=\"hljs-keyword\">async</span> () =&gt; {\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable constant_\">MONGODB_DATA_SOURCE</span>.<span class=\"hljs-title function_\">initialize</span>()\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable constant_\">MONGODB_DATA_SOURCE</span>\n    }\n  }\n];\n</code></pre>\n<p><strong>第四步</strong>：新建 <code>database.module.ts</code></p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Module</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">DatabaseProviders</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./database.providers'</span>;\n\n<span class=\"hljs-meta\">@Module</span>({\n  <span class=\"hljs-attr\">providers</span>: [...<span class=\"hljs-title class_\">DatabaseProviders</span>],\n  <span class=\"hljs-attr\">exports</span>: [...<span class=\"hljs-title class_\">DatabaseProviders</span>],\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DatabaseModule</span> { }\n</code></pre>\n<p>至此我们已经封装了 <code>MongoDB</code> 的 <code>Provider</code>，如果需要引入 <code>Mysql</code> 或者其他类型数据库的话，只需要替换对应的配置参数，重复上述步骤即可。</p>\n<blockquote>\n<p>在我写这个小册的时候，用的 <code>TypeORM</code> 版本是 <code>0.3.5+，</code>而 <code>0.3.5+</code> 的中英文文档是不同步的，中文文档是 <code>0.2.37+</code> 的版本，如果你出现开发过程中发现一些兼容的问题，此时中文文档是对应不上的，需要查看<a href=\"https://link.juejin.cn?target=https%3A%2F%2Ftypeorm.io%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://typeorm.io/\" ref=\"nofollow noopener noreferrer\">英文文档</a>。</p>\n</blockquote>\n<h4 data-id=\"heading-3\">使用</h4>\n<p><strong>第一步</strong>：注册实体，创建 <code>src/user/user.mongo.entity.ts</code></p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Entity</span>, <span class=\"hljs-title class_\">Column</span>, <span class=\"hljs-title class_\">UpdateDateColumn</span>, <span class=\"hljs-title class_\">ObjectIdColumn</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'typeorm'</span>;\n\n<span class=\"hljs-meta\">@Entity</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> {\n  <span class=\"hljs-meta\">@ObjectIdColumn</span>()\n  id?: <span class=\"hljs-built_in\">number</span>;\n\n  <span class=\"hljs-meta\">@Column</span>({ <span class=\"hljs-attr\">default</span>: <span class=\"hljs-literal\">null</span> })\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n}\n</code></pre>\n<p>在 <code>MongoDB</code> 里面使用的是 <code>ObjectIdColumn</code> 作为类似 <code>Mysql</code> 的自增主键，来保证数据唯一性，只是类似，并不是跟普通自增主键一样会递增，把它看成 <code>uuid</code> 类似即可。</p>\n<p>此外应该注意我们创建的实体类文件命名后缀为 <code>entity.ts</code>，而在上文数据库连接的配置中有一个 <code>entities</code> 参数：</p>\n<pre><code class=\"hljs language-css\" lang=\"css\">entities:[path.<span class=\"hljs-built_in\">join</span>(__dirname, `../..<span class=\"hljs-comment\">/**/</span>*.${MONGODB_CONFIG<span class=\"hljs-selector-class\">.entities</span>}<span class=\"hljs-selector-class\">.entity</span>{<span class=\"hljs-selector-class\">.ts</span>,<span class=\"hljs-selector-class\">.js</span>}`)]\n</code></pre>\n<p>这个属性配置代表：只要是以 <code>entity.ts</code> 结尾的实例类，都会被自动扫描识别，并在数据库中生成对应的实体表。</p>\n<p>所以想使用 <code>Mysql</code> 又同时想使用自动注册这个功能的话，一定要区分后缀名，不然会出现混乱注册的情况，<code>mysql</code> 的配置例如下面所示：</p>\n<pre><code class=\"hljs language-yaml\" lang=\"yaml\"><span class=\"hljs-attr\">MYSQL_CONFIG:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"user-test\"</span>\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">\"mysql\"</span>\n  <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">\"localhost\"</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">3306</span>\n  <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">\"xxxx\"</span>\n  <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">\"123456\"</span>\n  <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">\"user-test\"</span>\n  <span class=\"hljs-attr\">entities:</span> <span class=\"hljs-string\">\"mysql\"</span> <span class=\"hljs-comment\"># 这里的命名一定要跟 MongoDB 里面的配置命名区分开</span>\n  <span class=\"hljs-attr\">synchronize:</span> <span class=\"hljs-literal\">true</span>\n</code></pre>\n<blockquote>\n<p>MongoDB 是无模式的，所以即使在配置参数开启了 <code>synchronize</code>，启动项目的时候也不会去数据库创建对应的表，所以不用奇怪，并没有出错，但 <code>Mysql</code> 在每次应用程序启动时自动同步表结构，容易造成数据丢失，生产环境记得关闭，以免造成无可预计的损失。</p>\n</blockquote>\n<p><strong>第二步</strong>：创建 <code>user.providers.ts</code>：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">User</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./user.mongo.entity'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">UserProviders</span> = [\n  {\n    <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-string\">'USER_REPOSITORY'</span>,\n    <span class=\"hljs-attr\">useFactory</span>: <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-title class_\">AppDataSource</span>) =&gt; <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">AppDataSource</span>.<span class=\"hljs-title function_\">getRepository</span>(<span class=\"hljs-title class_\">User</span>),\n    <span class=\"hljs-attr\">inject</span>: [<span class=\"hljs-string\">'MONGODB_DATA_SOURCE'</span>],\n  },\n];\n</code></pre>\n<p><strong>第三步</strong>：创建 <code>user.service.ts</code>，新增添加用户 <code>service</code>：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">In</span>, <span class=\"hljs-title class_\">Like</span>, <span class=\"hljs-title class_\">Raw</span>, <span class=\"hljs-title class_\">MongoRepository</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'typeorm'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span>, <span class=\"hljs-title class_\">Inject</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">User</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./user.mongo.entity'</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-meta\">@Inject</span>(<span class=\"hljs-string\">'USER_REPOSITORY'</span>)\n    <span class=\"hljs-keyword\">private</span> userRepository: MongoRepository&lt;User&gt;\n  </span>) { }\n\n  <span class=\"hljs-title function_\">createOrSave</span>(<span class=\"hljs-params\">user</span>) {\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">save</span>(user)\n  }\n}\n</code></pre>\n<p><strong>第四步</strong>：创建 <code>user.controller.ts</code>，添加新增用户的 <code>http</code> 请求方法:</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Controller</span>, <span class=\"hljs-title class_\">Post</span>, <span class=\"hljs-title class_\">Body</span>, <span class=\"hljs-title class_\">Query</span>, <span class=\"hljs-title class_\">Get</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./user.service'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AddUserDto</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./user.dto'</span>;\n\n<span class=\"hljs-meta\">@ApiTags</span>(<span class=\"hljs-string\">'用户'</span>)\n<span class=\"hljs-meta\">@Controller</span>(<span class=\"hljs-string\">'user'</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> userService: UserService,\n  </span>) { }\n\n  <span class=\"hljs-meta\">@ApiOperation</span>({\n    <span class=\"hljs-attr\">summary</span>: <span class=\"hljs-string\">'新增用户'</span>,\n  })\n  <span class=\"hljs-meta\">@Post</span>(<span class=\"hljs-string\">'/add'</span>)\n  <span class=\"hljs-title function_\">create</span>(<span class=\"hljs-params\"><span class=\"hljs-meta\">@Body</span>() user: AddUserDto</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userService</span>.<span class=\"hljs-title function_\">createOrSave</span>(user);\n  }\n}\n</code></pre>\n<p><code>user.dto.ts</code> 的内容如下：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ApiProperty</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/swagger'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">IsNotEmpty</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'class-validator'</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AddUserDto</span> {\n  <span class=\"hljs-meta\">@ApiProperty</span>({ <span class=\"hljs-attr\">example</span>: <span class=\"hljs-number\">123</span>, })\n  id?: <span class=\"hljs-built_in\">string</span>;\n\n  <span class=\"hljs-meta\">@ApiProperty</span>({ <span class=\"hljs-attr\">example</span>: <span class=\"hljs-string\">'cookie'</span> })\n  <span class=\"hljs-meta\">@IsNotEmpty</span>()\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n\n  <span class=\"hljs-meta\">@ApiProperty</span>({ <span class=\"hljs-attr\">example</span>: <span class=\"hljs-string\">'cookieboty@qq.com'</span> })\n  <span class=\"hljs-meta\">@IsNotEmpty</span>()\n  <span class=\"hljs-attr\">email</span>: <span class=\"hljs-built_in\">string</span>;\n\n  <span class=\"hljs-meta\">@ApiProperty</span>({ <span class=\"hljs-attr\">example</span>: <span class=\"hljs-string\">'cookieboty'</span> })\n  <span class=\"hljs-meta\">@IsNotEmpty</span>()\n  <span class=\"hljs-attr\">username</span>: <span class=\"hljs-built_in\">string</span>;\n}\n</code></pre>\n<p><strong>第五步</strong>：创建 <code>user.module.ts</code>，将 <code>controller</code>、<code>providers</code>、<code>service</code> 等都引入后，<strong>切记</strong>将 <code>user.module.ts</code> 导入 <code>app.module.ts</code> 后才会生效，这一步别忘记了 :</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Module</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">DatabaseModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/common/database/database.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserController</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./user.controller'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./user.service'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserProviders</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./user.providers'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FeishuController</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./feishu/feishu.controller'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FeishuService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./feishu/feishu.service'</span>;\n\n<span class=\"hljs-meta\">@Module</span>({\n  <span class=\"hljs-attr\">imports</span>: [\n    <span class=\"hljs-title class_\">DatabaseModule</span>\n  ],\n  <span class=\"hljs-attr\">controllers</span>: [\n    <span class=\"hljs-title class_\">FeishuController</span>,\n    <span class=\"hljs-title class_\">UserController</span>\n  ],\n  <span class=\"hljs-attr\">providers</span>: [...<span class=\"hljs-title class_\">UserProviders</span>, <span class=\"hljs-title class_\">UserService</span>, <span class=\"hljs-title class_\">FeishuService</span>],\n  <span class=\"hljs-attr\">exports</span>: [<span class=\"hljs-title class_\">UserService</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserModule</span> { }\n</code></pre>\n<p>完成上述所有步骤之后，此时打开 <code>Swagger</code> 文档可以看到，已经创建好了 <code>/api/user/add</code> 新增用户的 <code>http</code> 接口：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a2ab7e0c5f1468f93b1fe3a445b51eb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>点击测试能正常得到如下返回值的话，则代表数据插入成功，功能正常：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f96c873a40a4c8da2c2a5570ae82945~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<blockquote>\n<p><code>MongoDB</code> 的示例代码已上传 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway%2Ftree%2Fdemo%2Fv6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway/tree/demo/v6\" ref=\"nofollow noopener noreferrer\">demo/v6</a>，需要的同学自取。</p>\n</blockquote>\n<h2 data-id=\"heading-4\">Redis</h2>\n<p>在技术选型中，我们提到了 <code>Redis</code> 虽然作为数据库，但是常见的用法是作为统一、高速缓存服务来使用。</p>\n<p>在基础功能配置中，使用了 <code>NestJS</code> 自带的高速缓存插件 <code>cache-manager</code> 来缓存飞书的接口凭证，<code>cache-manager</code> 除了提供本地的高速缓存之外，也提供了替换底层缓存服务的能力。</p>\n<p>跟我们上文封装的数据库工具一样，<code>cache-manager</code> 将底层的多种缓存对接逻辑进行封装，屏蔽底层接口的差异性，对外则提供了一致的 <code>API</code> 调用，可以减少接入与理解成本，对于开发者来说可以很方便的把之前的缓存类型由本地替换成 <code>Redis</code>。</p>\n<p><strong>第一步</strong>：安装对应的 <code>cache-manager-redis-store</code> 依赖</p>\n<pre><code class=\"hljs language-shell\" lang=\"shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">yarn add cache-manager-redis-store</span>\n</code></pre>\n<p><strong>第二步</strong>：<code>yaml</code> 中新增 <code>Redis</code> 配置参数：</p>\n<pre><code class=\"hljs language-yaml\" lang=\"yaml\"><span class=\"hljs-attr\">REDIS_CONFIG:</span>\n  <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">\"localhost\"</span>  <span class=\"hljs-comment\"># redis 链接</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">6379</span>         <span class=\"hljs-comment\"># redis 端口</span>\n  <span class=\"hljs-attr\">auth:</span> <span class=\"hljs-string\">\"xxxx\"</span>       <span class=\"hljs-comment\"># redis 连接密码</span>\n  <span class=\"hljs-attr\">db:</span> <span class=\"hljs-number\">1</span>              <span class=\"hljs-comment\"># redis 数据库</span>\n</code></pre>\n<p><strong>第三步</strong>：改造之前获取环境变量的方法，可以根据传入的变量名获取对应的配置：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getConfig</span> = (<span class=\"hljs-params\"><span class=\"hljs-keyword\">type</span>?: <span class=\"hljs-built_in\">string</span></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> environment = <span class=\"hljs-title function_\">getEnv</span>()\n  <span class=\"hljs-keyword\">const</span> yamlPath = path.<span class=\"hljs-title function_\">join</span>(process.<span class=\"hljs-title function_\">cwd</span>(), <span class=\"hljs-string\">`./.config/.<span class=\"hljs-subst\">${environment}</span>.yaml`</span>)\n  <span class=\"hljs-keyword\">const</span> file = fs.<span class=\"hljs-title function_\">readFileSync</span>(yamlPath, <span class=\"hljs-string\">'utf8'</span>)\n  <span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-title function_\">parse</span>(file)\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">type</span>) {\n    <span class=\"hljs-keyword\">return</span> config[<span class=\"hljs-keyword\">type</span>]\n  }\n  <span class=\"hljs-keyword\">return</span> config\n}\n</code></pre>\n<p><strong>第四步</strong>：修改 <code>app.module.ts</code> 中的 <code>CacheModule</code> 初始化配置：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">CacheModule</span>, <span class=\"hljs-title class_\">Module</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./user/user.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ConfigModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/config'</span>;\n<span class=\"hljs-keyword\">import</span> { getConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./utils'</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> redisStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'cache-manager-redis-store'</span>;\n\n<span class=\"hljs-meta\">@Module</span>({\n  <span class=\"hljs-attr\">imports</span>: [\n    <span class=\"hljs-title class_\">CacheModule</span>.<span class=\"hljs-title function_\">register</span>({\n      <span class=\"hljs-attr\">isGlobal</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">store</span>: redisStore,\n      <span class=\"hljs-attr\">host</span>: <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-string\">'REDIS_CONFIG'</span>).<span class=\"hljs-property\">host</span>,\n      <span class=\"hljs-attr\">port</span>: <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-string\">'REDIS_CONFIG'</span>).<span class=\"hljs-property\">port</span>,\n      <span class=\"hljs-attr\">auth_pass</span>: <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-string\">'REDIS_CONFIG'</span>).<span class=\"hljs-property\">auth</span>,\n      <span class=\"hljs-attr\">db</span>: <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-string\">'REDIS_CONFIG'</span>).<span class=\"hljs-property\">db</span>\n    }),\n    <span class=\"hljs-title class_\">ConfigModule</span>.<span class=\"hljs-title function_\">forRoot</span>({\n      <span class=\"hljs-attr\">ignoreEnvFile</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">isGlobal</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">load</span>: [getConfig]\n    }), <span class=\"hljs-title class_\">UserModule</span>],\n  <span class=\"hljs-attr\">controllers</span>: [],\n  <span class=\"hljs-attr\">providers</span>: [],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> { }\n</code></pre>\n<p>完成上述操作之后，之前业务调用方法不需要做任何额外的改动，就已经完成了 <code>Redis</code> 的接入。</p>\n<p>可以使用之前的飞书消息推送的接口，正常访问得到如下结果则代表替换完成：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/750d0e0ef5314e828e0d0ae7fe3c9853~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>如果想要查看 <code>Redis</code> 的缓存数据，比较简单的方式可以使用 <code>VSCODE</code> 带的 <code>Redis</code> 插件：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c182110d5bb74431a19d3336ccd4e0c7~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>点击配置 <code>Redis</code> 参数直连服务：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d07d3569d64847c8823dc79c3a0fe479~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>输入以下命令即可获取存储的 <code>token</code> 内容：</p>\n<pre><code class=\"hljs language-shell\" lang=\"shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">GET APP_TOKEN_CACHE_KEY</span>\n</code></pre>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9033d365c8cd4fc59169d1f472c913f0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>在对接完毕 Redis 之后，即使集群部署服务，都可以使用统一的缓存，也不担心重启服务之后缓存数据丢失的情况。</p>\n<blockquote>\n<p><code>Redis</code> 的示例代码已上传 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway%2Ftree%2Fdemo%2Fv7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway/tree/demo/v7\" ref=\"nofollow noopener noreferrer\">demo/v7</a>，需要的同学自取。</p>\n</blockquote>\n<h2 data-id=\"heading-5\">写在最后</h2>\n<p>本章的内容是后端业务 <code>CURD</code> 中最重要的一块 =&gt; <strong>数据库相关的内容</strong>，介绍了如何基于 <code>TypeORM</code> 封装数据库方法以及使用方法，使用 <code>user</code> 进行简单的新增 <code>demo</code> 演示，更多 <code>TypeORM</code> 与数据库的使用方法在后面的业务开发代码中会结合实例介绍。</p>\n<p>另外对 <code>Redis</code> 的使用也做了部分介绍，主要是利用了 <code>cache-manager</code> 提供的功能，如果有兴趣的话可以使用 <code>redis</code> 库按照封装数据库的方式自己封装对应的模块，或者直接使用 <code>Service</code> 封装一套缓存的 <code>API</code> 也行。</p>\n<p>对于此类工具的封装以及使用的方法非常多，看自己的需求以及喜好开发即可，但是在基础建设中一定要切记，如果出现多种底层数据、工具来源，一定要在适配层抹平差异化，对外提供的 <code>API</code> 调用保证一致性。</p>\n<p>可以参考一下我之前的博客<a href=\"https://juejin.cn/post/6854573211594522631\" target=\"_blank\" title=\"https://juejin.cn/post/6854573211594522631\">项目实战|缓存处理</a>，对于前端的 <code>Cookie</code>、<code>Storage</code>、<code>indexDb</code> 等多种缓存数据源都做了适配抹平底层接口差异化的处理，业务同学在使用的过程中替换数据源非常简便，学习与开发成本降低很多。</p>\n<p>如果你有什么疑问，欢迎在评论区提出，或者加群沟通。 👏</p></div>"
    },
    {
        "name": "7\n基础篇：自定义日志\n学习时长: 50分50秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>在所有的后端服务中，日志是必不可少的一个关键环节，毕竟日常中我们不可能随时盯着控制台，问题的出现也会有随机性、不可预见性。一旦出现问题，要追踪错误以及解决的话，需要知道错误发生的原因、时间等细节信息。</p>\n<p>在之前需求分析中，在网关基础代理的服务中，网关作为所有业务流量的入口也有统一日志落库的需求。所以本章将介绍如何开发一个自定义的日志插件。</p>\n<h2 data-id=\"heading-1\">开启默认 Logger</h2>\n<p><code>NestJS</code> 框架自带了 <code>log</code> 插件，如果只是普通使用的话，直接开启日志功能即可：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">NestFactory</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">ApplicationModule</span>, { <span class=\"hljs-attr\">logger</span>: <span class=\"hljs-literal\">true</span> });\n</code></pre>\n<p>而我们为了框架的性能使用 <code>Fastify</code> 来替换底层框架之后，需要使用下述代码来开启 <code>Fastify</code> 的日志系统：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">NestFactory</span>.<span class=\"hljs-property\">create</span>&lt;<span class=\"hljs-title class_\">NestFastifyApplication</span>&gt;(<span class=\"hljs-title class_\">AppModule</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FastifyAdapter</span>({\n    <span class=\"hljs-attr\">logger</span>: <span class=\"hljs-literal\">true</span>\n  }));\n</code></pre>\n<p>接下来，当我们访问 <a href=\"https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://localhost:3000/\" ref=\"nofollow noopener noreferrer\">http://localhost:3000/</a> ，可以看到控制台已经在正常打印接口请求的日志了：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a5e662a415341a79982faf9d4c59636~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>虽然自带的日志功能开启之后，控制台能够正常打印日志，但是 <code>Fastify</code> 默认日志输出格式的并没有满足业务需求，首先无法<strong>快速区分</strong>日志类型，打印日志能参考的价值不大，另外 <code>logger</code> 并没有本地落库，后续查找也很麻烦，对于一个实战工程来说，快速定位日志问题以及有<strong>本地存储</strong>、<strong>日志轮转</strong>等功能还是必要的。</p>\n<h2 data-id=\"heading-2\">自定义 Logger</h2>\n<p>既然自带的日志功能不能满足我们的业务需求，那就需要对默认的日志功能进行拓展。</p>\n<ol>\n<li>安装几个必要的依赖：</li>\n</ol>\n<pre><code class=\"hljs language-csharp\" lang=\"csharp\">$ yarn <span class=\"hljs-keyword\">add</span> fast-json-parse <span class=\"hljs-comment\">// 格式化返回对象</span>\n$ yarn <span class=\"hljs-keyword\">add</span> pino-multi-stream <span class=\"hljs-comment\">// 替换输出流</span>\n$ yarn <span class=\"hljs-keyword\">add</span> split2 <span class=\"hljs-comment\">// 处理文本流</span>\n$ yarn <span class=\"hljs-keyword\">add</span> dayjs <span class=\"hljs-comment\">// 可选，如果自己写时间格式化函数可以不用 </span>\n</code></pre>\n<ol start=\"2\">\n<li><code>Fastify</code> 作为一款专注于性能 <code>Http</code> 框架，使用&nbsp;<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fpinojs%2Fpino\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/pinojs/pino\" ref=\"nofollow noopener noreferrer\">pino</a>&nbsp;作为内置日志工具，下面是自定义日志的参数配置：</li>\n</ol>\n<pre><code class=\"hljs language-javascript\" lang=\"javascript\"><span class=\"hljs-keyword\">const</span> split = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'split2'</span>)\n<span class=\"hljs-keyword\">const</span> stream = <span class=\"hljs-title function_\">split</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-property\">parse</span>)\n\n  <span class=\"hljs-attr\">logger</span>: {\n    <span class=\"hljs-attr\">level</span>: <span class=\"hljs-string\">'info'</span>,\n    <span class=\"hljs-attr\">file</span>: <span class=\"hljs-string\">'/path/to/file'</span> <span class=\"hljs-comment\">// 将调用 pino.destination() </span>\n    <span class=\"hljs-comment\">// stream: stream</span>\n  }\n</code></pre>\n<blockquote>\n<p>开启 <code>file</code> 配置的话，日志会自动存储在本地，如果开启 <code>stream</code> 的配置，就需要自己自定义修改配置，<strong>这两者是互斥的，只能配置一个</strong>。</p>\n</blockquote>\n<p>每个团队对日志的需求也并不相同，如果想对日志做更多定制化的功能，可以选择开启 <code>stream</code> 配置，自己开发所需要的日志功能。</p>\n<h4 data-id=\"heading-3\">logStream</h4>\n<ol>\n<li>新建 <code>common/logger/logStream.ts</code> 文件：</li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">const</span> chalk = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'chalk'</span>)\n<span class=\"hljs-keyword\">const</span> dayjs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dayjs'</span>)\n<span class=\"hljs-keyword\">const</span> split = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'split2'</span>)\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">JSON</span>parse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fast-json-parse'</span>)\n\n<span class=\"hljs-keyword\">const</span> levels = {\n  [<span class=\"hljs-number\">60</span>]: <span class=\"hljs-string\">'Fatal'</span>,\n  [<span class=\"hljs-number\">50</span>]: <span class=\"hljs-string\">'Error'</span>,\n  [<span class=\"hljs-number\">40</span>]: <span class=\"hljs-string\">'Warn'</span>,\n  [<span class=\"hljs-number\">30</span>]: <span class=\"hljs-string\">'Info'</span>,\n  [<span class=\"hljs-number\">20</span>]: <span class=\"hljs-string\">'Debug'</span>,\n  [<span class=\"hljs-number\">10</span>]: <span class=\"hljs-string\">'Trace'</span>\n};\n\n<span class=\"hljs-keyword\">const</span> colors = {\n  [<span class=\"hljs-number\">60</span>]: <span class=\"hljs-string\">'magenta'</span>,\n  [<span class=\"hljs-number\">50</span>]: <span class=\"hljs-string\">'red'</span>,\n  [<span class=\"hljs-number\">40</span>]: <span class=\"hljs-string\">'yellow'</span>,\n  [<span class=\"hljs-number\">30</span>]: <span class=\"hljs-string\">'blue'</span>,\n  [<span class=\"hljs-number\">20</span>]: <span class=\"hljs-string\">'white'</span>,\n  [<span class=\"hljs-number\">10</span>]: <span class=\"hljs-string\">'white'</span>\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ILogStream</span> {\n  format?: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LogStream</span> {\n  <span class=\"hljs-keyword\">public</span> trans;\n  <span class=\"hljs-keyword\">private</span> customFormat;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">opt?: ILogStream</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">trans</span> = <span class=\"hljs-title function_\">split</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =&gt;</span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">log</span>(data);\n    });\n\n    <span class=\"hljs-keyword\">if</span> (opt?.<span class=\"hljs-property\">format</span> &amp;&amp; <span class=\"hljs-keyword\">typeof</span> opt.<span class=\"hljs-property\">format</span> === <span class=\"hljs-string\">'function'</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">customFormat</span> = opt.<span class=\"hljs-property\">format</span>\n    }\n  }\n\n  <span class=\"hljs-title function_\">log</span>(<span class=\"hljs-params\">data</span>) {\n    data = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">jsonParse</span>(data)\n    <span class=\"hljs-keyword\">const</span> level = data.<span class=\"hljs-property\">level</span>\n    data = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">format</span>(data)\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(chalk[colors[level]](data))\n  }\n\n  <span class=\"hljs-title function_\">jsonParse</span>(<span class=\"hljs-params\">data</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">JSON</span>parse(data).<span class=\"hljs-property\">value</span>;\n  }\n\n  <span class=\"hljs-title function_\">format</span>(<span class=\"hljs-params\">data</span>) {\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">customFormat</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">customFormat</span>(data)\n    }\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Level</span> = levels[data.<span class=\"hljs-property\">level</span>];\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">DateTime</span> = <span class=\"hljs-title function_\">dayjs</span>(data.<span class=\"hljs-property\">time</span>).<span class=\"hljs-title function_\">format</span>(<span class=\"hljs-string\">'YYYY-MM-DD HH:mm:ss.SSS A'</span>);\n    <span class=\"hljs-keyword\">const</span> logId = data.<span class=\"hljs-property\">reqId</span> || <span class=\"hljs-string\">'_logId_'</span>;\n\n    <span class=\"hljs-keyword\">let</span> reqInfo = <span class=\"hljs-string\">'[-]'</span>;\n\n    <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">req</span>) {\n      reqInfo = <span class=\"hljs-string\">`[<span class=\"hljs-subst\">${data.req.remoteAddress || <span class=\"hljs-string\">\"\"</span>}</span> - <span class=\"hljs-subst\">${data.req.method}</span> - <span class=\"hljs-subst\">${data.req.url}</span>]`</span>\n    }\n\n    <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">res</span>) {\n      reqInfo = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(data.<span class=\"hljs-property\">res</span>)\n    }\n\n    <span class=\"hljs-comment\">// 过滤 swagger 日志</span>\n    <span class=\"hljs-keyword\">if</span> (data?.<span class=\"hljs-property\">req</span>?.<span class=\"hljs-property\">url</span> &amp;&amp; data?.<span class=\"hljs-property\">req</span>?.<span class=\"hljs-property\">url</span>.<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-string\">'/api/doc'</span>) !== -<span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${Level}</span> | <span class=\"hljs-subst\">${DateTime}</span> | <span class=\"hljs-subst\">${logId}</span> | <span class=\"hljs-subst\">${reqInfo}</span> | <span class=\"hljs-subst\">${data.stack || data.msg}</span>`</span>\n  }\n\n}\n</code></pre>\n<p><code>levels</code> 以及 <code>colors</code> 分别是定义<strong>日志类型</strong>与<strong>控制台输出颜色</strong>，可以根据自己的习惯或者团队规则进行配置。<code>format</code> 是格式化 <code>Fastify</code> 的日志输出，也可以根据自己的习惯格式化日志格式。<code>log</code> 则是将日志输出到控制台。</p>\n<blockquote>\n<p><code>logStream.ts</code> 整体比较简单易懂，主要的功能就是格式化日志以及打印日志。</p>\n</blockquote>\n<p>在接入自定义日志后，可以看到控住台输出内容变成如下所示：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c221318c9de74df7a44a9f69d47a8998~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>对比最开始的默认日志打印格式，现在可以很清晰的从控制台看出日志的类型与内容，方便我们快速定位问题。</p>\n<h4 data-id=\"heading-4\">fileStream</h4>\n<p>在接管了控制台输出日志后，我们接着开发日志的落库与轮转功能：</p>\n<p>新建 <code>common/logger/fileStream.ts</code> 文件：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { dirname } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'path'</span>\n<span class=\"hljs-keyword\">import</span> { createWriteStream, stat, rename } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'fs'</span>\n\n<span class=\"hljs-keyword\">const</span> assert = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"assert\"</span>)\n<span class=\"hljs-keyword\">const</span> mkdirp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"mkdirp\"</span>)\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">LogStream</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./logStream\"</span>\n\n<span class=\"hljs-keyword\">const</span> defaultOptions = {\n  <span class=\"hljs-attr\">maxBufferLength</span>: <span class=\"hljs-number\">4096</span>, <span class=\"hljs-comment\">// 日志写入缓存队列最大长度</span>\n  <span class=\"hljs-attr\">flushInterval</span>: <span class=\"hljs-number\">1000</span>, <span class=\"hljs-comment\">// flush间隔</span>\n  <span class=\"hljs-attr\">logRotator</span>: {\n    <span class=\"hljs-attr\">byHour</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">byDay</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">hourDelimiter</span>: <span class=\"hljs-string\">'_'</span>\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">onError</span> = (<span class=\"hljs-params\">err</span>) =&gt; {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(\n    <span class=\"hljs-string\">'%s ERROR %s [chair-logger:buffer_write_stream] %s: %s\\n%s'</span>,\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">toString</span>(),\n    process.<span class=\"hljs-property\">pid</span>,\n    err.<span class=\"hljs-property\">name</span>,\n    err.<span class=\"hljs-property\">message</span>,\n    err.<span class=\"hljs-property\">stack</span>\n  )\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fileExists</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">srcPath</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n    <span class=\"hljs-comment\">// 自运行返回Promise</span>\n    <span class=\"hljs-title function_\">stat</span>(srcPath, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, stats</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (!err &amp;&amp; stats.<span class=\"hljs-title function_\">isFile</span>()) {\n        <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-literal\">true</span>);\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-literal\">false</span>);\n      }\n    })\n  })\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fileRename</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">oldPath, newPath</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">rename</span>(oldPath, newPath, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n      <span class=\"hljs-title function_\">resolve</span>(e ? <span class=\"hljs-literal\">false</span> : <span class=\"hljs-literal\">true</span>);\n    })\n  })\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FileStream</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">LogStream</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">options</span>: <span class=\"hljs-built_in\">any</span> = {};\n  <span class=\"hljs-keyword\">private</span> _stream = <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-keyword\">private</span> _timer = <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-keyword\">private</span> _bufSize = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">private</span> _buf = [];\n  <span class=\"hljs-keyword\">private</span> lastPlusName = <span class=\"hljs-string\">''</span>;\n  <span class=\"hljs-keyword\">private</span> _RotateTimer = <span class=\"hljs-literal\">null</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">options</span>) {\n    <span class=\"hljs-variable language_\">super</span>(options)\n    <span class=\"hljs-title function_\">assert</span>(options.<span class=\"hljs-property\">fileName</span>, <span class=\"hljs-string\">'should pass options.fileName'</span>)\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">options</span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>({}, defaultOptions, options)\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_stream</span> = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_timer</span> = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_bufSize</span> = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_buf</span> = []\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">lastPlusName</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_getPlusName</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">reload</span>()\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_RotateTimer</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_createRotateInterval</span>();\n  }\n\n  <span class=\"hljs-title function_\">log</span>(<span class=\"hljs-params\">data</span>) {\n    data = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">format</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">jsonParse</span>(data))\n    <span class=\"hljs-keyword\">if</span> (data) <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_write</span>(data + <span class=\"hljs-string\">'\\n'</span>)\n  }\n\n  <span class=\"hljs-comment\">/**\n   * 重新载入日志文件\n   */</span>\n  <span class=\"hljs-title function_\">reload</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// 关闭原来的 stream</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">close</span>()\n    <span class=\"hljs-comment\">// 新创建一个 stream</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_stream</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_createStream</span>()\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_timer</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_createInterval</span>()\n  }\n\n  <span class=\"hljs-title function_\">reloadStream</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_closeStream</span>()\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_stream</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_createStream</span>()\n  }\n  <span class=\"hljs-comment\">/**\n   * 关闭 stream\n   */</span>\n  <span class=\"hljs-title function_\">close</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_closeInterval</span>() <span class=\"hljs-comment\">// 关闭定时器</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_buf</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_buf</span>.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-comment\">// 写入剩余内容</span>\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">flush</span>()\n    }\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_closeStream</span>() <span class=\"hljs-comment\">//关闭流</span>\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@deprecated</span>\n   */</span>\n  <span class=\"hljs-title function_\">end</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'transport.end() is deprecated, use transport.close()'</span>)\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">close</span>()\n  }\n\n  <span class=\"hljs-comment\">/**\n   * 覆盖父类，写入内存\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Buffer</span>} <span class=\"hljs-variable\">buf</span> - 日志内容\n   * <span class=\"hljs-doctag\">@private</span>\n   */</span>\n  <span class=\"hljs-title function_\">_write</span>(<span class=\"hljs-params\">buf</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_bufSize</span> += buf.<span class=\"hljs-property\">length</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_buf</span>.<span class=\"hljs-title function_\">push</span>(buf)\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_buf</span>.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">options</span>.<span class=\"hljs-property\">maxBufferLength</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">flush</span>()\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * 创建一个 stream\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">Stream</span>} 返回一个 writeStream\n   * <span class=\"hljs-doctag\">@private</span>\n   */</span>\n  <span class=\"hljs-title function_\">_createStream</span>(<span class=\"hljs-params\"></span>) {\n    mkdirp.<span class=\"hljs-title function_\">sync</span>(<span class=\"hljs-title function_\">dirname</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">options</span>.<span class=\"hljs-property\">fileName</span>))\n    <span class=\"hljs-keyword\">const</span> stream = <span class=\"hljs-title function_\">createWriteStream</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">options</span>.<span class=\"hljs-property\">fileName</span>, { <span class=\"hljs-attr\">flags</span>: <span class=\"hljs-string\">'a'</span> })\n    stream.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'error'</span>, onError)\n    <span class=\"hljs-keyword\">return</span> stream\n  }\n\n  <span class=\"hljs-comment\">/**\n   * 关闭 stream\n   * <span class=\"hljs-doctag\">@private</span>\n   */</span>\n  <span class=\"hljs-title function_\">_closeStream</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_stream</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_stream</span>.<span class=\"hljs-title function_\">end</span>()\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_stream</span>.<span class=\"hljs-title function_\">removeListener</span>(<span class=\"hljs-string\">'error'</span>, onError)\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_stream</span> = <span class=\"hljs-literal\">null</span>\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * 将内存中的字符写入文件中\n   */</span>\n  <span class=\"hljs-title function_\">flush</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_buf</span>.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_stream</span>.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_buf</span>.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">''</span>))\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_buf</span> = []\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_bufSize</span> = <span class=\"hljs-number\">0</span>\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * 创建定时器，一定时间内写入文件\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">Interval</span>} 定时器\n   * <span class=\"hljs-doctag\">@private</span>\n   */</span>\n  <span class=\"hljs-title function_\">_createInterval</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">flush</span>()\n    }, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">options</span>.<span class=\"hljs-property\">flushInterval</span>)\n  }\n\n  <span class=\"hljs-comment\">/**\n   * 关闭定时器\n   * <span class=\"hljs-doctag\">@private</span>\n   */</span>\n  <span class=\"hljs-title function_\">_closeInterval</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_timer</span>) {\n      <span class=\"hljs-built_in\">clearInterval</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_timer</span>)\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_timer</span> = <span class=\"hljs-literal\">null</span>\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * 分割定时器\n   * <span class=\"hljs-doctag\">@private</span>\n   */</span>\n  <span class=\"hljs-title function_\">_createRotateInterval</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_checkRotate</span>()\n    }, <span class=\"hljs-number\">1000</span>)\n  }\n\n  <span class=\"hljs-comment\">/**\n   * 检测日志分割\n   */</span>\n  <span class=\"hljs-title function_\">_checkRotate</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">let</span> flag = <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-keyword\">const</span> plusName = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_getPlusName</span>()\n    <span class=\"hljs-keyword\">if</span> (plusName === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">lastPlusName</span>) {\n      <span class=\"hljs-keyword\">return</span>\n    }\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">lastPlusName</span> = plusName;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">renameOrDelete</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">options</span>.<span class=\"hljs-property\">fileName</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">options</span>.<span class=\"hljs-property\">fileName</span> + plusName)\n      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">reloadStream</span>()\n      })\n      .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e)\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">reloadStream</span>()\n      })\n  }\n\n  <span class=\"hljs-title function_\">_getPlusName</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">let</span> plusName\n    <span class=\"hljs-keyword\">const</span> date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>()\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">options</span>.<span class=\"hljs-property\">logRotator</span>.<span class=\"hljs-property\">byHour</span>) {\n      plusName = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${date.getFullYear()}</span>-<span class=\"hljs-subst\">${date.getMonth() +\n        <span class=\"hljs-number\">1</span>}</span>-<span class=\"hljs-subst\">${date.getDate()}</span><span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.options.logRotator.hourDelimiter}</span><span class=\"hljs-subst\">${date.getHours()}</span>`</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      plusName = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${date.getFullYear()}</span>-<span class=\"hljs-subst\">${date.getMonth() +\n        <span class=\"hljs-number\">1</span>}</span>-<span class=\"hljs-subst\">${date.getDate()}</span>`</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`.<span class=\"hljs-subst\">${plusName}</span>`</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * 重命名文件\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">*</span>} srcPath \n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">*</span>} targetPath \n   */</span>\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">renameOrDelete</span>(<span class=\"hljs-params\">srcPath, targetPath</span>) {\n    <span class=\"hljs-keyword\">if</span> (srcPath === targetPath) {\n      <span class=\"hljs-keyword\">return</span>\n    }\n    <span class=\"hljs-keyword\">const</span> srcExists = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fileExists</span>(srcPath);\n    <span class=\"hljs-keyword\">if</span> (!srcExists) {\n      <span class=\"hljs-keyword\">return</span>\n    }\n    <span class=\"hljs-keyword\">const</span> targetExists = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fileExists</span>(targetPath)\n\n    <span class=\"hljs-keyword\">if</span> (targetExists) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`targetFile <span class=\"hljs-subst\">${targetPath}</span> exists!!!`</span>)\n      <span class=\"hljs-keyword\">return</span>\n    }\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fileRename</span>(srcPath, targetPath)\n  }\n}\n</code></pre>\n<p><code>fileStream.ts</code> 的主要功能是存储日志文件以及日志轮转。文件这块处理的内容比较多，但是从代码角度来看并不复杂，大家可以根据代码注释看完以及对应的功能来理解。</p>\n<p>完成上述文件之后，修改 main.ts 接入自定义的日志插件：</p>\n<pre><code class=\"hljs language-typescript\" lang=\"typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ValidationPipe</span>, <span class=\"hljs-title class_\">VersioningType</span>, <span class=\"hljs-variable constant_\">VERSION_NEUTRAL</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NestFactory</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/core'</span>;\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">FastifyAdapter</span>,\n  <span class=\"hljs-title class_\">NestFastifyApplication</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/platform-fastify'</span>;\n<span class=\"hljs-keyword\">import</span> fastify <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'fastify'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AllExceptionsFilter</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./common/exceptions/base.exception.filter'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">HttpExceptionFilter</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./common/exceptions/http.exception.filter'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">TransformInterceptor</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./common/interceptors/transform.interceptor'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FastifyLogger</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./common/logger'</span>;\n<span class=\"hljs-keyword\">import</span> { generateDocument } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./doc'</span>;\n\n<span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">module</span>: <span class=\"hljs-built_in\">any</span>;\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bootstrap</span>(<span class=\"hljs-params\"></span>) {\n\n  <span class=\"hljs-keyword\">const</span> fastifyInstance = <span class=\"hljs-title function_\">fastify</span>({\n    <span class=\"hljs-attr\">logger</span>: <span class=\"hljs-title class_\">FastifyLogger</span>,\n  })\n\n  <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">NestFactory</span>.<span class=\"hljs-property\">create</span>&lt;<span class=\"hljs-title class_\">NestFastifyApplication</span>&gt;(\n    <span class=\"hljs-title class_\">AppModule</span>,\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FastifyAdapter</span>(fastifyInstance)\n  );\n\n  <span class=\"hljs-comment\">// 统一响应体格式</span>\n  app.<span class=\"hljs-title function_\">useGlobalInterceptors</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TransformInterceptor</span>());\n\n  <span class=\"hljs-comment\">// 异常过滤器</span>\n  app.<span class=\"hljs-title function_\">useGlobalFilters</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AllExceptionsFilter</span>(), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpExceptionFilter</span>());\n\n  <span class=\"hljs-comment\">// 接口版本化管理</span>\n  app.<span class=\"hljs-title function_\">enableVersioning</span>({\n    <span class=\"hljs-attr\">defaultVersion</span>: [<span class=\"hljs-variable constant_\">VERSION_NEUTRAL</span>, <span class=\"hljs-string\">'1'</span>, <span class=\"hljs-string\">'2'</span>],\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">VersioningType</span>.<span class=\"hljs-property\">URI</span>,\n  });\n\n  <span class=\"hljs-comment\">// 启动全局字段校验，保证请求接口字段校验正确。</span>\n  app.<span class=\"hljs-title function_\">useGlobalPipes</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ValidationPipe</span>());\n\n  <span class=\"hljs-comment\">// 创建文档</span>\n  <span class=\"hljs-title function_\">generateDocument</span>(app)\n\n  <span class=\"hljs-comment\">// 添加热更新</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">hot</span>) {\n    <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">hot</span>.<span class=\"hljs-title function_\">accept</span>();\n    <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">hot</span>.<span class=\"hljs-title function_\">dispose</span>(<span class=\"hljs-function\">() =&gt;</span> app.<span class=\"hljs-title function_\">close</span>());\n  }\n\n  <span class=\"hljs-keyword\">await</span> app.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">3000</span>);\n}\n<span class=\"hljs-title function_\">bootstrap</span>();\n</code></pre>\n<p>重新启动项目之后，可以看到本地根路径的 <code>logs</code> 文件夹下有对应的日志文件生成：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3995c3eea1e5412483fcc95bf82c450d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<blockquote>\n<p>自定义插件参考 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fweivea%2Ffastify-logger\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/weivea/fastify-logger\" ref=\"nofollow noopener noreferrer\">fastify-logger</a> 这个项目，原项目是 <code>JS</code> 的版本，在 <code>NestJS</code> 中使用有些麻烦，索性拉下来改成 <code>TS</code> 版本了，另外稍微修改了一些内容适配项目。</p>\n</blockquote>\n<h2 data-id=\"heading-5\">写在最后</h2>\n<p>本章文中贴出的代码只有部分重要的示例，完整的代码示例已上传 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway%2Ftree%2Fdemo%2Fv8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway/tree/demo/v8\" ref=\"nofollow noopener noreferrer\">demo/v8</a>，需要的同学可以自取。</p>\n<p>本章是针对自定义日志的处理，如果项目并不是非常复杂的话，已经足够满足日常开发需求。</p>\n<p>但实际上一个<strong>企业级的项目</strong>在日志处理方面可能会更加复杂，特别是使用 <code>k8s</code> 容器编排部署之后，日志会零散的落库在各个 <code>pod</code> 中，排查问题、恢复数据等操作需要聚合多个 <code>pod</code> 的日志才行，这就需要借助其他的工具例如 <code>elk</code> 等来处理日志.这块内容衍生性比较大，如果有需求的话，后期可以再拿出来单独讨论一下。</p>\n<p>如果你有什么疑问，欢迎在评论区提出或者加群沟通。 👏</p></div>"
    },
    {
        "name": "8\n基础篇：鉴权与登录\n学习时长: 72分35秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>统一的用户中心作为基础服务，为了方便团队同学使用，一般会将 <strong>OA</strong> 系统、钉钉、飞书、企业微信等等各种第三方常用服务的用户数据打通，使得团队成员可以快速登录。</p>\n<p>在 <a href=\"https://juejin.cn/book/6948353204648148995\" target=\"_blank\" title=\"https://juejin.cn/book/6948353204648148995\">DevOps 小册</a>中，使用了 <code>GitLab</code> 作为三方应用授权，避免用户重复登录，飞书也提供了一样的三方授权能力。</p>\n<p>在本章中，我们将学习使用 <code>NestJS</code> 的守卫模块结合之前封装过的飞书<strong>用户模块</strong>进行三方授权登录，并保存用户信息，为用户系统的业务开发做完最后一步的准备工作。</p>\n<h2 data-id=\"heading-1\">飞书对接</h2>\n<p>飞书应用第三方网站免登的步骤如下。</p>\n<ol>\n<li>网页后端发现用户未登录，<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fopen.feishu.cn%2Fdocument%2FukTMukTMukTM%2FukzN4UjL5cDO14SO3gTN\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://open.feishu.cn/document/ukTMukTMukTM/ukzN4UjL5cDO14SO3gTN\" ref=\"nofollow noopener noreferrer\">请求身份验证</a>；</li>\n<li>用户登录后，开放平台生成登录预授权码，302跳转至重定向地址。</li>\n<li>网页后端调用<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fopen.feishu.cn%2Fdocument%2FuAjLw4CM%2FukTMukTMukTM%2Freference%2Fauthen-v1%2Fauthen%2Faccess_token\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/authen-v1/authen/access_token\" ref=\"nofollow noopener noreferrer\">获取登录用户身份</a>校验登录预授权码合法性，获取到用户身份。</li>\n<li>如需其他用户信息，网页后端可调用<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fopen.feishu.cn%2Fdocument%2FuAjLw4CM%2FukTMukTMukTM%2Freference%2Fauthen-v1%2Fauthen%2Fuser_info\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/authen-v1/authen/user_info\" ref=\"nofollow noopener noreferrer\">获取用户信息（身份验证）</a>。</li>\n</ol>\n<p>授权流程图如下所示：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0fff3a5fc92c432ea5aa09cf3a392c74~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>接下来，我们按照步骤逐步实现飞书的三方授权</p>\n<h4 data-id=\"heading-2\">请求用户身份验证</h4>\n<p><strong>第一步</strong>：开启网页能力并配置重定向链接。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d66663a5eba541b08f55a711c23449ce~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>如上图所示，点击网页菜单开启网页能力之后，在安全设置菜单中，添加回调 URL 地址。这里我们使用的是 <code>http://127.0.0.1:8080/auth</code>，你可以根据自己的喜好来设定。</p>\n<p><strong>第二步</strong>：请求用户身份验证。</p>\n<p>根据飞书的文档组装身份验证请求接口：<code>https://open.feishu.cn/open-apis/authen/v1/index?redirect_uri={REDIRECT_URI}&amp;app_id={APPID}&amp;state={STATE} </code>，参数说明如下所示：</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>参数</th><th>类型</th><th>必须</th><th>说明</th></tr></thead><tbody><tr><td>redirect_uri</td><td>string</td><td>是</td><td>重定向 <code>URL</code>（使用第一步配置的重定向 <code>URL</code> 即可）</td></tr><tr><td>app_id</td><td>string</td><td>是</td><td>固定的应用标识，在应用后台【凭证和基础信息】中可见</td></tr><tr><td>state</td><td>string</td><td>否</td><td>用来维护请求和回调状态的附加字符串， 在授权完成回调时会附加此参数，应用可以根据此字符串来判断上下文关系</td></tr></tbody></table>\n<p>所以对于我们的应用，请求身份的链接为：<code>https://open.feishu.cn/open-apis/authen/v1/index?app_id=cli_xxxxxxd&amp;redirect_uri=http%3A%2F%2F127.0.0.1%3A8080%2Fauth</code>，在浏览器直接输入此链接如果出现如下的飞书授权界面，则代表我们已经正常配置成功了：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24e4a3045ab94e42a991f28f82ecff48~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p><strong>第三步</strong>：获取登录预授权码。这一步比较简单，正常出现飞书应用授权的界面之后，点击授权【<strong>按钮</strong>】即可获取到对应的登录预授权码。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a69e15e58894e7e92d06c26cf58861b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>出现上图的界面并不意外，毕竟这个链接是随便填写的，飞书并不会真的去校验这个链接是否真实存在。当我们点击授权之后，它会将登录预授权码放在重定向 <code>URL</code> 的 <code>code</code> 参数中直接转发，所以即使这个请求是假的，也能顺利拿到对应的 <code>code</code>。</p>\n<p><strong>第四步</strong>：获取用户凭证。在这一步中，使用第三步获取到的登录预授权码，也就是重定向 <code>URL Query</code> 参数中的 <code>code</code> 向飞书换取真正的用户凭证，注意 <code>code</code> 的有效期只有 <strong>5</strong> 分钟，且只能使用一次，过期或已使用的 <code>code</code> 都无法再次换取真实用户凭证。</p>\n<ol>\n<li>在 <code>src/helper/feishu/auth.ts</code> 中添加新的换取用户凭证方法：</li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getUserToken</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">{ code, app_token }</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> { data } = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">methodV</span>({\n    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">`/authen/v1/access_token`</span>,\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,\n    <span class=\"hljs-attr\">headers</span>: {\n      <span class=\"hljs-title class_\">Authorization</span>: <span class=\"hljs-string\">`Bearer <span class=\"hljs-subst\">${app_token}</span>`</span>,\n    },\n    <span class=\"hljs-attr\">params</span>: {\n      <span class=\"hljs-attr\">grant_type</span>: <span class=\"hljs-string\">'authorization_code'</span>,\n      code,\n    },\n  });\n  <span class=\"hljs-keyword\">return</span> data;\n};\n</code></pre>\n<ol start=\"2\">\n<li>在 <code>src/user/feishu/feishu.service.ts</code> 中添加新的换取用户凭证的 <code>Service</code>：</li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getUserToken</span>(<span class=\"hljs-params\">code: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-keyword\">const</span> app_token = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getAppToken</span>()\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">dto</span>: <span class=\"hljs-title class_\">GetUserTokenDto</span> = {\n      code,\n      app_token\n    };\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">res</span>: <span class=\"hljs-built_in\">any</span> = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getUserToken</span>(dto);\n    <span class=\"hljs-keyword\">if</span> (res.<span class=\"hljs-property\">code</span> !== <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(res.<span class=\"hljs-property\">msg</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-property\">data</span>;\n}\n</code></pre>\n<ol start=\"3\">\n<li>在 <code>src/user/feishu/feishu.controller.ts</code> 中添加新的换取用户凭证的 <code>Controller</code>：</li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\">  <span class=\"hljs-meta\">@ApiOperation</span>({\n    <span class=\"hljs-attr\">summary</span>: <span class=\"hljs-string\">'获取用户凭证'</span>,\n  })\n  <span class=\"hljs-meta\">@Post</span>(<span class=\"hljs-string\">'getUserToken'</span>)\n  <span class=\"hljs-title function_\">getUserToken</span>(<span class=\"hljs-params\"><span class=\"hljs-meta\">@Body</span>() params: GetUserTokenDto</span>) {\n    <span class=\"hljs-keyword\">const</span> { code } = params\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">feishuService</span>.<span class=\"hljs-title function_\">getUserToken</span>(code);\n  }\n</code></pre>\n<ol start=\"4\">\n<li>在 <code>feishu.dto.ts</code> 中添加新的 <code>GetUserTokenDto</code>：</li>\n</ol>\n<pre><code class=\"hljs language-less\" lang=\"less\"><span class=\"hljs-selector-tag\">export</span> <span class=\"hljs-selector-tag\">class</span> <span class=\"hljs-selector-tag\">GetUserTokenDto</span> {\n  <span class=\"hljs-variable\">@IsNotEmpty</span>()\n  <span class=\"hljs-variable\">@ApiProperty</span>({ <span class=\"hljs-attribute\">example</span>: <span class=\"hljs-string\">'xxxx'</span>, <span class=\"hljs-attribute\">description</span>: <span class=\"hljs-string\">'飞书临时登录凭证'</span> })\n  <span class=\"hljs-attribute\">code</span>: string;\n\n  app_token: string;\n}\n</code></pre>\n<p>打开 <strong>Swagger</strong> 调试 <code>getUserToken</code> 接口，将第三步获取的临时登录凭证输入参数调试。如果配置正常的话，此时可以拿到飞书的用户信息和真实的用户凭证 <code>access_token</code>，以及 <code>refresh_token</code> 等回调值。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa7ca11c948648cd86c7bd3b66e61925~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>之后可以将 <code>access_token</code> 的值缓存起来，使用 <code>access_token</code> 调用飞书提供的任意接口，但前提是这个应用拥有对应的模块接口权限才能够正常调用。</p>\n<p><strong>第五步</strong>: 刷新用户凭证。安全起见，飞书获取的 <code>access_token</code> 和 <code>refresh_token</code> 均存在有效期。<code>access_token</code> 的有效期为 <strong>2</strong> 小时，过期之前可以通过有效期更长的 <code>refresh_token</code> 缓存新的 <code>access_token</code>，来保证能够正常调用飞书接口。</p>\n<ol>\n<li>在&nbsp;<code>src/helper/feishu/auth.ts</code>&nbsp;中新增刷新用户 <code>access_token</code> 方法：</li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">refreshUserToken</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">{ refreshToken, app_token }</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> { data } = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">methodV</span>({\n    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">`/authen/v1/refresh_access_token`</span>,\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,\n    <span class=\"hljs-attr\">headers</span>: {\n      <span class=\"hljs-title class_\">Authorization</span>: <span class=\"hljs-string\">`Bearer <span class=\"hljs-subst\">${app_token}</span>`</span>,\n    },\n    <span class=\"hljs-attr\">params</span>: {\n      <span class=\"hljs-attr\">grant_type</span>: <span class=\"hljs-string\">'refresh_token'</span>,\n      <span class=\"hljs-attr\">refresh_token</span>: refreshToken,\n      app_token,\n    },\n  });\n  <span class=\"hljs-keyword\">return</span> data;\n};\n</code></pre>\n<ol start=\"2\">\n<li>在 <code>src/user/feishu/feishu.service.ts</code> 中添加<strong>刷新</strong>、<strong>存储</strong>、<strong>读取</strong> <code>access_token</code> 的 <code>Service</code>：</li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\">  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">setUserCacheToken</span>(<span class=\"hljs-params\">tokenInfo: <span class=\"hljs-built_in\">any</span></span>) {\n    <span class=\"hljs-keyword\">const</span> {\n      refresh_token,\n      access_token,\n      user_id,\n      expires_in,\n      refresh_expires_in,\n    } = tokenInfo;\n\n    <span class=\"hljs-comment\">// 缓存用户的 token</span>\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cacheManager</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.USER_TOKEN_CACHE_KEY}</span>_<span class=\"hljs-subst\">${user_id}</span>`</span>, access_token, {\n      <span class=\"hljs-attr\">ttl</span>: expires_in - <span class=\"hljs-number\">60</span>,\n    });\n\n    <span class=\"hljs-comment\">// 缓存用户的 fresh token</span>\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cacheManager</span>.<span class=\"hljs-title function_\">set</span>(\n      <span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.USER_REFRESH_TOKEN_CACHE_KEY}</span>_<span class=\"hljs-subst\">${user_id}</span>`</span>,\n      refresh_token,\n      {\n        <span class=\"hljs-attr\">ttl</span>: refresh_expires_in - <span class=\"hljs-number\">60</span>,\n      },\n    );\n  }\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getCachedUserToken</span>(<span class=\"hljs-params\">userId: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">userToken</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cacheManager</span>.<span class=\"hljs-title function_\">get</span>(\n       <span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.USER_TOKEN_CACHE_KEY}</span>_<span class=\"hljs-subst\">${userId}</span>`</span>,\n    );\n\n    <span class=\"hljs-comment\">// 如果 token 失效</span>\n    <span class=\"hljs-keyword\">if</span> (!userToken) {\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">refreshToken</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cacheManager</span>.<span class=\"hljs-title function_\">get</span>(\n        <span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.USER_REFRESH_TOKEN_CACHE_KEY}</span>_<span class=\"hljs-subst\">${userId}</span>`</span>,\n      );\n      <span class=\"hljs-keyword\">if</span> (!refreshToken) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>({\n          <span class=\"hljs-attr\">code</span>: <span class=\"hljs-variable constant_\">BUSINESS_ERROR_CODE</span>.<span class=\"hljs-property\">TOKEN_INVALID</span>,\n          <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'token 已失效'</span>,\n        });\n      }\n      <span class=\"hljs-comment\">// 获取新的用户 token</span>\n      <span class=\"hljs-keyword\">const</span> usrTokenInfo = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getUserTokenByRefreshToken</span>(refreshToken);\n      <span class=\"hljs-comment\">// 更新缓存的用户 token</span>\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setUserCacheToken</span>(usrTokenInfo);\n      userToken = usrTokenInfo.<span class=\"hljs-property\">access_token</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> userToken;\n  }\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getUserTokenByRefreshToken</span>(<span class=\"hljs-params\">refreshToken: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">refreshUserToken</span>({\n      refreshToken,\n      <span class=\"hljs-attr\">app_token</span>: <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getAppToken</span>(),\n    });\n  }\n</code></pre>\n<p>根据方法名可以清晰地知道对应的功能，我就不过多介绍了。至此，飞书应用的三方授权模块对接完毕。</p>\n<h2 data-id=\"heading-3\">鉴权与登录</h2>\n<p>上述步骤只是对接了飞书应用，还不足够完成登录态。接下来，我们要借助 <code>NestJS</code> 提供的 <code>Guards</code> 模块、<code>Passport</code> 与 <code>JWT</code> 来完成登录模块的开发。</p>\n<p>首选需要安装对应的依赖：</p>\n<pre><code class=\"hljs language-shell\" lang=\"shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">yarn add @nestjs/passport passport</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">yarn add -D @types/passport-local</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">yarn add @nestjs/jwt passport-jwt</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">yarn add @fastify/cookie</span>\n</code></pre>\n<p><strong>第一步</strong>：新建 <code>src/auth/auth.service.ts</code>。</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">JwtService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/jwt'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FeishuUserInfo</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'src/user/feishu/feishu.dto'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FeishuService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'src/user/feishu/feishu.service'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">User</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/user/user.mongo.entity'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'src/user/user.service'</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AuthService</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-keyword\">private</span> jwtService: JwtService,\n    <span class=\"hljs-keyword\">private</span> userService: UserService,\n    <span class=\"hljs-keyword\">private</span> feishuService: FeishuService,\n  </span>) { }\n\n  <span class=\"hljs-comment\">// 验证飞书用户 </span>\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">validateFeishuUser</span>(<span class=\"hljs-attr\">code</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">Payload</span>&gt; {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">feishuInfo</span>: <span class=\"hljs-title class_\">FeishuUserInfo</span> = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getFeishuTokenByApplications</span>(\n      code,\n    );\n\n    <span class=\"hljs-comment\">// 将飞书的用户信息同步到数据库</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">user</span>: <span class=\"hljs-title class_\">User</span> = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userService</span>.<span class=\"hljs-title function_\">createOrUpdateByFeishu</span>(\n      feishuInfo,\n    );\n\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">userId</span>: user.<span class=\"hljs-property\">id</span>,\n      <span class=\"hljs-attr\">username</span>: user.<span class=\"hljs-property\">username</span>,\n      <span class=\"hljs-attr\">name</span>: user.<span class=\"hljs-property\">name</span>,\n      <span class=\"hljs-attr\">email</span>: user.<span class=\"hljs-property\">email</span>,\n      <span class=\"hljs-attr\">feishuAccessToken</span>: feishuInfo.<span class=\"hljs-property\">accessToken</span>,\n      <span class=\"hljs-attr\">feishuUserId</span>: feishuInfo.<span class=\"hljs-property\">feishuUserId</span>,\n    };\n  }\n\n<span class=\"hljs-comment\">// jwt 登录</span>\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">login</span>(<span class=\"hljs-params\">user: Payload</span>) {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">access_token</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">jwtService</span>.<span class=\"hljs-title function_\">sign</span>(user),\n    };\n  }\n\n<span class=\"hljs-comment\">// 获取飞书用户信息</span>\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getFeishuTokenByApplications</span>(<span class=\"hljs-params\">code: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">feishuService</span>.<span class=\"hljs-title function_\">getUserToken</span>(code);\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">feishuInfo</span>: <span class=\"hljs-title class_\">FeishuUserInfo</span> = {\n      <span class=\"hljs-attr\">accessToken</span>: data.<span class=\"hljs-property\">access_token</span>,\n      <span class=\"hljs-attr\">avatarBig</span>: data.<span class=\"hljs-property\">avatar_big</span>,\n      <span class=\"hljs-attr\">avatarMiddle</span>: data.<span class=\"hljs-property\">avatar_middle</span>,\n      <span class=\"hljs-attr\">avatarThumb</span>: data.<span class=\"hljs-property\">avatar_thumb</span>,\n      <span class=\"hljs-attr\">avatarUrl</span>: data.<span class=\"hljs-property\">avatar_url</span>,\n      <span class=\"hljs-attr\">email</span>: data.<span class=\"hljs-property\">email</span>,\n      <span class=\"hljs-attr\">enName</span>: data.<span class=\"hljs-property\">en_name</span>,\n      <span class=\"hljs-attr\">mobile</span>: data.<span class=\"hljs-property\">mobile</span>,\n      <span class=\"hljs-attr\">name</span>: data.<span class=\"hljs-property\">name</span>,\n      <span class=\"hljs-attr\">feishuUnionId</span>: data.<span class=\"hljs-property\">union_id</span>,\n      <span class=\"hljs-attr\">feishuUserId</span>: data.<span class=\"hljs-property\">user_id</span>,\n    };\n    <span class=\"hljs-keyword\">return</span> feishuInfo;\n  }\n}\n</code></pre>\n<p>上述代码中分为两个模块，一个是获取飞书用户信息以及对获取到的用户信息本地落库，另外一个是调用 <code>jwtService</code> 进行登录。</p>\n<p><strong>第二步</strong>：新建 <code>/src/auth/strategies</code> 目录，添加 <code>feishu-auth.strategy.ts</code> 与 <code>jwt-auth.strategy.ts</code> 两个文件：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-comment\">// feishu-auth.strategy.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">PassportStrategy</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/passport'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span>, <span class=\"hljs-title class_\">Query</span>, <span class=\"hljs-title class_\">UnauthorizedException</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../auth.service'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Strategy</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'passport-custom'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FastifyRequest</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'fastify'</span>\n\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FeishuStrategy</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">PassportStrategy</span>(<span class=\"hljs-title class_\">Strategy</span>, <span class=\"hljs-string\">'feishu'</span>) {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> authService: AuthService</span>) {\n    <span class=\"hljs-variable language_\">super</span>();\n  }\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">validate</span>(<span class=\"hljs-attr\">req</span>: <span class=\"hljs-title class_\">FastifyRequest</span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">Payload</span>&gt; {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">q</span>: <span class=\"hljs-built_in\">any</span> = req.<span class=\"hljs-property\">query</span>;\n\n    <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">authService</span>.<span class=\"hljs-title function_\">validateFeishuUser</span>(q.<span class=\"hljs-property\">code</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">string</span>);\n\n    <span class=\"hljs-keyword\">if</span> (!user) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UnauthorizedException</span>();\n    }\n\n    <span class=\"hljs-keyword\">return</span> user;\n  }\n}\n</code></pre>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-comment\">// jwt-auth.strategy.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">PassportStrategy</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/passport'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Strategy</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'passport-jwt'</span>;\n<span class=\"hljs-keyword\">import</span> { jwtConstants } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../constants'</span>;\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FastifyRequest</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"fastify\"</span>;\n\n<span class=\"hljs-keyword\">const</span> cookieExtractor = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req: FastifyRequest</span>) {\n  <span class=\"hljs-keyword\">let</span> token = <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-keyword\">if</span> (req &amp;&amp; req.<span class=\"hljs-property\">cookies</span>) {\n    token = req.<span class=\"hljs-property\">cookies</span>[<span class=\"hljs-string\">'jwt'</span>];\n  }\n  <span class=\"hljs-keyword\">return</span> token;\n};\n\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtStrategy</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">PassportStrategy</span>(<span class=\"hljs-title class_\">Strategy</span>) {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">super</span>({\n      <span class=\"hljs-attr\">jwtFromRequest</span>: cookieExtractor,\n      <span class=\"hljs-attr\">ignoreExpiration</span>: jwtConstants.<span class=\"hljs-property\">ignoreExpiration</span>,\n      <span class=\"hljs-attr\">secretOrKey</span>: jwtConstants.<span class=\"hljs-property\">secret</span>,\n    });\n  }\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">validate</span>(<span class=\"hljs-attr\">payload</span>: <span class=\"hljs-title class_\">Payload</span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">Payload</span>&gt; {\n    <span class=\"hljs-keyword\">return</span> { ...payload };\n  }\n}\n</code></pre>\n<p><code>FeishuStrategy</code> 根据 <code>passport</code> 提供的方法，自定义了飞书的专属策略，调用 <code>authService</code> 中的 <code>validateFeishuUser</code> 方法，从飞书获取对应的用户信息。<code>JwtStrategy</code> 则是使用 <code>passport-jwt</code>拓展的功能，对 <code>cookie</code> 做了拦截、解密等功能。</p>\n<p>注意无论是使用 <code>passport</code> 自带的三方功能或者自行拓展 <code>passport</code>，都需要对 <code>validate</code> 方法进行重写以便实现自己的业务逻辑。</p>\n<p><strong>第三步</strong>：新建 <code>/src/auth/guards</code> 目录，添加 <code>feishu-auth.guard.ts</code> 与 <code>jwt-auth.guard.ts</code> 两个文件：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-comment\">// feishu-auth.guard.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthGuard</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/passport'</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FeishuAuthGuard</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">AuthGuard</span>(<span class=\"hljs-string\">'feishu'</span>) { }\n</code></pre>\n<p>这里要<strong>注意</strong>，因为 <code>FeishuAuthGuard</code> 已经继承了通用的 <code>AuthGuard</code>，验证逻辑在 <code>FeishuStrategy</code> 实现了，所以并没有额外的代码出现，如果有其他的逻辑则需要对不同的方法进行重写已完成需求。</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-comment\">// jwt-auth.guard.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ExecutionContext</span>, <span class=\"hljs-title class_\">Injectable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Reflector</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthGuard</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/passport'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">BUSINESS_ERROR_CODE</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/common/exceptions/business.error.codes'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BusinessException</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/common/exceptions/business.exception'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">IS_PUBLIC_KEY</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../constants'</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtAuthGuard</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">AuthGuard</span>(<span class=\"hljs-string\">'jwt'</span>) {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> reflector: Reflector</span>) {\n    <span class=\"hljs-variable language_\">super</span>();\n  }\n\n  <span class=\"hljs-title function_\">canActivate</span>(<span class=\"hljs-params\">context: ExecutionContext</span>) {\n    <span class=\"hljs-keyword\">const</span> loginAuth = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">reflector</span>.<span class=\"hljs-property\">getAllAndOverride</span>&lt;<span class=\"hljs-built_in\">boolean</span>&gt;(<span class=\"hljs-variable constant_\">IS_PUBLIC_KEY</span>, [\n      context.<span class=\"hljs-title function_\">getHandler</span>(),\n      context.<span class=\"hljs-title function_\">getClass</span>(),\n    ]);\n\n    <span class=\"hljs-keyword\">if</span> (loginAuth) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">canActivate</span>(context);\n  }\n\n  <span class=\"hljs-title function_\">handleRequest</span>(<span class=\"hljs-params\">err, user, info</span>) {\n    <span class=\"hljs-keyword\">if</span> (err || !user) {\n      <span class=\"hljs-keyword\">throw</span> (\n        err ||\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>({\n          <span class=\"hljs-attr\">code</span>: <span class=\"hljs-variable constant_\">BUSINESS_ERROR_CODE</span>.<span class=\"hljs-property\">TOKEN_INVALID</span>,\n          <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'token 已失效'</span>,\n        })\n      );\n    }\n    <span class=\"hljs-keyword\">return</span> user;\n  }\n}\n</code></pre>\n<p><code>JwtAuthGuard</code> 模块实现了 <code>canActivate</code> 与 <code>handleRequest</code> 的重写，分别是针对于自定义逻辑与异常捕获的处理。</p>\n<p>因为我们使用了 <code>JwtAuthGuard</code> 作为全局验证，但有的时候也是需要针对于部分接口开启白名单。例如，登录接口就需要开启白名单，毕竟把登录接口也拦截了，整个项目就无法正常使用了。</p>\n<p><strong>第四步</strong>：在<strong>第二步</strong>中，<code>FeishuStrategy</code> 将获取到的飞书用户信息返回出来，被路由守卫挂载到 <code>request</code> 上，用户信息里面的内容会在后期频繁使用到，所以我们自定义一个用户的装饰器 <code>PayloadUser</code>，方便后期使用。</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">PayloadUser</span> = <span class=\"hljs-title function_\">createParamDecorator</span>(\n  (data, <span class=\"hljs-attr\">ctx</span>: <span class=\"hljs-title class_\">ExecutionContext</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">Payload</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> request = ctx.<span class=\"hljs-title function_\">switchToHttp</span>().<span class=\"hljs-title function_\">getRequest</span>();\n    <span class=\"hljs-keyword\">return</span> request.<span class=\"hljs-property\">user</span>;\n  },\n);\n</code></pre>\n<p><strong>第五步</strong>：新建 <code>src/auth/auth.controller.ts</code>。</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">Controller</span>,\n  <span class=\"hljs-title class_\">UseGuards</span>,\n  <span class=\"hljs-title class_\">Res</span>,\n  <span class=\"hljs-title class_\">Get</span>,\n  <span class=\"hljs-title class_\">Query</span>,\n  <span class=\"hljs-variable constant_\">VERSION_NEUTRAL</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FeishuAuthGuard</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./guards/feishu-auth.guard'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./auth.service'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ApiOperation</span>, <span class=\"hljs-title class_\">ApiTags</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/swagger'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">GetTokenByApplications</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./auth.dto'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Public</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./constants'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">PayloadUser</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/helper'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FastifyReply</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'fastify'</span>\n\n<span class=\"hljs-meta\">@ApiTags</span>(<span class=\"hljs-string\">'用户认证'</span>)\n<span class=\"hljs-meta\">@Controller</span>({\n  <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'auth'</span>,\n  <span class=\"hljs-attr\">version</span>: [<span class=\"hljs-variable constant_\">VERSION_NEUTRAL</span>]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AuthController</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-keyword\">private</span> authService: AuthService,\n  </span>) { }\n\n  <span class=\"hljs-meta\">@ApiOperation</span>({\n    <span class=\"hljs-attr\">summary</span>: <span class=\"hljs-string\">'飞书 Auth2 授权登录'</span>,\n    <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">'通过 code 获取`access_token`https://open.feishu.cn/open-apis/authen/v1/index?app_id=cli_xxxxxx&amp;redirect_uri=http%3A%2F%2F127.0.0.1%3A8080%2Fauth'</span>,\n  })\n  <span class=\"hljs-meta\">@UseGuards</span>(<span class=\"hljs-title class_\">FeishuAuthGuard</span>)\n  <span class=\"hljs-meta\">@Public</span>()\n  <span class=\"hljs-meta\">@Get</span>(<span class=\"hljs-string\">'/feishu/auth2'</span>)\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getFeishuTokenByApplications</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-meta\">@PayloadUser</span>() user: Payload,\n    <span class=\"hljs-meta\">@Res</span>({ passthrough: <span class=\"hljs-literal\">true</span> }) response: FastifyReply,\n    <span class=\"hljs-meta\">@Query</span>() query: GetTokenByApplications,\n  </span>) {\n    <span class=\"hljs-keyword\">const</span> { access_token } = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">authService</span>.<span class=\"hljs-title function_\">login</span>(user);\n    response.<span class=\"hljs-title function_\">setCookie</span>(<span class=\"hljs-string\">'jwt'</span>, access_token, {\n      <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/'</span>,\n    });\n    <span class=\"hljs-keyword\">return</span> access_token\n  }\n\n  <span class=\"hljs-meta\">@ApiOperation</span>({\n    <span class=\"hljs-attr\">summary</span>: <span class=\"hljs-string\">'解析 token'</span>,\n    <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">'解析 token 信息'</span>,\n  })\n  <span class=\"hljs-meta\">@Get</span>(<span class=\"hljs-string\">'/token/info'</span>)\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getTokenInfo</span>(<span class=\"hljs-params\"><span class=\"hljs-meta\">@PayloadUser</span>() user: Payload</span>) {\n    <span class=\"hljs-keyword\">return</span> user;\n  }\n}\n</code></pre>\n<p><code>/src/helper/index.ts</code> 的内容如下：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { createParamDecorator, <span class=\"hljs-title class_\">ExecutionContext</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">PayloadUser</span> = <span class=\"hljs-title function_\">createParamDecorator</span>(\n  (data, <span class=\"hljs-attr\">ctx</span>: <span class=\"hljs-title class_\">ExecutionContext</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">Payload</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> request = ctx.<span class=\"hljs-title function_\">switchToHttp</span>().<span class=\"hljs-title function_\">getRequest</span>();\n    <span class=\"hljs-keyword\">return</span> request.<span class=\"hljs-property\">user</span>;\n  },\n);\n</code></pre>\n<p>由于 <code>Payload</code> 这种类型的申明会频繁使用到，所以可以创建全局类型申明文件来使用，新建 <code>types/globle.d.ts</code> 文件，根据自己的需求定制即可:</p>\n<pre><code class=\"hljs language-ini\" lang=\"ini\">declare type <span class=\"hljs-attr\">Payload</span> = {\n  status?: number<span class=\"hljs-comment\">;</span>\n  userId: number<span class=\"hljs-comment\">;</span>\n  username: string<span class=\"hljs-comment\">;</span>\n  name: string<span class=\"hljs-comment\">;</span>\n  email: string<span class=\"hljs-comment\">;</span>\n  feishuAccessToken: string<span class=\"hljs-comment\">;</span>\n  feishuUserId: string<span class=\"hljs-comment\">;</span>\n  department?: string<span class=\"hljs-comment\">;</span>\n  departmentId?: string<span class=\"hljs-comment\">;</span>\n}<span class=\"hljs-comment\">;</span>\n</code></pre>\n<p>在 <code>getFeishuTokenByApplications</code> 方法中我们使用了 <code>@UseGuards(FeishuAuthGuard)</code> 与 <code>@Public()</code> 两个装饰器，分别是飞书应用授权拦截与开启接口白名单。</p>\n<p>在经过了 <code>@UseGuards(FeishuAuthGuard)</code> 之后，可以使用  <code>@PayloadUser</code> 获取到的飞书用户信息，再将用户信息进行 <code>JWT</code> 注册。</p>\n<p><strong>第六步</strong>：新建 <code>/src/auth/auth.module.ts</code>。</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Module</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'src/user/user.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./auth.service'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">JwtStrategy</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./strategies/jwt-auth.strategy'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">PassportModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/passport'</span>;\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">JwtModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/jwt'</span>;\n<span class=\"hljs-keyword\">import</span> { jwtConstants } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./constants'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthController</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./auth.controller'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FeishuStrategy</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./strategies/feishu-auth.strategy'</span>;\n\n<span class=\"hljs-meta\">@Module</span>({\n  <span class=\"hljs-attr\">imports</span>: [\n    <span class=\"hljs-title class_\">UserModule</span>,\n    <span class=\"hljs-title class_\">PassportModule</span>,\n    <span class=\"hljs-title class_\">JwtModule</span>.<span class=\"hljs-title function_\">register</span>({\n      <span class=\"hljs-attr\">secret</span>: jwtConstants.<span class=\"hljs-property\">secret</span>,\n      <span class=\"hljs-attr\">signOptions</span>: { <span class=\"hljs-attr\">expiresIn</span>: jwtConstants.<span class=\"hljs-property\">expiresIn</span> },\n    }),\n  ],\n  <span class=\"hljs-attr\">controllers</span>: [<span class=\"hljs-title class_\">AuthController</span>],\n  <span class=\"hljs-attr\">providers</span>: [<span class=\"hljs-title class_\">AuthService</span>, <span class=\"hljs-title class_\">JwtStrategy</span>, <span class=\"hljs-title class_\">FeishuStrategy</span>],\n  <span class=\"hljs-attr\">exports</span>: [<span class=\"hljs-title class_\">AuthService</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AuthModule</span> { }\n</code></pre>\n<p>将 <code>JwtModule</code> 在 <code>AuthModule</code> 中注册，并将其他的 <code>Controller</code>、<code>Services</code> 等都导入，最后记得将 <code>AuthModule</code> 导入 <code>app.module.ts</code>：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">CacheModule</span>, <span class=\"hljs-title class_\">Module</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./user/user.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ConfigModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/config'</span>;\n<span class=\"hljs-keyword\">import</span> { getConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./utils'</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> redisStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'cache-manager-redis-store'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">APP_GUARD</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">JwtAuthGuard</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./auth/guards/jwt-auth.guard'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./auth/auth.module'</span>;\n\n<span class=\"hljs-meta\">@Module</span>({\n  <span class=\"hljs-attr\">imports</span>: [\n    <span class=\"hljs-title class_\">CacheModule</span>.<span class=\"hljs-title function_\">register</span>({\n      <span class=\"hljs-attr\">isGlobal</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">store</span>: redisStore,\n      <span class=\"hljs-attr\">host</span>: <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-string\">'REDIS_CONFIG'</span>).<span class=\"hljs-property\">host</span>,\n      <span class=\"hljs-attr\">port</span>: <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-string\">'REDIS_CONFIG'</span>).<span class=\"hljs-property\">port</span>,\n      <span class=\"hljs-attr\">auth_pass</span>: <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-string\">'REDIS_CONFIG'</span>).<span class=\"hljs-property\">auth</span>,\n      <span class=\"hljs-attr\">db</span>: <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-string\">'REDIS_CONFIG'</span>).<span class=\"hljs-property\">db</span>\n    }),\n    <span class=\"hljs-title class_\">ConfigModule</span>.<span class=\"hljs-title function_\">forRoot</span>({\n      <span class=\"hljs-attr\">ignoreEnvFile</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">isGlobal</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">load</span>: [getConfig]\n    }),\n    <span class=\"hljs-title class_\">UserModule</span>,\n    <span class=\"hljs-title class_\">AuthModule</span>\n  ],\n  <span class=\"hljs-attr\">controllers</span>: [],\n  <span class=\"hljs-attr\">providers</span>: [\n    {\n      <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-variable constant_\">APP_GUARD</span>,\n      <span class=\"hljs-attr\">useClass</span>: <span class=\"hljs-title class_\">JwtAuthGuard</span>,\n    },\n  ],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> { }\n</code></pre>\n<p><code>/src/auth/constants.ts</code> 的内容如下：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">SetMetadata</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> jwtConstants = {\n  <span class=\"hljs-attr\">secret</span>: <span class=\"hljs-string\">'yyds'</span>, <span class=\"hljs-comment\">// 秘钥，不对外公开。</span>\n  <span class=\"hljs-attr\">expiresIn</span>: <span class=\"hljs-string\">'15s'</span>, <span class=\"hljs-comment\">// 时效时长</span>\n  <span class=\"hljs-attr\">ignoreExpiration</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 是否忽略 token 时效</span>\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">IS_PUBLIC_KEY</span> = <span class=\"hljs-string\">'isPublic'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Public</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-title class_\">SetMetadata</span>(<span class=\"hljs-variable constant_\">IS_PUBLIC_KEY</span>, <span class=\"hljs-literal\">true</span>);\n</code></pre>\n<p><strong>第七步</strong>：修改 <code>main.ts</code> 注册 <code>@fastify/cookie</code></p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\">import { ValidationPipe, VersioningType, VERSION_NEUTRAL } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from '@nestjs/platform-fastify';\nimport fastify from 'fastify';\nimport { AppModule } from './app.module';\nimport { AllExceptionsFilter } from './common/exceptions/base.exception.filter';\nimport { HttpExceptionFilter } from './common/exceptions/http.exception.filter';\nimport { TransformInterceptor } from './common/interceptors/transform.interceptor';\nimport { FastifyLogger } from './common/logger';\nimport { generateDocument } from './doc';\n<span class=\"hljs-addition\">+import fastifyCookie from '@fastify/cookie';</span>\n\ndeclare const module: any;\n\nasync function bootstrap() {\n\n  const fastifyInstance = fastify({\n    logger: FastifyLogger,\n  })\n\n  const app = await NestFactory.create&lt;NestFastifyApplication&gt;(\n    AppModule,\n    new FastifyAdapter(fastifyInstance)\n  );\n\n<span class=\"hljs-addition\">+  app.register(fastifyCookie, {</span>\n<span class=\"hljs-addition\">+    secret: 'my-secret', // for cookies signature</span>\n<span class=\"hljs-addition\">+  });</span>\n\n  // 统一响应体格式\n  app.useGlobalInterceptors(new TransformInterceptor());\n\n  // 异常过滤器\n  app.useGlobalFilters(new AllExceptionsFilter(), new HttpExceptionFilter());\n\n  // 接口版本化管理\n  app.enableVersioning({\n    defaultVersion: [VERSION_NEUTRAL, '1', '2'],\n    type: VersioningType.URI,\n  });\n\n  // 启动全局字段校验，保证请求接口字段校验正确。\n  app.useGlobalPipes(new ValidationPipe());\n\n  // 创建文档\n  generateDocument(app)\n\n  // 添加热更新\n  if (module.hot) {\n    module.hot.accept();\n    module.hot.dispose(() =&gt; app.close());\n  }\n\n  await app.listen(3000);\n}\nbootstrap();\n</code></pre>\n<p>将飞书应用对接中获取的临时登录凭证填入 <code>Swagger</code> 测试接口中执行，如下图所示，<code>JWT Token</code> 已经正常返回了，并且被 <code>NestJS</code> 后端注入到 <code>cookie</code> 中：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3c0c63fde7340768c588847f4e3e0d9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p><strong>第八步</strong>：一般来说，登录权限需要全局开启，只有少部分的接口通过白名单开放给外部使用，所以需要将 <code>JWT</code> 的自定义路由挂载到全局，修改 <code>app.module.ts</code>，添加全局 <code>APP_GUARD</code> 模块。</p>\n<pre><code class=\"hljs language-js\" lang=\"js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">APP_GUARD</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/core'</span>;\n\n@<span class=\"hljs-title class_\">Module</span>({\n  <span class=\"hljs-attr\">imports</span>: [\n    <span class=\"hljs-title class_\">CacheModule</span>.<span class=\"hljs-title function_\">register</span>({\n      <span class=\"hljs-attr\">isGlobal</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">store</span>: redisStore,\n      <span class=\"hljs-attr\">host</span>: <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-string\">'REDIS_CONFIG'</span>).<span class=\"hljs-property\">host</span>,\n      <span class=\"hljs-attr\">port</span>: <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-string\">'REDIS_CONFIG'</span>).<span class=\"hljs-property\">port</span>,\n      <span class=\"hljs-attr\">auth_pass</span>: <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-string\">'REDIS_CONFIG'</span>).<span class=\"hljs-property\">auth</span>,\n      <span class=\"hljs-attr\">db</span>: <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-string\">'REDIS_CONFIG'</span>).<span class=\"hljs-property\">db</span>\n    }),\n    <span class=\"hljs-title class_\">ConfigModule</span>.<span class=\"hljs-title function_\">forRoot</span>({\n      <span class=\"hljs-attr\">ignoreEnvFile</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">isGlobal</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">load</span>: [getConfig]\n    }),\n    <span class=\"hljs-title class_\">AuthModule</span>,\n    <span class=\"hljs-title class_\">PageModule</span>\n  ],\n  <span class=\"hljs-attr\">controllers</span>: [],\n  <span class=\"hljs-attr\">providers</span>: [\n    {\n      <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-variable constant_\">APP_GUARD</span>,\n      <span class=\"hljs-attr\">useClass</span>: <span class=\"hljs-title class_\">JwtAuthGuard</span>,\n    },\n  ],\n})\n</code></pre>\n<p>在正常写入 <code>JWT Token</code> 以及添加全局 <code>JWT</code> 路由拦截后，可以通过 <code>Swagger</code> 中的 <code>/token/info</code> 接口来测试是否能正常解析 <code>token</code> 的信息，如果一切正常的话，则出现如下图界面：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b4c6feb3cb24695827ad5b0bd64ecc7~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h2 data-id=\"heading-4\">写在最后</h2>\n<p>本章示例代码以上传 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway%2Ftree%2Fdemo%2Fv9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway/tree/demo/v9\" ref=\"nofollow noopener noreferrer\">demo/v9</a>，文中示例已经是大部分的完整代码了，除了 <code>User</code> 模块的实体类可以根据自己的类型来处理，如若需要的同学可以拉取代码对比。</p>\n<p>本章主要介绍了如何利用飞书的三方接口以及 <code>NestJS</code> 提供的 <code>Guards</code> 能力，使用 <code>Passport</code> 与 <code>JWT</code> 来完成第三方应用授权的功能，减少用户的使用成本。</p>\n<p>其中，我们学习了 <code>Guards</code> 模块、<code>Passport</code> 以及 <code>JWT</code> 的相关知识，有兴趣的同学可以与其他的框架如 <code>Egg</code> 的接入做一个对比，<strong>设计理念</strong>与<strong>代码编写</strong>的不同可以从登录功能的实现中深刻体会到。</p>\n<p>另外，本章并未过多的介绍 <code>Guards</code> 模块，<code>NestJS</code> 源文档对此的描述已经足够完备，想要了解更多的细节或者设计可以去源文档直接查阅，作为实战类型的小册，本章之后的主体内容将聚焦在如何完成业务开发上，不会再针对某一个模块功能做更详细的解释。</p>\n<p>如果你有什么疑问，欢迎在评论区提出或者加群沟通。 👏</p></div>"
    },
    {
        "name": "9\n🏆 学习里程碑：基础篇完结\n学习时长: 7分12秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">学习里程碑 | 🏆 - 基础篇完结</h2>\n<p>首先，恭喜你能从第一章坚持学习到这里。这一章，我们就一起来回顾一下我们都学到了什么。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/437c5900fd524160bc6cf673bcb4396c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>对照上图的实战路径，我们已经一起走过了<strong>需求分析</strong> -&gt; <strong>技术选型</strong> -&gt; <strong>脚手架搭建</strong>三个环节，还完成了少量的<strong>需求开发</strong>任务。</p>\n<h4 data-id=\"heading-1\">需求分析</h4>\n<p>从应用场景到团队需求，我们进行了一轮对网关系统必要性的讨论，并将网关系统拆分为三个模块：<strong>网关基础</strong>、<strong>物料</strong>、<strong>用户</strong>三个服务，分别执行代理、鉴权、静态资源管理等功能。</p>\n<h4 data-id=\"heading-2\">技术选项</h4>\n<p>针对于需求分析得出来的结果，最终我们敲定了开发框架以及数据库的选型。对于项目开发的技术选型，从团队业务的角度出发，个人有下述一些想法：</p>\n<ol>\n<li>如果是稳定类型、或者团队主要的项目，切记不要强行尝试新的技术、框架，试错成本太高，一般的团队承受不起；</li>\n<li>不到万不得不要自己造轮子，即使要造轮子也可以使用业务成熟的框架进行二开；</li>\n<li>如果团队不大的情况，项目的基建要尽早统一，可以减少对接成本；</li>\n<li>资源富裕的情况下，边缘类型的新项目、内部项目等尽可能尝试新的技术，技术团队始终要走在技术的前沿，有机会可以以技术驱动业务。</li>\n</ol>\n<h4 data-id=\"heading-3\">脚手架搭建</h4>\n<p>在后续章节中围绕着开发脚手架搭建，我们一起学习了 <code>NestJS CLI</code> 的使用、<code>Controller</code>、<code>Service</code>、<code>Provide</code>、<code>Module</code> 等基础知识，同时对接了<strong>飞书应用</strong>、<strong>数据库</strong>、<strong>日志</strong>等小的需求开发。</p>\n<p>几乎每一章的代码与步骤都尽可能详细地写在文章里面，包括预期的结果等。力争每一位前端同学都能够从 0 到 1 完成上述到所有内容，<strong>如果出现内容描述不清晰或者步骤缺失的情况，请及时联系我补充修改</strong>。</p>\n<h2 data-id=\"heading-4\">仓库地址</h2>\n<p><a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway\" ref=\"nofollow noopener noreferrer\">github.com/boty-design…</a></p>\n<p>上述是基础篇中代码的仓库地址，但并不包含<strong>配置文件（数据库、token这种都属于隐私性质的数据）</strong>，需要各位同学自己添加，<strong>如果 <code>demo</code> 跑不起来，加群@我解决，同时不到万不得已，建议还是自己从头撸出来</strong>。</p>\n<p>下面是一份全量的 <code>example.yaml</code> 配置，由需要的同学自取：</p>\n<pre><code class=\"hljs language-yml\" lang=\"yml\"><span class=\"hljs-attr\">MONGODB_CONFIG:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"fast_gateway_test\"</span>\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">mongodb</span>\n  <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">\"mongodb://127.0.0.1:27017\"</span>\n  <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">\"root\"</span>\n  <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">\"root\"</span>\n  <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">\"fast_gateway_test\"</span>\n  <span class=\"hljs-attr\">entities:</span> <span class=\"hljs-string\">\"mongo\"</span>\n  <span class=\"hljs-attr\">logging:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">synchronize:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">MYSQL_CONFIG:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"user-test\"</span>\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">\"mysql\"</span>\n  <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">\"127.0.0.1\"</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">3306</span>\n  <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">\"yanxiaofan\"</span>\n  <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">\"123456\"</span>\n  <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">\"user-test\"</span>\n  <span class=\"hljs-attr\">entities:</span> <span class=\"hljs-string\">\"mysql\"</span>\n  <span class=\"hljs-attr\">synchronize:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">REDIS_CONFIG:</span>\n  <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">\"127.0.0.1\"</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">6379</span>\n  <span class=\"hljs-attr\">auth:</span> <span class=\"hljs-string\">\"yanxiaofan\"</span>\n  <span class=\"hljs-attr\">db:</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">TEST_VALUE:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"cookie\"</span>\n<span class=\"hljs-attr\">FEISHU_CONFIG:</span>\n  <span class=\"hljs-attr\">FEISHU_URL:</span> <span class=\"hljs-string\">https://open.feishu.cn/open-apis</span>\n  <span class=\"hljs-attr\">FEISHU_API_HOST:</span> <span class=\"hljs-string\">https://open.feishu.cn</span>\n  <span class=\"hljs-attr\">FEISHU_APP_ID:</span> <span class=\"hljs-string\">cli_xxxxxxx</span>\n  <span class=\"hljs-attr\">FEISHU_APP_SECRET:</span> <span class=\"hljs-string\">xxxxxxx</span>\n<span class=\"hljs-attr\">APP_TOKEN_CACHE_KEY:</span> <span class=\"hljs-string\">APP_TOKEN_CACHE_KEY</span>\n</code></pre>\n<h2 data-id=\"heading-5\">Warring</h2>\n<p>小册于 <code>2022/07/24</code> 进行了一个小型的版本重构，按照每一章的进度添加了最小示例，所有的步骤代码都已上传 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway\" ref=\"nofollow noopener noreferrer\">GitHub</a> 中，按照 <code>demo/v*</code> 的分支规则提交。</p>\n<p>但建议同学们在学习的时候，尽量自己跟着小册的内容再配合阅读 <code>NestJS</code> 的官网 <code>API</code> 来进行，小册是提供一个快捷学习的途径，通过给予一个最终的目标，分阶段的让大家来学习，而不是单纯完成任务。我甚至可以写的再更详细一点，但如果直接复制、参考 <code>Demo</code> 来完成目标，最终预期的学习效果并不会非常理想。</p>\n<p><strong>能够完完整整自己敲出来的代码才印象才是最深刻的，而在这过程中对 <code>NestJS</code> 开发的熟练度与理解包括排查错误与阅读文档的能力才会有很高的提升</strong>。</p>\n<h2 data-id=\"heading-6\">END</h2>\n<p>至此上半场的内容已经顺利完成，此时你应该依据具备了使用 <code>NestJS</code> 开发服务端的常规能力，接下来我们将进入下半场的内容 - <strong>项目实战</strong>。</p>\n<p>在项目实战中，对于代码的内容会逐步减少，只有部分关键的代码会在文章中展示，原因有 2 个：</p>\n<ol>\n<li>大部分的业务开发代码价值都不会很高；</li>\n<li>每个人的编码习惯不一样，对功能模块的划分、业务的封装都有自己的见解。</li>\n</ol>\n<p>所以实战篇的内容主要围绕着架构设计展开，但是最后依然会提供一份简单的实现代码作为参考，所以并不用担心没有参考的代码。</p>\n<p>如果你有什么疑问，欢迎在评论区提出或者加群沟通。 👏</p></div>"
    },
    {
        "name": "10\nFAQ：学习篇\n学习时长: 5分6秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>本章将会记录微信群或者私人与我沟通所有学习篇相关的问题。</p>\n<h2 data-id=\"heading-1\">飞书应用相关问题</h2>\n<p>鉴于很多同学反馈对于飞书应用配置比较繁琐，为了方便协助大家完成飞书的流程，现在可以扫下面的二维码统一加入我创建的飞书组织：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/654f6d0dca464a7c9ae2b1356b636af1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"飞书20221011-223636.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p><strong>飞书应用的秘钥如下，大家可以直接使用，加入飞书组织后需要的话可以联系我配置邮箱或者其他的数据，如果自己创建应用也可以联系我帮忙调整权限之类的</strong>：</p>\n<pre><code class=\"hljs language-yaml\" lang=\"yaml\"><span class=\"hljs-attr\">FEISHU_CONFIG:</span>\n  <span class=\"hljs-attr\">FEISHU_URL:</span> <span class=\"hljs-string\">https://open.feishu.cn/open-apis</span>\n  <span class=\"hljs-attr\">FEISHU_API_HOST:</span> <span class=\"hljs-string\">https://open.feishu.cn</span>\n  <span class=\"hljs-attr\">FEISHU_APP_ID:</span> <span class=\"hljs-string\">cli_a2ed5e7be4f9500d</span>\n  <span class=\"hljs-attr\">FEISHU_APP_SECRET:</span> <span class=\"hljs-string\">HtMNYItwGbdp6yJv4o2j1fLrplwl6Mem</span>\n</code></pre>\n<h2 data-id=\"heading-2\">v9 版本升级方案</h2>\n<p><code>NestJS</code> 于 <strong>7</strong> 月 <strong>8</strong> 号推送了 <strong>v9</strong> 版本，所以有不少同学在跟着教程安装的过程中出现了依赖问题。</p>\n<p>本着买新不买旧的原则，小册也立马出更新升级 <strong>v9</strong> 的方案，如果你的项目配置出现问题可以参考如下的升级方案。</p>\n<ol>\n<li>升级所有相关的基础包到 <strong>v9</strong> 版本</li>\n</ol>\n<p>如果直接使用最新的 <strong>CLI</strong> 工具应该不需要升级基础包，如果不是的话，至少需要更新如下两个基础包的版本</p>\n<pre><code class=\"hljs language-shell\" lang=\"shell\">yarn add @nestjs/core@9.0.1\nyarn add @nestjs/platform-fastify@9.0.1\n</code></pre>\n<ol start=\"2\">\n<li>\n<p>替换 <code>fastify</code> 相关依赖，之前所有 <code>fastify-</code> 规则的依赖都替换为 <code>@fastify/</code> 类型，例如 <code>fastify-cookie</code> 替换成 <code>@fastify/cookie</code></p>\n</li>\n<li>\n<p>新版将只需要安装 <code>@nestjs/swagger</code> 即可，不在需要额外安装 <code>fastify-swagger</code></p>\n</li>\n<li>\n<p>需要额外安装 <code>@fastify/static</code></p>\n</li>\n<li>\n<p><code>redis</code> 模块采用 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fluin%2Fioredis\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/luin/ioredis\" ref=\"nofollow noopener noreferrer\">ioredis</a> 替换之前的，配置方式略有改变如下所示：</p>\n</li>\n</ol>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">NestFactory</span>.<span class=\"hljs-property\">createMicroservice</span>&lt;<span class=\"hljs-title class_\">MicroserviceOptions</span>&gt;(\n  <span class=\"hljs-title class_\">AppModule</span>,\n  {\n    <span class=\"hljs-attr\">transport</span>: <span class=\"hljs-title class_\">Transport</span>.<span class=\"hljs-property\">REDIS</span>,\n    <span class=\"hljs-attr\">options</span>: {\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">'redis://localhost:6379'</span>,\n    },\n  },\n);\n\n<span class=\"hljs-comment\">// Now</span>\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">NestFactory</span>.<span class=\"hljs-property\">createMicroservice</span>&lt;<span class=\"hljs-title class_\">MicroserviceOptions</span>&gt;(\n  <span class=\"hljs-title class_\">AppModule</span>,\n  {\n    <span class=\"hljs-attr\">transport</span>: <span class=\"hljs-title class_\">Transport</span>.<span class=\"hljs-property\">REDIS</span>,\n    <span class=\"hljs-attr\">options</span>: {\n      <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">'localhost'</span>,\n      <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">6379</span>,\n    },\n  },\n);\n</code></pre>\n<p>整体来说，<strong>v9</strong> 版本的升级除了一些依赖版本有所改变以及加了一些新的特性之外，没有很大的改动，升级过程也非常平滑，所以就不针对之前的文章内容做出更改，而是单独出了一份升级 <strong>v9</strong> 的加餐章节。</p>\n<p>当然你可以继续使用 <strong>v8</strong> 版本开发项目，只要锁定版本就行了，<strong>但我们后续的工程将使用 <strong>v9</strong> 版本开发，保持框架的所有依赖都是最新的</strong>，所以如果你的项目还没有正式投入使用，建议最好跟随一起升级到最新的版本。</p>\n<p>如果你有什么疑问，欢迎在评论区提出或者加群沟通。 👏</p></div>"
    },
    {
        "name": "11\n用户篇：RBAC 权限设计\n学习时长: 11分6秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>从本章开始是一道分水线，在这之前我们一起学习了 <code>NestJS</code> 的基础用法，通过搭建脚手架以及完成一些小需求逐步地熟悉了 <code>NestJS</code> 的开发模式。</p>\n<p>首先，我们一起看一个非常熟悉的场景。张三在页面中点击了删除按钮后，系统在背后做了一些什么样的操作？</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52142b047b764852a160e46821a5cf32~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>一个用户在使用系统做某些操作的时候，系统会去数据库或者其他持久化的地方查询该用户所拥有的权限，然后根据查询出的结果判断此次操作是否正常。</p>\n<p>简单的情况，一张表存储用户的权限，然后直接查询判断即可。但<strong>用户量足够大又或者权限非常多</strong>的话怎么办呢？一个新的系统需要接入用户、权限的时候，又该怎么办？</p>\n<p>带着这些疑问，本章将介绍如何去设计一个<strong>可拓展的</strong>用户权限系统？</p>\n<h2 data-id=\"heading-1\">RBAC 权限设计</h2>\n<h3 data-id=\"heading-2\">什么是 RBAC 模型</h3>\n<p>为了解决前述的问题，我们将引入 <strong>RBAC</strong> 权限管理设计。</p>\n<blockquote>\n<p><strong>RBAC（Role-Based Access Control）</strong> 的三要素即<strong>用户</strong>、<strong>角色</strong>与<strong>权限</strong>。 用户通过赋予的角色，执行角色所拥有的权限。</p>\n</blockquote>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1683434857d14024bf5318a679af4666~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p><strong>RBAC</strong> 引入之后的流程如上图所示，用户在进入系统之后，会先进行角色判断，再根据对应的角色查询所匹配的权限，最后根据返回结果来判断是否可执行。</p>\n<p>直观来说，整个调用的链路被拉长了，直接使用用户与权限的绑定关系，明显速度会更快。</p>\n<p>所以为什么不直接使用<strong>用户 -&gt; 权限</strong>的链路而是采用<strong>用户 -&gt; 角色 -&gt; 权限</strong>的链路呢？</p>\n<p>通过下述的表格数据，我们来对比一下两个方案的差别：</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>方案</th><th>用户量</th><th>权限数</th><th>权限表数据量</th></tr></thead><tbody><tr><td><strong>用户 -&gt; 权限</strong></td><td><strong>1</strong></td><td><strong>10</strong></td><td><strong>10 * 1</strong></td></tr><tr><td><strong>用户 -&gt; 权限</strong></td><td><strong>100，000</strong></td><td><strong>10</strong></td><td><strong>10 * 100，000</strong></td></tr><tr><td><strong>用户 -&gt; 角色 -&gt; 权限</strong></td><td><strong>1</strong></td><td><strong>10</strong></td><td><strong>10 * Role</strong></td></tr><tr><td><strong>用户 -&gt; 角色 -&gt; 权限</strong></td><td><strong>100，000</strong></td><td><strong>10</strong></td><td><strong>10 * Role</strong></td></tr></tbody></table>\n<p>上面的数据可能看得有些懵懂，我们转换文字版本来解释一下：</p>\n<p>如果一个用户拥有 <strong>10</strong> 个权限的话，使用用户权限关联表后，一个用户就会有 <strong>10</strong> 条数据，<strong>10</strong> 万个用户的话就有 <strong>100</strong> 万的数据，代表着当一个用户进入系统之后，我们需要在<strong>百万级别的数据表</strong>中查询对应的权限数据。</p>\n<p>而使用 <strong>RBAC</strong> 之后，当用户进入系统之后，先查询用户对应的角色，再查询角色映射对应的权限表，即便是一个角色对应一个用户，那么查询量也就是在 <strong>10 * 10</strong> ，比直接查询百万数据表的数据量直线下降，如上对比可以看出，使用 <strong>RBAC</strong> 能大量节约查询成本与时间。</p>\n<p>同时一个角色可以挂载多个权限，从实际使用场景、覆盖的范围以及性能优化上都比单纯的<strong>用户-权限</strong>表更高效。</p>\n<h3 data-id=\"heading-3\">RBAC 模型的分类</h3>\n<p><strong>RBAC</strong> 模型可分为 <strong>RBAC0</strong>、<strong>RBAC1</strong>、<strong>RBAC2</strong>、<strong>RBAC3</strong>，其中 <strong>RBAC0</strong> 是基础模型。 <strong>RBAC1</strong>、<strong>RBAC2</strong>、<strong>RBAC3</strong> 都是在 <strong>RBAC0</strong> 模型的基础上升级。</p>\n<h4 data-id=\"heading-4\">RBAC0 模型</h4>\n<p><strong>RBAC0</strong> 即最简单的用户角色权限管理模型：</p>\n<ul>\n<li>用户和角色可以是一对多，一个用户只能赋予一个角色； 一个角色可以关联多个用户</li>\n<li>用户和角色可以是多对多的关系， 一个用户拥有多个角色；一个角色可以关联多个用户</li>\n</ul>\n<p>通常在功能简单，用户人员较少，并且用户岗位很明确，而且用户不会兼任时使用一对多关系；其余情况普遍采用多对多的关系。</p>\n<p>基于此模型设计数据库表如下：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25a84dce643d4a688af1026671814efd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h4 data-id=\"heading-5\">RBAC1 模型</h4>\n<p>基于模型 <strong>RBAC0</strong> 的升级版本，一个角色可以从另一个角色继承许可权，即角色具有上下级的关系。</p>\n<p>一个简单的例子，<strong>GitLab</strong> 中 <strong>master</strong> 与 <strong>dev</strong> 分为两种角色，<strong>matser</strong> 的权限会涵盖 <strong>dev</strong> 所有的权限，也就是 <strong>master</strong> 继承了 <strong>dev</strong> 的权限，同时额外增加了更高级别的权限。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2759d0ce19b04b1498cc8e3ed9e38126~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>角色间的继承关系可分为一般继承关系和受限继承关系：</p>\n<ul>\n<li>一般继承关系允许角色间的多继承，无特殊限制；</li>\n<li>受限继承关系则进一步要求角色继承关系是一个树结构，也就是继承关系受到限制，继承 <strong>A</strong> 类后的角色不再允许继承同级角色 <strong>B</strong> 类，等同于测试与开发的子权限不能互相继承。</li>\n</ul>\n<p>简单的表达关系如下所示：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5772933eb57d47068e6498e0d07a8f25~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h4 data-id=\"heading-6\">RBAC2 模型</h4>\n<p><strong>RBAC2</strong> 模型是在 <strong>RBAC0</strong> 模型基础上解决了角色的授权场景。角色授权分为两类：</p>\n<ul>\n<li>静态职责分离</li>\n<li>动态职责分离</li>\n</ul>\n<p>静态职责分离又具体分为：</p>\n<ol>\n<li>角色互斥 -- 多种角色间不能同时赋予同一个用户，比如 <strong>devops</strong> 中，研发、产品与测试的权限不会相互重复赋予，当然你可以设置一个更高级别的角色权限 <strong>leader</strong> 来同时享用所有权限。</li>\n<li>基数约束 -- 角色至多能赋予 <strong>N</strong> 个用户。</li>\n<li>先决条件角色 -- 授予用户 <strong>B</strong> 角色前提是用户必须已经拥有 <strong>A</strong> 角色，这个在项目管理中比较常见，当你想给你组员分配角色时，你的角色权限理应高于需要分配的角色。</li>\n</ol>\n<p>动态职责分离即运行时通过当前会话确定用户角色。例如以我们的范例飞书来说，在飞书账号中可以有多重公司认证，但登录的时候只能选择确定的一家公司身份才能进入。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a74a10e944e4fd2b21c010a8f6ab83b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h4 data-id=\"heading-7\">RBAC3 模型</h4>\n<p><strong>RBAC3</strong> 模型是目前最全面的权限管理，它是基于 <strong>RBAC0</strong> 的基础上，并将 <strong>RBAC1</strong> 和 <strong>RBAC2</strong> 进行了整合。模型示例如下图所示：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/947ee692cda447269d167c821a07b9e2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h2 data-id=\"heading-8\">进阶 - 用户组</h2>\n<p>当系统用户非常多以及角色种类非常多的情况，为了更方便的管理人员，此时可以引用用户组的概念。</p>\n<p>每一个用户组分配一批用户，再将角色分配到用户组，将用户与角色之间的桥接关系再引入一层用户组，使得用户只与用户组绑定，用户组与角色绑定。当新的用户想要分配权限的时候，可以直接添加到对应的用户组，这样快速开通该用户组的所有权限，再根据需求分配更细节的角色即可。</p>\n<p>这个场景的实例可以参考 <strong>GitLab</strong> 的 <strong>Group</strong> 管理模式。</p>\n<ul>\n<li>用户可以拥有单独的角色权限</li>\n<li>用户分配到用户组就可以自动拥有用户组的角色权限</li>\n</ul>\n<p>这种设计大大减少了数据的冗余性和管理员对权限管理的工作复杂程度。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b7265490e764a49b3a2220e43494c73~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h2 data-id=\"heading-9\">权限的拓展</h2>\n<p>当系统逐渐庞大后，权限也需要更加的粒度细化。对于权限的管理分为功能权限和数据权限：</p>\n<ul>\n<li>功能权限：将系统的可操作性分配给角色，来控制用户的可见性和可编辑性\n<ol>\n<li>读写权限：可见可编辑，</li>\n<li>只读权限：仅可见不可更改</li>\n<li>不可见权限：不可见也没有操作入口</li>\n</ol>\n</li>\n<li>数据权限：数据是多维的、抽象的，主要控制某条数据记录对用户是否可见，结合功能权限可以更灵活的配置业务过程中每一位员工的功能操作权限及数据可见范围\n<ol>\n<li>基础数据：比如只有创建人可编辑，其他人只读</li>\n<li>数据共享：比如部门 <strong>A</strong> 的所有成员均可查看部门 <strong>A</strong> 的全部处理的财务记录。</li>\n</ol>\n</li>\n</ul>\n<p>针对功能权限按功能类型可分为菜单模块、页面元素模块、文件资源模块等。要结合实际业务需要合理划分功能点来控制权限的粒度，将权限拆分到模块可以方便后续的其他类型模块拓展。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b4a90a89e93423187917875ee11c781~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>针对于上述所有的拓展与设计，最终版本的设计如下所示：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/192cff00645e41759d06859323f589d4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h2 data-id=\"heading-10\">项目实战设计</h2>\n<p>真实的项目中，建议按照上述的模式开发，整体功能完整性与拓展性都会比较好，但是对于我们的系统而言，有点重量级，所以并不会完全按照上述的架构设计开发功能。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d24caa0187c544c5933aff6b50af9b8d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>在我们的需求设计中，用户系统需要分别针对两个系统提供鉴权服务，借助用户组的概念，最终用户系统的用户权限模型为下图所示：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ba2555d099b4011bcc9e98d009c024a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<blockquote>\n<p>下面是权限操作界面的网图，给大家做一个参考，实际我们的项目并没有前端的项目开发，只涉及后端开发，如果有需要或者有兴趣可以参考下图自行实现。</p>\n</blockquote>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08cfaa8b8d8b4751a26889f65abf1a9a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/022d90ce9b204af28b5713597b2c2816~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h2 data-id=\"heading-11\">写在最后</h2>\n<p>用户系统的代码已完成初版，需要的同学可以自取 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway%2Ftree%2Ffeat%2Fuser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway/tree/feat/user\" ref=\"nofollow noopener noreferrer\">feat/user</a>，相关的注释也已经补充完毕，如果感觉哪里需要修改或者不明白的地方可以随时与我沟通。</p>\n<p>从本章开始将进入正式的实战环境，<strong>从第十章开始一直到微服务的章节将全部都是真实的项目设计</strong>，我们将通过各种项目的设计与思路来解析每个项目开发。</p>\n<p>跟之前说的一样，由于每个人的编码习惯与真实需求不一致，所以不会跟学习篇一样，将代码以及步骤完完整整的搬到教程里面来，只是提供具体的设计方案与思路，但最后提供以教程中的架构实现的项目，所以记得关注 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway\" ref=\"nofollow noopener noreferrer\">github.com/boty-design…</a>，同时进群获取最新的进度。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b5e343d74b549249a6a4a7d426b6fbd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>如果你有什么疑问，欢迎在评论区提出或者加群沟通。 👏</p></div>"
    },
    {
        "name": "12\n物料篇：物料系统设计\n学习时长: 8分3秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>上一章介绍了 <strong>RBAC</strong> 权限模型的设计，后续会将基于 <strong>RBAC</strong> 的用户中心代码放在 <strong>GitHub</strong> 上，大家可以进群获取最新的代码进度。</p>\n<p>在需求分析中，我们提到了在网关基础服务中需要代理转发静态资源，正常来说这个功能一般是 <code>DevOps</code> 或者搭建系统来完成的，但由于 <code>DevOps</code> 与搭建系统自身就是一个非常庞大的体系，为了专注于网关系统功能不扩散范围，所以我们挑选了一个比较基础的物料服务来进行<strong>页面资源的管理</strong>。</p>\n<p>本章我们将介绍物料的一些相关知识以及物料系统的设计。</p>\n<h2 data-id=\"heading-1\">物料系统</h2>\n<h4 data-id=\"heading-2\">什么是物料?</h4>\n<p>物料这个概念也算是一个比较新的名词，有些同学可能没有听说过，但实际上你不仅接触过物料而且已经在使用甚至是开发了。</p>\n<p>首先，我们来剖析一个前端的项目构成：<strong>应用 -&gt; 页面 -&gt; 区块 -&gt; 业务组件 -&gt; 基础组件</strong>。</p>\n<p>如果一个成熟的团队会用什么来快速完成整个工程呢？</p>\n<ol>\n<li>一套基于团队标准规范的<strong>基础组件库</strong>，包含 <strong>PC</strong> 与 <strong>H5</strong> 甚至多端组件库；</li>\n<li>多套符合业务常见的<strong>业务组件库</strong>，例如电商组件库（购物车、商品库、金刚位、广告位等）；</li>\n<li>多种<strong>区块</strong>组合，例如金刚位与广告位的多种组合模式，需要微调整的模块；</li>\n<li>多套<strong>模板</strong>，例如电商中的各种营销模板（砍一刀、大转盘、抽奖机等）。</li>\n</ol>\n<p>上面这些模块在一个稍具规模的团队中，至少具备 <strong>1</strong> 跟 <strong>2</strong> 或者更多，只不过不少的团队没有将它们归类并做成一套通用的物料系统而已。</p>\n<p>所以物料的概念可以理解为：<strong>所有能直接搭建出页面级别的基础模块都可以纳入物料的统筹</strong>。</p>\n<h4 data-id=\"heading-3\">为什么需要物料？</h4>\n<p>前面提到了，一个成熟的团队应该怎样<strong>快速</strong>完成一个新的工程，以及如何对旧工程进行迭代、优化升级。</p>\n<p>当一个团队负责业务越来越多，研发成员逐步增加，项目上下游协作链路越来越长（<strong>设计 -&gt; 研发 -&gt; 测试 -&gt; 产品验收</strong>），如果每一次新的需求或者新的项目启动的时候，都没有任何开发、样式的规范，也没有任何的资源、组件或者代码的复用率，很容易导致项目迭代、维护困难，业务与样式质量差。最重要的是会有很多重复的工作，造成资源浪费与人工成本增加。</p>\n<p>这也是为什么当一个团队的业务逐步稳定之后，就会开始制定<strong>设计规范、开发规范</strong>，增加代码、组件的复用率，提高个人开发效率。当规范达到一定的标准，相对应也会减少设计、测试的投入，整体的效能也会有所提高。</p>\n<h4 data-id=\"heading-4\">如何去开启第一步？</h4>\n<p>跟工厂流水线一样，首先从<strong>开发语言</strong>、<strong>脚手架</strong>入手，从源头将最基础的地基统一了，才有机会完成后面的规范。不然团队中每个人都根据自己的喜好选择 <code>Vue</code>、<code>React</code>、<code>Angular</code> 或者其他小众一点的框架来开发的话，这个标准的落地就会非常困难。</p>\n<p>在完成了基础开发语言与框架的统一之后，就可以联合产品与设计制定相关的基础 <code>UI</code> 级别的规范，产出通用的组件库代码。</p>\n<p>最后，再根据自身的业务不断精炼代码，抽取通用逻辑与组件，完成第一批业务组件的积累。</p>\n<h4 data-id=\"heading-5\">何为组件、区块与模板？</h4>\n<p>基础组件的概念比较好理解，将所有业务剔除，能够保持最小的元素就可以作为基础组件，它是可枚举、可抽象以及通用的，例如常见的 <strong>table</strong> 以及 <strong>form</strong> 一套组件。</p>\n<blockquote>\n<p>目前业内做的比较好的 <code>React</code> 技术栈的组件库有 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fant.design%2Fdocs%2Freact%2Fintroduce-cn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://ant.design/docs/react/introduce-cn\" ref=\"nofollow noopener noreferrer\">Antd</a>，<code>Vue</code> 技术栈的组件库有 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Felement-plus.org%2Fzh-CN%2F%23%2Fzh-CN\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://element-plus.org/zh-CN/#/zh-CN\" ref=\"nofollow noopener noreferrer\">Element</a> 与 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fiview.github.io%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://iview.github.io/\" ref=\"nofollow noopener noreferrer\">iView</a>。个人并不建议每个团队都从头开始造轮子，可以以目前主流成熟的开源组件库为基础做二次开发定制，这也应了小册第一章所说的，并不是所有的轮子都有必要造。</p>\n</blockquote>\n<p>基础组件作为最小单位的构成元素，通用性非常高，覆盖面非常广，但是仍然没办法满足实际业务线快速开发的需求，业务组件也就由此诞生。</p>\n<p>业务组件是基于基础组件但附带了<strong>业务属性</strong>的组件，通常情况下业务组件受垂直业务领域的影响，必然是有领域壁垒的，比如电商组件库与 <strong>SCM</strong> 组件库就有很大的差距。</p>\n<p>无论是业务组件还是基础组件，都属于组件的范畴，最终的产物大多数都是以 <strong>Props</strong> 这种可配置的传参模式来使用。</p>\n<p>区块则是融合了基础与业务组件之后的产物，<strong>与组件不同的是，区块是以复制代码的模式直接添加到工程化当中</strong>。</p>\n<p>当你的业务需要大量的重复模块的代码，这些模块的代码在每一处都会有不同的业务处理方式，无法通过配置来完成所有的功能时，这个时候就需要区块来帮你完成了。</p>\n<p>模板可以看作大号区块，但更加成熟，以页面级别为单位，由前三种子模块组装而成，同样也是以代码的模板加入到工程中。</p>\n<h4 data-id=\"heading-6\">产物管理</h4>\n<p>组件一般都是以配置模式使用，所以通常都需要经过构建才能被工程所引用，常规的组件产物有两种形态：<strong>NPM</strong> 包与 <strong>CDN</strong> 资源。这种模式非常利于组件模块快速被工程引入，而且通过构建之后非常方便版本管理。</p>\n<p>至于区块与模板，因为已经是纯 <strong>Code</strong> 的模式，所以发布 <strong>NPM</strong> 与 <strong>CDN</strong> 都不太合适，一般是直接使用 <strong>Git</strong> 仓库源码模式来管理。但是通过仓库源码直接管理的话，依赖引入（需要手动引入或者全局引入一套全组件依赖）与版本管理都会有问题。</p>\n<p>此时，就需要借助一个物料系统来帮我们将这些零碎的模块统一管理起来，方便业务同学使用。</p>\n<h2 data-id=\"heading-7\">物料系统设计</h2>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6521f34d998148b3857244458245ca63~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>基于上述的分析与讨论，最终我们的物料系统需要保存的数据类型有上述几种:</p>\n<ol>\n<li>基础组件</li>\n<li>物料组件</li>\n<li>区块</li>\n<li>模板</li>\n<li>页面</li>\n</ol>\n<blockquote>\n<p>其中，页面的产物类型是额外附加上去，一般属于<strong>搭建系统</strong>才会保存的产物类型，但由于我们的网关系统中需要这种产物，所以才会放进来。</p>\n</blockquote>\n<p>在产物管理中提到了，组件与区块、模板在存储方面是有一些区别的，所以在物料体系设计中，需要对这两种类型的产物做一些兼容性的合并。</p>\n<p>首先考虑接入物料系统中的代码仓库管理模式采用 <strong>monorepo</strong> 还是 <strong>multirepo</strong>。</p>\n<p>对于上述两种代码仓库管理模式各有千秋，常规的物料系统一般都是采用 <strong>multirepo</strong> 管理产物，这样方便数据管理产物的构建与版本。对于<strong>业务组件库</strong>这种本身就有领域壁垒的类型产物，以 <strong>multirepo</strong> 的模式来管理非常方便，也能够让大部分的开发所接受。</p>\n<p>但是，如果采用 <strong>multirepo</strong> 来管理<strong>基础组件库</strong>，对开发来说就非常难受。因为基础组件库本身有不少的逻辑与基础能力可以复用，但 <strong>multirepo</strong> 模式会把它拆得比较零碎，所以对于基础组件库常见的管理模式是 <strong>monorepo</strong>。</p>\n<p>那么问题来了，<strong>multirepo</strong> 的管理模式在物料系统中可以有唯一的映射，每一次的项目构建的产物结果都具备唯一性，但是 <strong>monorepo</strong> 的构建产物不具备唯一性，每次的构建产物结果可能存在多个。</p>\n<p>为了解决这个问题，在我们的物料系统中，引入<strong>虚拟物料的概念</strong>，也就是 <strong>monorepo</strong> 模式管理的工程，可以手动在系统中申明，在构建环境不再关注构建产物的具体结果，根据构建的版本统一升级所有虚拟物料的版本即可。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ffade5dde0447ae9176e9db832e34cd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>下图分别是真实物料与虚拟物料添加的界面，虚拟物料的产物结果是通过人工添加进去管理的，而真实物料则是每一个仓库就对应一个物料。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9300bd5b71294080a0b9cfd2f1de3399~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3347cc973b7441a492f7fb17c6310078~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>下图是物料系统一个单仓的管理与发布界面：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0c2f4d1f6ff4d95b549d9802ce5c722~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3ca28bca02c4adaa615054859abb945~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>对于区块、模板以及页面这种类型的物料，在发布的时候除了版本管理之外，最好也将 <strong>Code</strong> 内容完整地存在数据库中，这样方便其他的系统消费，例如使用 <strong>Snapshot</strong> 做成代码插入插件，在 <strong>VS Code</strong> 中开发时直接消费区块、模板等物料。</p>\n<h2 data-id=\"heading-8\">写在最后</h2>\n<p>本章介绍了物料的特性以及物料系统该怎么设计，具体的开发细节以及数据表结构设计将会在下一章详细讲述。</p>\n<p>在物料系统设计中出现的截图是已经投入使用的完整版本，它包含了 <code>DevOps</code> 与搭建体系，但小册的物料实战并不会展示完整的体系，而是聚焦在物料管理控制这个流程上。有兴趣的同学在跟着完成物料实战之后，可以结合自己公司的 <code>CICD</code> 体系完善起来。</p>\n<p>如果你有什么疑问，欢迎在评论区提出或者加群沟通。 👏</p></div>"
    },
    {
        "name": "13\n物料篇：物料开发与构建\n学习时长: 8分20秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>上一章我们一起学习了物料的相关知识以及该如何设计一个通用的物料系统，大家应该也对物料的价值以及设计有一个初步的概念。</p>\n<p>在本章我们将会介绍物料系统的开发以及服务端构建的相关知识，注意本章的内容虽然会涉及到物料产物 <code>CICD</code> 相关的范围，但实际小册提供的物料系统并不包含 <code>CICD</code> 构建的模块，所以有想将物料系统实际用于生产的同学需要自己来实现 <code>CICD</code> 的功能。</p>\n<h2 data-id=\"heading-1\">物料系统开发</h2>\n<p>先来回顾一下上一章的内容，物料的产物分类有下面几种：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6521f34d998148b3857244458245ca63~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h4 data-id=\"heading-2\">构建类型产物</h4>\n<p>其中所有的组件类都是需要通过构建产出的，其他的如模板、代码区块都是以 <code>code</code> 模式存在。既然存在构建过程那么物料系统就需要对接 <code>Devops</code> 系统，通过 <code>CICD</code> 来构建产物上传物料。</p>\n<p>所以在物料系统中会有 <code>Project</code> 的概念对应的是 <code>Git</code> 仓库，每一个 <code>Project</code> 都会对应一个 <code>Git</code> 仓库方便 <code>Devops</code> 系统进行工程构建，于是我们第一个物料系统的表为 <code>Project</code>：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/725b6df598ef4a7f973b79794efb45aa~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<blockquote>\n<p><code>Project</code> 表主要是存储 <code>CICD</code> 项目构建信息，所以这张表一般情况下也是存在于 <code>Devops</code> 系统中，所以如果有 <code>Devops</code> 系统的话，就没必要在物料系统中再创建一张表，一般可以由 <code>Devops</code> 直接提供 <code>CICD</code> 底层服务通过微服务集成到物料系统或者使用双写表模式来共同管理 <code>Project</code> 表（双写表模式并不推荐，存在互相覆盖以及重复开发的情况）。</p>\n</blockquote>\n<p>在上一章我们也提到了，物料中存在两种包管理方式分别是 <strong>monorepo</strong> 与&nbsp;<strong>multirepo</strong>，根据 <strong>multirepo</strong> 类型的物料，物料系统是可以根据产物直接推断出版本依赖结果，但是 <strong>monorepo</strong> 类型的物料并做不到，只能通过以创建虚拟物料的方式来推断出产物结果。</p>\n<p>通常情况下物料的数量一般比较多，而且也会与各个业务线有关联，所以在物料系统中会有一个物料集的概念，来管理同一类的物料，比如电商物料库与 <strong>CRM</strong> 物料库等，所以我们的物料表结构可以如下所示：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88588302680644e0962268adf15cf34d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>从上图的实体类可以看出，虚拟物料集与实体物料类会保存 <code>ProjectId</code> 字段，物料系统可用根据 <code>ProjectId</code> 字段可以查询出 <code>Project</code> 的项目信息，从而进入 <code>CICD</code> 流程来进行项目构建。</p>\n<p>表中的 <code>alphaVersion</code>、<code>betaVersion</code>、<code>gammaVersion</code> 分别对应的是 <code>NPM</code> 产物中的 <code>alpha</code>、<code>beta</code>、<code>gamma</code> 类型的包如：<code>@boty-design/fe-cli@0.0.1-beta.8</code>，小数点最后一位则使用 <code>devVersion</code>、<code>testVersion</code>、<code>preVersion</code> 来表示物料当前的版本分别在各个环境已经构建了多少次，当然最终生产环境打出来的包为 <code>@boty-design/fe-cli@0.0.1</code>。</p>\n<p>在构建完毕项目之后，就需要保存对应的产物结果，<code>NPM</code> 类型的物料结果是可以通过物料实体类中的 <strong>name + version</strong> 两个字段直接推断出来如：<code>@boty-design/fe-cli@0.0.1</code>，而 <code>CDN</code> 类型的产物需要带有全连接才行如：<code>https://abc.com/boty-design/fe-cli/0.0.1/idnexjs</code>（如果能保证 <code>CDN</code> 的域名一致的话，其实也可以使用 <strong>name + version</strong> 推断出产物结果），所以产物结果表可以为：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19dcbcbbf7bf414598d83259b584bfe3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>所以结合上述所有的表，最终构建类型物料的表结构如下：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aecea9f2ae0e40afae7ddb9e85cee9ca~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>理论上以上的表结构设计足够满足绝大部分类型的物料存储，各位同学可以根据自己的实际情况来进行调整，比如团队中不需要 <code>dev</code>、<code>test</code> 环境的，可以删除 <code>alpha</code>、<code>beta</code> 相关的字段。或者想使用 <code>CICD</code> 的方式来产出对应的页面或者区块的话，也可以拓展 <code>MaterialConfig</code> 的表结构。</p>\n<h4 data-id=\"heading-3\">代码类型产物</h4>\n<p>除去组件这种强依赖构建的类型之外，剩下如区块、模板都可以以 <code>Code</code> 形式直接存储在数据库当中。所以他们的表结构相对于简单，只涉及到对应配置的增删改查：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c3f0389bd6c447285a14b0280a946e9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>在 <code>Config</code> 表中有一个 <code>contain</code> 的字段是用来保存 <code>Code</code> 的，与物件类型的物料不同，<code>CodeMaterial</code> 表除了 <code>currentVersion</code> 之外额外多了 <code>currentConfigId</code> 字段，在客户端消费区块跟模板的时候需要使用 <code>currentConfigId</code> 从 <code>Config</code> 表中查询对应的数据，获取存储的 <code>Code</code> 内容。</p>\n<h4 data-id=\"heading-4\">网关资源</h4>\n<p>网关一般只需要代理前端页面级别的资源，其他的资源一般都是放在 <code>CDN</code> 或者 <code>OSS</code> 上，所以我们需要一张 <code>Page</code> 表来存储对应的访问域名、路径与产物：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a2c2f6591fc45f4845ae443a23fe3dd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>网关基础服务会将访问域名解析为 <code>domain</code> 与 <code>path</code>，再读取 <code>Page</code> 表来查询对应的配置信息，最后将查询出来的 <code>HTML</code> 资源返回给前端访问。</p>\n<p>最后放上物料系统的终极表结构设计：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6e7041b0c1d4330b51acf06238fb06d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h2 data-id=\"heading-5\">物料构建</h2>\n<p>上述是物料系统的开发，接下来我们简单讲述一下物料系统的构建过程：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6759968c75c44a90a5d9374c9dc8386e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>常规的流程如上图所示，物料系统会创建一条 <code>task</code> 来记录物料的发布信息，同时触发 <code>Devops</code> 的构建流程，在 <code>Devops</code> 构建流程完成之后，由 <code>Devops</code> 系统推送构建消息给物料系统，物料系统根据推送消息的结果，来判断是否来保存物料的产物信息。</p>\n<p><strong>这里有一个非常重要的点</strong>，所有的物料产物结果尽可能的保持结构唯一尤其是 <code>CDN</code> 类型的产物，<code>CDN</code> 的最终产物的结果一般可以为 <code>https://domain/ptah/name/version/index.js</code>，如果不能保证产物的格式统一的话，那么对于物料系统来说可以有两种解决方案：</p>\n<ol>\n<li>所有的产物结果保存都由 <code>CLI</code> 工具构建出真实产物后上传</li>\n<li>使用拓展字段来手动修正产物结果，使得 <code>CDN</code> 的数据有效</li>\n</ol>\n<p><strong>但这两种解决方案无疑都是会造成额外的使用与学习成本</strong>，所以最好的方案是开发物料的时候，可以以统一脚手架与模板来约束研发开发物料，对于物料系统的开发与管理成本会比较少，另外统一的规范也是能够在团队快速推广物料系统的好手段。</p>\n<h2 data-id=\"heading-6\">写在最后</h2>\n<p>物料系统的地址为 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway%2Ftree%2Ffeat%2Fmaterial\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway/tree/feat/material\" ref=\"nofollow noopener noreferrer\">feat/material</a>，需要的同学自取，会持续更新。</p>\n<p>其实对于网关系统来说，只需要代理页面级别的资源，根据域名匹配返回对应的 <code>HTML</code> 内容，所以上述的所有表只有 <code>Page</code> 与 <code>Config</code> 这两张表在网关体系是真实有用的。</p>\n<p><code>Page</code> 的产物一般与 <code>CICD</code> 或者搭建系统有关，但无论是 <code>Devops</code> 还是搭建系统，两者都属于一个非常庞大的系统，在网关系统的小册中肯定是完成不了的，单独拎出去写两本小册恐怕都不够，但我又想多一个实战的项目给大家历练，所以最后选择了将 <code>Page</code> 相关的开发直接升级为物料系统。</p>\n<p>最终的物料系统代码目前也在开发中，跟用户系统一样，小册里面不会过多的展示相关的代码，每个人的实际需求与风格都不相同，不想做过多的约束，但我会按照上文中的架构与表结构设计直接开发一套完成的工程放在 <code>github</code> 上供给同学们参考。</p>\n<p>希望同学们最好可以根据小册的内容加上自己的理解独立完成物料系统的开发，在不涉及 <code>Devops</code> 的情况下，物料系统开发的难度远不如用户系统，如果开发过程遇上任何的难处或者疑惑的地方，欢迎加群或者加我的微信来讨论解决方案。</p>\n<p>如果你有什么疑问，欢迎在评论区提出或者加群沟通。 👏</p></div>"
    },
    {
        "name": "14\n网关篇：代理与缓存\n学习时长: 37分34秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>前两章，我们一起学习了物料、用户系统的设计与开发，在经过了用户系统与物料系统的折磨之后，大家应该对 <code>NestJS</code> 已经非常的熟悉了，学习旅途也到了网关系统中<strong>最关键与核心</strong>的功能模块开发。</p>\n<p>由于物料与网关核心功能的耦合度非常高，操作起来非常麻烦，毕竟我们没有真实的界面，所以在本章内容中，我们会使用 <code>mock</code> 数据来实现代理转发的功能，同时对缓存数据做一个大概的介绍。</p>\n<h2 data-id=\"heading-1\">网关核心系统开发</h2>\n<h4 data-id=\"heading-2\">拦截路由</h4>\n<p>在需求分析中我们提到了，网关基础服务作为所有资源的前置入口，需要对所有的请求进行拦截，再根据请求的类型分发到对应的服务或者返回需求的资源，所以我们需要一个接受所有请求的 <code>Controller</code>。</p>\n<p>新建 <code>src/core/intercepter.controller.ts</code> 如下所示</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Public</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/auth/constants'</span>;\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">Controller</span>,\n  <span class=\"hljs-title class_\">Get</span>,\n  <span class=\"hljs-title class_\">Req</span>,\n  <span class=\"hljs-title class_\">Res</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FastifyReply</span>, <span class=\"hljs-title class_\">FastifyRequest</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'fastify'</span>;\n<span class=\"hljs-meta\">@Controller</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IntercepterController</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) { }\n  <span class=\"hljs-meta\">@Get</span>()\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getApp</span>(<span class=\"hljs-params\"><span class=\"hljs-meta\">@Req</span>() req: FastifyRequest, <span class=\"hljs-meta\">@Res</span>() res: FastifyReply</span>) {\n    res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">'html'</span>)\n  }\n}\n</code></pre>\n<blockquote>\n<p>注意，此时的 <code>getApp</code> 引入了 <code>@Res() res: FastifyReply</code>，不能直接 <code>return</code> 返回值，需要使用 <code>res.send</code> 来返回 <code>html</code> 格式</p>\n</blockquote>\n<p>新建 <code>src/core/intercepter.module.ts</code>，并在 <code>app.module.ts</code> 中导入。</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Module</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">IntercepterController</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./intercepter.controller'</span>;\n\n<span class=\"hljs-meta\">@Module</span>({\n  <span class=\"hljs-attr\">controllers</span>: [<span class=\"hljs-title class_\">IntercepterController</span>],\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IntercepterModule</span> { }\n</code></pre>\n<p>然后请求接口 <a href=\"https://link.juejin.cn?target=http%3A%2F%2Flocalhost%2Fapi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://localhost/api\" ref=\"nofollow noopener noreferrer\">http://localhost/api</a> （<strong>为了方便后期修改 <code>DNS</code> 测试本地域名，可以将项目启动端口改成 80</strong>），可以得到如下返回值。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f51de1f90d414269a80034eabc35089e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>从图上看出，请求路径是携带了 <code>api</code> 前缀的，并不符合拦截全部路由的要求，可以修改 <code>main.ts</code> 中的 <code>setGlobalPrefix</code> 方法：</p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\"><span class=\"hljs-deletion\">- app.setGlobalPrefix('api');</span>\n<span class=\"hljs-addition\">+ app.setGlobalPrefix('api', { exclude: ['*'] }); </span>\n</code></pre>\n<p>同时再修改 <code>src/core/intercepter.controller.ts</code> 中的 <code>getApp</code> 的 <code>Get</code> 配置：</p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\"><span class=\"hljs-deletion\">- @Controller()</span>\n<span class=\"hljs-addition\">+ @Controller('*')</span>\nexport class IntercepterController {\n  constructor() { }\n  @Get()\n  async getApp(@Req() req: FastifyRequest, @Res() res: FastifyReply) {\n    res.send('html')\n  }\n}\n</code></pre>\n<p>然后再访问如下路由对比即可以发现，当访问到项目已存在的接口时，会正常走之前的业务逻辑，当访问不存在的业务逻辑路由时，将统一进入 <code>IntercepterController</code> 中：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d0a80ad81024acda2f7330fad156d7f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h4 data-id=\"heading-3\">解析路由</h4>\n<p>首先，我们需要根据域名来匹配不同的返回页面，在上一步已经将项目启动端口修改为 <strong>80</strong>，所以直接修改系统的 <code>host</code> 目录，来修改域名 <code>DNS</code> 解析，使之指向本地服务，然后浏览器访问即可：</p>\n<pre><code class=\"hljs language-yaml\" lang=\"yaml\"><span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span> <span class=\"hljs-string\">www.cookieboty.com</span>\n<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span> <span class=\"hljs-string\">nginx.cookieboty.com</span>\n<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span> <span class=\"hljs-string\">jenkins.cookieboty.com</span>\n<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span> <span class=\"hljs-string\">gitlab.cookieboty.com</span>\n<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span> <span class=\"hljs-string\">devops.cookieboty.com</span>\n<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span> <span class=\"hljs-string\">fe.cookieboty.com</span>\n</code></pre>\n<pre><code class=\"hljs language-diff\" lang=\"diff\">@Controller('*')\nexport class IntercepterController {\n  constructor() { }\n  @Get()\n  async getApp(@Req() req: FastifyRequest, @Res() res: FastifyReply) {\n<span class=\"hljs-deletion\">-    res.send('html')</span>\n<span class=\"hljs-addition\">+    res.send(req.headers.host)</span>\n  }\n}\n</code></pre>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6bba855e6a4f4205855c0d55d933bc57~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>如上图所示，我们可以通过 <code>req.headers.host</code> 来拿到对应的域名来判断返回资源，但是仅仅有域名肯定是不足够的。</p>\n<p>通常情况下，一个域名下面会存在多个前端项目，这些前端项目可以通过路由前缀来区分，例如 <a href=\"https://link.juejin.cn?target=http%3A%2F%2Fwww.cookieboty.com%2Fdevops\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://www.cookieboty.com/devops\" ref=\"nofollow noopener noreferrer\">www.cookieboty.com/devops</a> 、<a href=\"https://link.juejin.cn?target=http%3A%2F%2Fwww.cookieboty.com%2Fjenkins\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://www.cookieboty.com/jenkins\" ref=\"nofollow noopener noreferrer\">www.cookieboty.com/jenkins</a> 等等，所以我们也需要对整个 <code>url</code> 进行解析。</p>\n<p>同时，也存在 <code>SPA</code> 项目中使用 <code>history</code> 的情况，这样的话就会存在虚拟路由，真实的访问地址与浏览器请求的地址不匹配的情况，我们也需要模拟 <code>Nginx</code> 中的 <code>try_files</code> 模式。</p>\n<p><code>第一步</code>：借助 <code>url</code> 库来组装路由</p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\"><span class=\"hljs-addition\">+ import { URL } from 'url';</span>\n\nexport class IntercepterController {\n  constructor() { }\n  @Get()\n  async getApp(@Req() req: FastifyRequest, @Res() res: FastifyReply) {\n<span class=\"hljs-addition\">+   const urlObj = new URL(req.url, `http://${req.headers.host}`);</span>\n<span class=\"hljs-addition\">+   console.log('urlObj===&gt;', urlObj)</span>\n    res.send(req.headers.host)\n  }\n}\n</code></pre>\n<p>访问之前的域名可以在控制台得到如下的结构：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e7457f9da2d4868982713167018d3c6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<blockquote>\n<p>可以看到控制台中有两种打印，普通的 <code>html</code> 会自动请求 <code>favicon</code> 资源，我们只需要拦截正常的请求，过滤掉 <code>favicon.ico</code> 这种类型的请求即可，或者返回一个通用的小图标也行。</p>\n</blockquote>\n<p><strong>第二步</strong>：修改 <code>IntercepterController</code>，添加读取 <code>html</code> 方法与判断空异常：</p>\n<pre><code class=\"hljs language-less\" lang=\"less\"><span class=\"hljs-variable\">@Controller</span>()\nexport class IntercepterController {\n  <span class=\"hljs-selector-tag\">constructor</span>(private readonly <span class=\"hljs-attribute\">intercepterService</span>: IntercepterService) { }\n\n  <span class=\"hljs-variable\">@Get</span>(<span class=\"hljs-string\">'*'</span>)\n  <span class=\"hljs-variable\">@Public</span>()\n  async getApp(<span class=\"hljs-variable\">@Req</span>() <span class=\"hljs-attribute\">req</span>: FastifyRequest, <span class=\"hljs-variable\">@Res</span>() <span class=\"hljs-attribute\">res</span>: FastifyReply) {\n    <span class=\"hljs-selector-tag\">const</span> <span class=\"hljs-selector-tag\">urlObj</span> = <span class=\"hljs-selector-tag\">new</span> <span class=\"hljs-selector-tag\">URL</span>(req.url, <span class=\"hljs-built_in\">`http://${req.headers.host}`</span>);\n    \n    <span class=\"hljs-selector-tag\">if</span> (urlObj.pathname === <span class=\"hljs-string\">'/favicon.ico'</span>) <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">res</span><span class=\"hljs-selector-class\">.send</span>(<span class=\"hljs-string\">'ico'</span>);\n    \n    <span class=\"hljs-selector-tag\">const</span> <span class=\"hljs-selector-tag\">html</span> = <span class=\"hljs-selector-tag\">await</span> <span class=\"hljs-selector-tag\">this</span><span class=\"hljs-selector-class\">.intercepterService</span><span class=\"hljs-selector-class\">.readHtml</span>(urlObj);\n\n   <span class=\"hljs-selector-tag\">if</span> (!html) <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">res</span><span class=\"hljs-selector-class\">.send</span>(<span class=\"hljs-string\">'404'</span>);\n   \n    <span class=\"hljs-selector-tag\">res</span><span class=\"hljs-selector-class\">.headers</span>({\n      '<span class=\"hljs-selector-tag\">Content-Type</span>': '<span class=\"hljs-selector-tag\">text</span>/<span class=\"hljs-selector-tag\">html</span>',\n    });\n    <span class=\"hljs-selector-tag\">res</span><span class=\"hljs-selector-class\">.send</span>(html);\n  }\n}\n</code></pre>\n<p><strong>第三步</strong>：新建 <code>src/core/intercepter.service.ts</code> 添加 <code>IntercepterService</code></p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">WebSiteDataModel</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./types'</span>;\n<span class=\"hljs-keyword\">import</span> { getMatchedSync } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./intercepter'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ConfigService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/config'</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">WebsitesMock</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./websites_mock.json'</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">FilesMock</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./files_mock.json'</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IntercepterService</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) { }\n\n  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">websites</span>(): <span class=\"hljs-title class_\">Record</span>&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-title class_\">WebSiteDataModel</span>&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">WebsitesMock</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Record</span>&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-title class_\">WebSiteDataModel</span>&gt;\n  }\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">readHtml</span>(<span class=\"hljs-params\">urlObj: URL</span>) {\n    <span class=\"hljs-keyword\">const</span> { <span class=\"hljs-attr\">data</span>: matchedData } = <span class=\"hljs-title function_\">getMatchedSync</span>(urlObj, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">websites</span>);\n    <span class=\"hljs-keyword\">if</span> (!matchedData) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">const</span> html = <span class=\"hljs-title class_\">FilesMock</span>[matchedData.<span class=\"hljs-property\">pageId</span>]\n    <span class=\"hljs-keyword\">return</span> html;\n  }\n}\n</code></pre>\n<p><code>files_mock.json</code></p>\n<pre><code class=\"hljs language-json\" lang=\"json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"1\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"devops\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"2\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"jenkins\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"3\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"nginx\"</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p><code>websites_mock.json</code></p>\n<pre><code class=\"hljs language-json\" lang=\"json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"www.cookieboty.com\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"/devops\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"lastModified\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"pageId\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"/jenkins\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"lastModified\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"pageId\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"/nginx\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"lastModified\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"pageId\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">3</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p><strong>第四步</strong>：创建解析 <code>url</code> 的方法，解析路由地址，例如将 <code>devops/list</code>、<code>devops/detail</code> 等路由全部指向到根路由地址 <code>devops</code> 的资源上，在第三步中的 <code>getMatchedSync</code> 方法就用作此判断：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> getMatchedSync = (\n  <span class=\"hljs-attr\">urlObj</span>: <span class=\"hljs-variable constant_\">URL</span>,\n  <span class=\"hljs-attr\">websites</span>: <span class=\"hljs-title class_\">Record</span>&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-title class_\">WebSiteDataModel</span>&gt; = {},\n): { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">undefined</span>; <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">PageModelItem</span> | <span class=\"hljs-literal\">undefined</span> } | <span class=\"hljs-function\"><span class=\"hljs-params\">undefined</span> =&gt;</span> {\n\n  <span class=\"hljs-keyword\">if</span> (!urlObj.<span class=\"hljs-property\">hostname</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>;\n  }\n\n  <span class=\"hljs-keyword\">const</span> website = <span class=\"hljs-title function_\">matchWebsite</span>(urlObj.<span class=\"hljs-property\">hostname</span>, websites);\n\n  <span class=\"hljs-keyword\">if</span> (!website) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>;\n  }\n\n  <span class=\"hljs-keyword\">const</span> { data, path } = <span class=\"hljs-title function_\">matchPath</span>(website, urlObj.<span class=\"hljs-property\">pathname</span>);\n\n  <span class=\"hljs-keyword\">if</span> (!data) {\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-attr\">data</span>: <span class=\"hljs-literal\">undefined</span> };\n  }\n\n  <span class=\"hljs-keyword\">return</span> { data, path };\n}\n</code></pre>\n<p>先由 <code>matchWebsite</code> 来匹配 <code>host</code>，获取匹配成功的 <code>host</code> 数据之后，再使用 matchPath 方法进行 <code>path</code> 的匹配：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> matchWebsite = (\n  <span class=\"hljs-attr\">host</span>: <span class=\"hljs-built_in\">string</span>,\n  <span class=\"hljs-attr\">websites</span>: <span class=\"hljs-title class_\">Record</span>&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-title class_\">WebSiteDataModel</span>&gt;,\n): <span class=\"hljs-title class_\">WebSiteDataModel</span> | <span class=\"hljs-function\"><span class=\"hljs-params\">undefined</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> websites[host];\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> matchPath = (\n  <span class=\"hljs-attr\">website</span>: <span class=\"hljs-title class_\">WebSiteDataModel</span> | <span class=\"hljs-literal\">undefined</span>,\n  <span class=\"hljs-attr\">targetPath</span>: <span class=\"hljs-built_in\">string</span>,\n): { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">PageModelItem</span> } | <span class=\"hljs-function\"><span class=\"hljs-params\">undefined</span> =&gt;</span> {\n\n  <span class=\"hljs-keyword\">if</span> (!website) <span class=\"hljs-keyword\">return</span>;\n\n  <span class=\"hljs-keyword\">const</span> targetPathArr = <span class=\"hljs-title function_\">splitPath</span>(targetPath);\n\n  <span class=\"hljs-keyword\">if</span> (targetPathArr.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">i</span>) =&gt;</span> i === <span class=\"hljs-string\">'*'</span>)) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(\n      <span class=\"hljs-string\">'[matchPath] website custome path include *, redirect to 404'</span>,\n    );\n  }\n\n  <span class=\"hljs-comment\">// 全匹配</span>\n  <span class=\"hljs-keyword\">if</span> (website[targetPath]) {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">path</span>: targetPath,\n      <span class=\"hljs-attr\">data</span>: website[targetPath],\n    };\n  }\n\n  <span class=\"hljs-comment\">// .html 后缀 且 不等于 index.html,</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-regexp\">/\\/[^\\/]+\\.html$/</span>.<span class=\"hljs-title function_\">test</span>(targetPath) &amp;&amp; !<span class=\"hljs-regexp\">/\\/index\\.html/</span>.<span class=\"hljs-title function_\">test</span>(targetPath)) {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">path</span>: targetPath,\n      <span class=\"hljs-attr\">data</span>: website[targetPath],\n    };\n  }\n\n  <span class=\"hljs-comment\">// 通配</span>\n  <span class=\"hljs-keyword\">let</span> matchLen = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">resultKey</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(website.<span class=\"hljs-property\">path</span> || {}).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">path</span>) =&gt;</span> {\n\n    <span class=\"hljs-keyword\">if</span> (!path.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">'/'</span>)) path = <span class=\"hljs-string\">`/<span class=\"hljs-subst\">${path}</span>`</span>;\n\n    <span class=\"hljs-keyword\">const</span> pathArr = <span class=\"hljs-title function_\">splitPath</span>(path);\n    <span class=\"hljs-comment\">// 非必须容错：仅允许最后一个字符出现 *</span>\n    <span class=\"hljs-keyword\">if</span> (pathArr.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">i</span>) =&gt;</span> i === <span class=\"hljs-string\">'*'</span>))\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">'[matchPath] path include *'</span>);\n\n    <span class=\"hljs-comment\">/**\n     * 遍历路由规则列表，匹配命中立即停止遍历\n     */</span>\n    <span class=\"hljs-keyword\">let</span> currentMatchLen = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">currentResultKey</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; pathArr.<span class=\"hljs-property\">length</span>; i += <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">if</span> (targetPathArr[i] !== pathArr[i]) {\n        currentMatchLen = <span class=\"hljs-number\">0</span>;\n        currentResultKey = <span class=\"hljs-literal\">undefined</span>;\n        <span class=\"hljs-keyword\">return</span>;\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">undefined</span> === targetPathArr[i]) {\n        currentMatchLen = <span class=\"hljs-number\">0</span>;\n        currentResultKey = <span class=\"hljs-literal\">undefined</span>;\n        <span class=\"hljs-keyword\">return</span>;\n      }\n      currentMatchLen = i + <span class=\"hljs-number\">1</span>;\n      currentResultKey = path;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (matchLen &lt; currentMatchLen) {\n      matchLen = currentMatchLen;\n      resultKey = currentResultKey;\n    }\n  });\n\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">path</span>: resultKey,\n    <span class=\"hljs-attr\">data</span>: website.<span class=\"hljs-property\">path</span>[resultKey],\n  };\n}\n</code></pre>\n<h4 data-id=\"heading-4\">获取资源</h4>\n<p>在解析路由的第三步中，大家应该注意到在路由匹配中，有 <strong>2</strong> 个 <code>mock json</code> 文件 <code>websites_mock.json</code> 与 <code>files_mock.json</code>，它是由物料系统中的 <code>pages</code> 组成的，具体的结构为：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@description</span> 站点数据模型\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">WebSiteDataModel</span> {\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@description</span> 站点下的所有 path 表\n   */</span>\n  [<span class=\"hljs-attr\">host</span>: <span class=\"hljs-built_in\">string</span>]: {\n    [<span class=\"hljs-attr\">path</span>: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-title class_\">PageModelItem</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">PageModelItem</span> {\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@description</span> 最后修改时间\n   */</span>\n  lastModified?: <span class=\"hljs-built_in\">number</span>;\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@description</span> 页面 id\n   */</span>\n  pageId?: <span class=\"hljs-built_in\">number</span>;\n  \n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@description</span> 权限\n   */</span>\n  permissions?: <span class=\"hljs-title class_\">Array</span>&lt;<span class=\"hljs-function\">() =&gt;</span> (<span class=\"hljs-built_in\">boolean</span> | <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">boolean</span>&gt;) | <span class=\"hljs-built_in\">boolean</span>&gt;;\n}\n</code></pre>\n<p>正常情况下，我们是需要通过 <code>pageId</code> 去数据库查询出对应的资源返回，不过在 <code>mock</code> 的情况省略了，现在我们一起来看看结果如何：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b97b6feac96e49ecaf6f4ef51828c0c5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<blockquote>\n<p>注意 <a href=\"https://link.juejin.cn?target=http%3A%2F%2Fwww.cookieboty.com%2Fjenkins%2Flist\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://www.cookieboty.com/jenkins/list\" ref=\"nofollow noopener noreferrer\">www.cookieboty.com/jenkins/lis…</a> 与 <a href=\"https://link.juejin.cn?target=http%3A%2F%2Fwww.cookieboty.com%2Fjenkins\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://www.cookieboty.com/jenkins\" ref=\"nofollow noopener noreferrer\">www.cookieboty.com/jenkins</a> 这两个路由，它就是之前所提到过的虚拟路由匹配，当访问的资源为 <code>SPA</code> 项目使用 <code>history</code> 构建的话，<code>jenkins</code> 之后所有的路径都需要强制指向 <code>jenkins</code> 这个路由上。</p>\n</blockquote>\n<h4 data-id=\"heading-5\">缓存</h4>\n<p>由于我们是静态资源代理，所以为了达到最快的访问速度，给用户提供最高的性能体验，可以借助 <strong>3</strong> 层缓存来实现。</p>\n<p><strong>第一层缓存</strong>：由客户端自身在访问之后产生的协商缓存，当请求资源不变的情况下，用户访问的是本地资源，这个知识点，大部分的前端同学都应该掌握的非常熟悉，这里就不再拓展了。接下来介绍一下，在我们的项目中如何利用缓存来提高访问效率。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c75a9135fbb4e10b1eeb3cbb14e0f62~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>如上图所示，第二层缓存与第三层缓存分别是程序运行本地服务器与 <strong>Redis</strong> 服务。</p>\n<p>当第一个用户在访问页面时，如果在本地没有查询到资源的话，会向 <strong>Redis</strong> 服务请求资源，当 <strong>Redis</strong> 服务也没有请求到对应的资源的话，最后再去请求 <strong>MongoDB</strong> 获取。</p>\n<p>同样在每一次请求到资源的情况下，都会在对应的层级缓存资源，这样任一一个用户访问资源之后，就会产生缓存数据，这样可以减少数据库的读写，同时提高响应速度。</p>\n<p>可能有同学说 <code>Redis</code> 这一层可以省略，但一般网关服务也会使用分布式部署方式，在分布式架构中你命中的服务不一定是在本地有缓存了，所以即使丢失本地缓存，也不能舍弃 <code>Redis</code>，当任一的服务命中资源之后，都会在 <code>Redis</code> 中产生缓存，其他的服务也可以共享缓存数据。</p>\n<p>另外在本地缓存中，由于会存储大量的文件，所以也会存在旧版资源冗余的情况，所以在之前的设计中，永远都只保存最新的资源产物，不会保留历史产物，通过 <code>lastModified</code> 参数来判断需要更新资源。</p>\n<p>当资源过多的情况下也可以使用 <code>LRU</code> 算法来清空本地资源，看需求进行功能拓展即可，大家尽情发挥，不用客气。</p>\n<blockquote>\n<p>在缓存的工具选择上，大家可以选择自己熟悉的工具即可，只是 <code>NestJS</code> 自带的缓存插件对接 <code>Redis</code> 比较方便，并不代表你一定要使用 <code>Redis</code> 才行，比如我们公司目前的缓存使用的是 <code>Nacos</code>。</p>\n</blockquote>\n<h2 data-id=\"heading-6\">写在最后</h2>\n<p>本章的代码地址为&nbsp;<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway%2Ftree%2Ffeat%2Fcore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway/tree/feat/core\" ref=\"nofollow noopener noreferrer\">feat/core</a>，需要的同学自取，会持续更新。</p>\n<p>由于篇幅所限，文章里面提到的开发内容比较少，只有最核心的两个功能，其他的功能可以等待完整的项目出来之后再对比学习即可，一般关键的地方我会做必要的注释，如果还有其他的问题可以加群讨论或者直接联系我都行。</p>\n<p>到目前为止，我们已经陆陆续续开发 <strong>3</strong> 个大的功能模块，大家应该能感觉到目前的工程已经很庞大了，如果是普通开发模式的话，每一次的重启速度已经变慢。</p>\n<p>整个项目目前已经有 <strong>40+</strong> 个接口，如果物料系统再复杂点的话话，已经 <strong>50+</strong> 的接口不在话下。而这只是 <code>Controller</code> 的数量，并未括工具类与 <code>Service</code> 层的代码。</p>\n<p>所以在接下来下一章，我们将对这个逐渐变成巨石的工程进行项目拆分，降低项目之间的耦合度，做到独立部署与独立开发。</p>\n<p>如果你有什么疑问，欢迎在评论区提出或者加群沟通。 👏</p></div>"
    },
    {
        "name": "15\n进阶篇：项目拆分\n学习时长: 16分2秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>在上一章的末尾提到了目前我们的工程已经成为了一个非常大的应用，它分别有网关 <code>Core</code>、用户、物料三大模块组成，即使目前模块的功能都还是最简单的情况下，都已经达到了 <strong>40+</strong> 接口的程度，后期再复杂一点的情况下，那么整个项目的迭代都会变得很复杂。</p>\n<p>为了避免后期的开发与维护的麻烦，可以提前将工程拆解为 <strong>3</strong> 个独立的项目。</p>\n<h2 data-id=\"heading-1\">项目拆分</h2>\n<h4 data-id=\"heading-2\">拆分方式</h4>\n<p>在物料系统中提到了一般项目管理方式有如下两种：</p>\n<ul>\n<li><strong>multirepo 分散式管理</strong></li>\n</ul>\n<p>将项目分化成为多个模块，每一个模块都有一个独立的 <code>Reporsitory</code> 来管理。</p>\n<p><strong>优点</strong>：</p>\n<ol>\n<li>对于每个项目来说，不再限定开发语言与规范，开发人员可以选择擅长的框架来开发功能；</li>\n<li>单项目的功能将更加聚焦，只关注某一个具体模块的开发，开发人员在需求分配上会更为合理；</li>\n<li>可以有自己的分支管理规范与开发节奏，单需求开发效率更高。</li>\n</ol>\n<p><strong>缺点</strong>：</p>\n<ol>\n<li>同步上线会比较困难，一个大型的项目可能存在十几或者更多服务模块，一次上线可能需要同步构建多个服务；</li>\n<li>由于多个仓库管理，同步需求中相互依赖性上升，开发联调效率会降低；</li>\n<li>存在不同语言、框架实现的情况，会造成总体项目维护成本上升。</li>\n</ol>\n<ul>\n<li><strong>monorepo 集中式管理</strong></li>\n</ul>\n<p>将所有的模块统一的放在同一个 <code>Reporsitory</code> 中管理。</p>\n<p><strong>优点</strong>：</p>\n<ol>\n<li>统一的规范、语言、框架，项目整体结构完整性远超 <code>multirepo</code> 方式；</li>\n<li>标准化的开发流程，规避很多不必要的冲突与错误，包括整体架构升级等；</li>\n<li>所有模块都在一个项目中方便调试与总体工程级别的迭代与维护。</li>\n</ol>\n<p><strong>缺点</strong>：</p>\n<ol>\n<li>项目过大的情况下，整体代码过于臃肿；</li>\n<li>单仓库中对分支管理要求较高，修改和开发可能变得繁琐，降低效率。</li>\n</ol>\n<p>综上所述，两种模式都有利有弊，分布式管理比较简单也是大家常用的开发模式，所以接下来我们将着重展示 <code>monorepo</code> 的拆分步骤。</p>\n<h4 data-id=\"heading-3\">Monorepo 拆分</h4>\n<p>由于我们的项目是基于 <code>Nest CLI</code> 搭建的，所以可以直接使用 <code>Nest CLI</code> 提供的 <code>monorepo</code> 的拆分功能。</p>\n<p>首先执行，<code>CLI</code> 的 <code>generate app</code> 脚本，分别创建对应的 <code>materials</code> 与 <code>userCenter</code> 工程。</p>\n<pre><code class=\"hljs language-shell\" lang=\"shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\"> nest generate app materials</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\"> nest generate app userCenter</span>\n</code></pre>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17f6c27dfaa84ccf86680ff878121d99~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>如上图所示，<code>Nest CLI</code> 已经帮我们创建好了对应的工程目录，同时大家也可以观察一下 <code>nest-cli.json</code> 里面的参数配置区别：</p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\">{\n  \"$schema\": \"https://json.schemastore.org/nest-cli\",\n  \"collection\": \"@nestjs/schematics\",\n  \"sourceRoot\": \"apps/fast-gateway/src\",\n  \"monorepo\": fasle,\n<span class=\"hljs-deletion\">-  \"sourceRoot\": \"src\"</span>\n<span class=\"hljs-addition\">+  \"root\": \"apps/fast-gateway\",</span>\n<span class=\"hljs-addition\">+  \"compilerOptions\": {</span>\n<span class=\"hljs-addition\">+    \"webpack\": true,</span>\n<span class=\"hljs-addition\">+    \"tsConfigPath\": \"apps/fast-gateway/tsconfig.app.json\"</span>\n<span class=\"hljs-addition\">+  },</span>\n<span class=\"hljs-addition\">+  \"projects\": {</span>\n<span class=\"hljs-addition\">+    \"fast-gateway\": {</span>\n<span class=\"hljs-addition\">+      \"type\": \"application\",</span>\n<span class=\"hljs-addition\">+      \"root\": \"apps/fast-gateway\",</span>\n<span class=\"hljs-addition\">+      \"entryFile\": \"main\",</span>\n<span class=\"hljs-addition\">+      \"sourceRoot\": \"apps/fast-gateway/src\",</span>\n<span class=\"hljs-addition\">+      \"compilerOptions\": {</span>\n<span class=\"hljs-addition\">+        \"tsConfigPath\": \"apps/fast-gateway/tsconfig.app.json\"</span>\n<span class=\"hljs-addition\">+      }</span>\n<span class=\"hljs-addition\">+    },</span>\n<span class=\"hljs-addition\">+    \"materials\": {</span>\n<span class=\"hljs-addition\">+      \"type\": \"application\",</span>\n<span class=\"hljs-addition\">+      \"root\": \"apps/materials\",</span>\n<span class=\"hljs-addition\">+      \"entryFile\": \"main\",</span>\n<span class=\"hljs-addition\">+      \"sourceRoot\": \"apps/materials/src\",</span>\n<span class=\"hljs-addition\">+      \"compilerOptions\": {</span>\n<span class=\"hljs-addition\">+        \"tsConfigPath\": \"apps/materials/tsconfig.app.json\"</span>\n<span class=\"hljs-addition\">+      }</span>\n<span class=\"hljs-addition\">+    },</span>\n<span class=\"hljs-addition\">+    \"user-center\": {</span>\n<span class=\"hljs-addition\">+      \"type\": \"application\",</span>\n<span class=\"hljs-addition\">+      \"root\": \"apps/user-center\",</span>\n<span class=\"hljs-addition\">+      \"entryFile\": \"main\",</span>\n<span class=\"hljs-addition\">+      \"sourceRoot\": \"apps/user-center/src\",</span>\n<span class=\"hljs-addition\">+      \"compilerOptions\": {</span>\n<span class=\"hljs-addition\">+        \"tsConfigPath\": \"apps/user-center/tsconfig.app.json\"</span>\n<span class=\"hljs-addition\">+      }</span>\n<span class=\"hljs-addition\">+    }</span>\n<span class=\"hljs-addition\">+  }</span>\n}\n</code></pre>\n<blockquote>\n<p>默认情况下，启动了 <code>monorepo</code> 模式就会默认打开 <code>webpack</code> 的配置项，但如果不想自己导入实体类或者其他静态路径的话，可以设置为 <code>false</code>。</p>\n</blockquote>\n<p>与之前我们项目中使用的 <code>nest-cli.json</code> 配置不同的，多了 <code>monorepo</code>、<code>compilerOptions</code>、<code>projects</code> 等参数，它们是之前介绍过的在 <code>NestJS</code> 中使用 <code>monorepo</code> 模式开发的必备参数，但这些已经有 <code>CLI</code> 帮我们创建好了，对于规范化的工程来说，<code>CLI</code> 能做的事情还是非常多的。</p>\n<p>接着修改启动脚本，由于我们默认的项目是 <code>fast-gateway</code>，所以直接使用 <code>nest start:dev</code> 启动的就是 <code>fast-gateway</code> 的项目，其他的启动脚本修改如下：</p>\n<pre><code class=\"hljs language-json\" lang=\"json\"><span class=\"hljs-comment\">// package.json</span>\n<span class=\"hljs-attr\">\"start:gateway\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"cross-env RUNNING_ENV=dev nest start --watch\"</span><span class=\"hljs-punctuation\">,</span>\n<span class=\"hljs-attr\">\"start:user\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"cross-env RUNNING_ENV=dev nest start --watch user-center\"</span><span class=\"hljs-punctuation\">,</span>\n<span class=\"hljs-attr\">\"start:materials\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"cross-env RUNNING_ENV=dev nest start --watch materials\"</span><span class=\"hljs-punctuation\">,</span>\n</code></pre>\n<p>其中 <code>user-center</code> 与 <code>materials</code> 分别对应启动配置文件中的子项目，如果填错的话，则会默认启动主项目。</p>\n<p>由于之前我们使用了别名配置，所以要修改对应的 <code>tsconfig.app.json</code> 的配置才能正常启动项目：</p>\n<pre><code class=\"hljs language-json\" lang=\"json\"><span class=\"hljs-comment\">// apps/fast-gateway/tsconfig.app.json</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"extends\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"../../tsconfig.json\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"compilerOptions\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"paths\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"@/*\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-string\">\"src/*\"</span>\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"types/*\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-string\">\"../../types/*\"</span>\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"baseUrl\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\".\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"outDir\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"../../dist/apps/fast-gateway\"</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"include\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">\"src/**/*\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">\"../../types/*.d.ts\"</span>\n  <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"exclude\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">\"node_modules\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">\"dist\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">\"test\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">\"**/*spec.ts\"</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>主要是修改了别名路径跟全局依赖这些配置，再修改完 <code>tsconfig</code> 配置之后，基本上不需要改动代码，即可正常启动项目。</p>\n<p>接下来，我们分别运行 <code>yarn start:gateway</code> 与 <code>yarn start:user</code>，即可看到两个项目已经可以分别运行起来了。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6aa02111cc4d4397966bddca93b83184~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h4 data-id=\"heading-4\">公共模块 library</h4>\n<p>任何适合复用的功能都可以作为库来管理，也就是提取重复的模块，然后在每个项目中直接引用，如果需要修改的话，则只需要库的代码即可。</p>\n<p><code>NestJS</code> 在 <code>monorepos</code> 的模式下，提供了 <code>library</code> 的配置，可以让项目以轻量级的方式来使用这些公共的模块，而在 <code>multirepo</code> 的模式下，大部分则是采用 <code>npm</code> 包的方式来处理公共模块。</p>\n<p>在之前的项目开发中，我们有一个 <code>comm</code> 的文件夹来处理公共的逻辑部分，之前良好的编码规范此时就派上了用场，接下来可以使用 <code>library</code> 来讲 <code>comm</code> 中的模块进行封装。</p>\n<p><strong>第一步</strong>：创建 <code>comm library</code>：</p>\n<pre><code class=\"hljs language-shell\" lang=\"shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">nest g library common</span>\n</code></pre>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/59d13a774e374a34a86e5df3aac17308~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p><strong>第二步</strong>：将 <code>fast-gateway</code> 工程中 <code>comm</code> 的模块全部移植到 lib 中，并在 <code>index.ts</code> 中导出</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c01ab4699014925b7d08614abbf2681~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p><strong>第三步</strong>：修改工程中的引用路径</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d457130031fd46068d8448b31580bdee~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>如果怕修改不彻底的话，可以直接删除 <code>comm</code> 目录，然后根据控制台错误修改对应的引用路径即可。</p>\n<blockquote>\n<p>注意：<code>comm</code> 中的 <code>database</code> 模块也被复制了，移动了路径所以要记得修改加载实体路径，否则启动的时候并不会报错，但运行的时候会报找不到实体类，因为我们的三个项目的数据库都是共用的，所以这一块的代码也被我抽取出来使用。所以 <code>database</code> 模块的抽取需要根据自己的实际情况来使用。</p>\n</blockquote>\n<h4 data-id=\"heading-5\">拆解业务</h4>\n<p>再完成了之前所有的步骤之后，就可以开始拆分具体的业务代码了，与 <code>comm</code> 转成 <code>library</code> 一样，公共的代码我们也是按照目录来划分的，<del>所以拆解业务的过程也会非常的顺利</del>(<em>一点都不顺利，改引用路径改的快死了</em>)</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f629431b4a943faaaa89ad2b1f6ca30~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>为了快速的分割项目，有些路径我使用了相对路径，有兴趣的同学可以将引用路径优化的更好一点。</p>\n<p>如果有同学不习惯使用 <code>monorepo</code> 的开发方式，而是 <code>multirepo</code> 来管理项目，那么拆分的过程相对来说会比较顺利，路径问题应该比较容易解决。</p>\n<p>如果想使用 <code>multirepo</code> 来管理项目的话，则需要使用 <code>nest build common</code> 命令将 <code>library</code> 打包之后上传到私有或者公有源以 <code>npm</code> 包的方式引入即可，但要注意这种方式引入之后数据库的实体类引用路径可能也需要修改。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1ae0c5e49604170bdd6fe0ff393bd8e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h2 data-id=\"heading-6\">写在最后</h2>\n<p>本章的示例代码在 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway%2Ftree%2Ffeat%2Fmonorepo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway/tree/feat/monorepo\" ref=\"nofollow noopener noreferrer\">feat/monorepo</a>，后续会进行持续的迭代，有需要的同学自取。</p>\n<p>本章主要介绍了将一个完成的工程拆分为多个项目的过程，借助 <code>NestJs CLI</code> 提供的 <code>monorepo</code> 与 <code>library</code> 的功能，总体拆分的过程还是非常的顺利，基本上只需要修改简单的引用路径与 <code>tsconfig</code> 的别名即可。</p>\n<p>在项目拆分之后，除去公共模块的引用之外，每个系统的功能都保持了最单一的模块，但系统之间有些服务还是需要相互关联：比如用户系统需要提供给物料、网关系统登录、鉴权的功能、物料系统需要提供给网关资源消费的数据，此时就需要使用到微服务来将我们各个系统之间的功能进行打通。</p>\n<p>所以在下一章节，我们将一起学习如何使用微服务将各个系统之间的服务关联起来。</p>\n<p>如果你有什么疑问，欢迎在评论区提出或者加群沟通。 👏</p></div>"
    },
    {
        "name": "16\n进阶篇：微服务\n学习时长: 33分33秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>在上一章节中，我们已经对一个稍具复杂的项目进行了拆分，目前工程已经被拆成功能较为单一的三个独立项目：<code>Core</code>、用户与物料系统。</p>\n<p>既然每个项目的功能是单一，但是在之前的需求分析中，它们又是组成网关系统的各个重要部分，那么该如何将各个系统中有关联的服务进行联通呢？</p>\n<p>本章将介绍如何借助 <code>NestJS</code> 提供的 <code>RPC</code> 服务来打通各个系统之间的关联。</p>\n<h2 data-id=\"heading-1\">微服务</h2>\n<blockquote>\n<p>维基上对其定义为：一种软件开发技术- 面向服务的体系结构（SOA）架构样式的一种变体，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相沟通（通常是基于 <code>HTTP</code> 的 <code>RESTful API</code>）。每个服务都围绕着具体业务进行构建，并且能够独立地部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据上下文，选择合适的语言、工具对其进行构建。</p>\n</blockquote>\n<h4 data-id=\"heading-2\">微服务的优势</h4>\n<p>如上所说，微服务其实是将一个庞大的系统切割成多个最小单元，每一个单元都是一个或者一组相同的功能集合。</p>\n<p>与传统的服务开发不同的是，当一个项目拆解为微服务的时候，带来的优势有如下几点：</p>\n<ol>\n<li>不再局限于<strong>单一技术架构</strong>的实现，根据不同模块的特殊性可以有专业的技术解决方案；</li>\n<li>新的业务功能不需要承担旧的技术债，同时可以拆解服务逐步进行技术升级；</li>\n<li><strong>业务功能单一</strong>，复杂度下降，开发维护效率提高；</li>\n<li>独立部署，单服务启动速度提高，必要时可以根据实际情况对某一些服务进行服务器<strong>升级、扩容</strong>。</li>\n</ol>\n<h4 data-id=\"heading-3\">微服务通信方式</h4>\n<ol>\n<li>同步方式：<code>RPC</code>、<code>HTTP</code>、<code>TCP</code>；</li>\n<li>异步方式：消息队列，使用中过程中需要考虑消息的可靠传输、高性能等情况，常见的工具有<code>Kafka</code>、<code>Notify</code> 等。</li>\n</ol>\n<p><code>HTTP</code> 与 <code>TCP</code> 都是常见的通信方式，那么 <code>RPC</code> 又是啥？</p>\n<p><code>RPC</code> <strong>是一种设计、实现框架，通讯协议只是其中一部分</strong>，并不限定某一类的通信协议，大部分的 <code>RPC</code> 协议使用的是 <code>TCP</code>，但也可以使用 <code>HTTP</code> 协议来封装，比如谷歌的 <code>gRPC</code> 使用的就是 <code>HTTP2</code> 协议。</p>\n<p>在大概了解了微服务的一些知识之后，接下来继续我们的学习过程。</p>\n<h2 data-id=\"heading-4\">NestJS 微服务使用</h2>\n<p><code>NestJS</code> 作为一款非常成熟的框架，本身就支持微服务架构的设计，同时也内置了很多 <code>RPC</code> 的传输器，所以在 <code>NestJS</code> 中使用微服务是非常方便的。</p>\n<h4 data-id=\"heading-5\">启动微服务</h4>\n<p><strong>第一步</strong>：安装微服务依赖 <code>@nestjs/microservices</code></p>\n<pre><code class=\"hljs language-shell\" lang=\"shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">yarn add @nestjs/microservices</span>\n</code></pre>\n<p><strong>第二步</strong>：修改用户系统中 <code>user-center/src/main.ts</code> ，添加微服务启动配置，并启动用户系统的微服务</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">module</span>: <span class=\"hljs-built_in\">any</span>;\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NestFactory</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserCenterModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./user-center.module'</span>;\n\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">FastifyAdapter</span>,\n  <span class=\"hljs-title class_\">NestFastifyApplication</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/platform-fastify'</span>;\n\n<span class=\"hljs-keyword\">import</span> fastify <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'fastify'</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> cookieParser <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'cookie-parser'</span>;\n\n<span class=\"hljs-keyword\">import</span> { generateDocument } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./doc'</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FastifyLogger</span>, catchError, <span class=\"hljs-title class_\">AllExceptionsFilter</span>, <span class=\"hljs-title class_\">HttpExceptionFilter</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@app/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ValidationPipe</span>, <span class=\"hljs-title class_\">VersioningType</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> fastifyCookie <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@fastify/cookie'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">MicroserviceOptions</span>, <span class=\"hljs-title class_\">Transport</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/microservices'</span>;\n<span class=\"hljs-title function_\">catchError</span>()\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bootstrap</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 初始化 fastify </span>\n  <span class=\"hljs-keyword\">const</span> fastifyInstance = <span class=\"hljs-title function_\">fastify</span>({\n    <span class=\"hljs-attr\">logger</span>: <span class=\"hljs-title class_\">FastifyLogger</span>,\n  })\n\n  <span class=\"hljs-comment\">// 创建 NEST 实例</span>\n  <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">NestFactory</span>.<span class=\"hljs-property\">create</span>&lt;<span class=\"hljs-title class_\">NestFastifyApplication</span>&gt;(\n    <span class=\"hljs-title class_\">UserCenterModule</span>,\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FastifyAdapter</span>(fastifyInstance)\n  );\n\n  <span class=\"hljs-comment\">// micro serivce</span>\n  app.<span class=\"hljs-property\">connectMicroservice</span>&lt;<span class=\"hljs-title class_\">MicroserviceOptions</span>&gt;(\n    {\n      <span class=\"hljs-attr\">transport</span>: <span class=\"hljs-title class_\">Transport</span>.<span class=\"hljs-property\">TCP</span>,\n      <span class=\"hljs-attr\">options</span>: {\n        <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">4100</span>,\n        <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">'0.0.0.0'</span>,\n      },\n    },\n    {\n      <span class=\"hljs-attr\">inheritAppConfig</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 继承 app 配置</span>\n    },\n  );\n\n  app.<span class=\"hljs-title function_\">register</span>(fastifyCookie, {\n    <span class=\"hljs-attr\">secret</span>: <span class=\"hljs-string\">'my-secret'</span>, <span class=\"hljs-comment\">// for cookies signature</span>\n  });\n\n  <span class=\"hljs-comment\">// 异常过滤器</span>\n  app.<span class=\"hljs-title function_\">useGlobalFilters</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AllExceptionsFilter</span>(), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpExceptionFilter</span>());\n\n  <span class=\"hljs-comment\">// 设置全局接口前缀</span>\n  app.<span class=\"hljs-title function_\">setGlobalPrefix</span>(<span class=\"hljs-string\">'api'</span>);\n\n  <span class=\"hljs-comment\">// 格式化 cookie</span>\n  app.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title function_\">cookieParser</span>());\n\n  <span class=\"hljs-comment\">// 接口版本化管理</span>\n  app.<span class=\"hljs-title function_\">enableVersioning</span>({\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">VersioningType</span>.<span class=\"hljs-property\">URI</span>,\n  });\n\n  <span class=\"hljs-comment\">// 启动全局字段校验，保证请求接口字段校验正确。</span>\n  app.<span class=\"hljs-title function_\">useGlobalPipes</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ValidationPipe</span>());\n\n  <span class=\"hljs-comment\">// 创建文档</span>\n  <span class=\"hljs-title function_\">generateDocument</span>(app)\n\n  <span class=\"hljs-comment\">// 启动所有微服务</span>\n  <span class=\"hljs-keyword\">await</span> app.<span class=\"hljs-title function_\">startAllMicroservices</span>();\n\n  <span class=\"hljs-comment\">// 启动服务</span>\n  <span class=\"hljs-keyword\">await</span> app.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">4000</span>);\n\n  <span class=\"hljs-comment\">// 添加热更新</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">hot</span>) {\n    <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">hot</span>.<span class=\"hljs-title function_\">accept</span>();\n    <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">hot</span>.<span class=\"hljs-title function_\">dispose</span>(<span class=\"hljs-function\">() =&gt;</span> app.<span class=\"hljs-title function_\">close</span>());\n  }\n}\n<span class=\"hljs-title function_\">bootstrap</span>();\n</code></pre>\n<p>重启服务，看到控制台中有如下打印日志即代表微服务启动成功：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/638ff629248a406e81ea2a4a90c75a51~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>也可以使用 <code>netstat -ano -p tcp|findstr 4100</code> 检查 TCP 端口是否正常启动：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/690f529ae82948a590f22e8ef1392cc2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<blockquote>\n<p>默认情况下，使用 <code>NestJS</code> 自带的 <code>RPC</code> 将使用 <strong>TCP协议</strong>&nbsp;监听消息。</p>\n</blockquote>\n<p><strong>第三步</strong>：在物料系统中添加 <code>RPC</code> 客户端连接：</p>\n<p><code>.dev.yaml</code> 文件新增新的配置项 <code>USER_MICROSERVICES</code>：</p>\n<pre><code class=\"hljs language-yml\" lang=\"yml\"><span class=\"hljs-attr\">USER_MICROSERVICES:</span>\n  <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">\"0.0.0.0\"</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">4100</span>\n</code></pre>\n<p>新建 <code>materials/src/microservices/microservices.module.ts</code>，添加如下代码，并导入 <code>materials.module.ts</code> 后，重启即可：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Module</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ClientsModule</span>, <span class=\"hljs-title class_\">Transport</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/microservices'</span>;\n<span class=\"hljs-keyword\">import</span> { getConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@app/common'</span>;\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-variable constant_\">USER_MICROSERVICES</span> } = <span class=\"hljs-title function_\">getConfig</span>()\n\n<span class=\"hljs-meta\">@Module</span>({\n  <span class=\"hljs-attr\">imports</span>: [\n    <span class=\"hljs-title class_\">ClientsModule</span>.<span class=\"hljs-title function_\">register</span>([\n      {\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'USER-SERVER'</span>,\n        <span class=\"hljs-attr\">transport</span>: <span class=\"hljs-title class_\">Transport</span>.<span class=\"hljs-property\">TCP</span>,\n        <span class=\"hljs-attr\">options</span>: <span class=\"hljs-variable constant_\">USER_MICROSERVICES</span>,\n      },\n    ]),\n  ],\n  <span class=\"hljs-attr\">providers</span>: [],\n  <span class=\"hljs-attr\">exports</span>: []\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MicroservicesModule</span> { }\n</code></pre>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1617b6bb8bfe4960975743e104a82196~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h4 data-id=\"heading-6\">用户系统打通</h4>\n<p><strong>第一步</strong>：在用户系统的 <code>user/UserController</code> 添加如下代码：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">MessagePattern</span>, <span class=\"hljs-title class_\">Payload</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">MicroPayload</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/microservices'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> userService: UserService,\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> userRoleService: UserRoleService\n  </span>) { }\n  <span class=\"hljs-meta\">@MessagePattern</span>(<span class=\"hljs-string\">'userCenter.user.profile'</span>)\n  <span class=\"hljs-meta\">@Public</span>()\n  <span class=\"hljs-title function_\">micro_profile</span>(<span class=\"hljs-params\"><span class=\"hljs-meta\">@MicroPayload</span>() data: Payload</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">profile</span>(data);\n  }\n}\n</code></pre>\n<p><strong>第二步</strong>：在物料系统中移植之前的 <code>Auth</code> 模块，只保留以下模块：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea2be6057f73452d907064453fc60fc4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p><strong>第三步</strong>：物料系统中新增 <code>microservices/user.service.ts</code>：</p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\">import { Injectable, Inject } from '@nestjs/common';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { firstValueFrom } from 'rxjs';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @Inject('USER-SERVER') private userServer: ClientProxy\n  ) { }\n\n  getUser(user) {\n<span class=\"hljs-deletion\">-   return this.userServer.send('userCenter.user.profile', user)</span>\n<span class=\"hljs-addition\">+   return firstValueFrom(this.userServer.send('userCenter.user.profile', user))</span>\n  }\n}\n</code></pre>\n<blockquote>\n<p>注意客户端中获取 <code>RPC</code> 服务端的接口的方法是 <code>ClientProxy</code>&nbsp;中的 <code>send()</code>，此方法请求并返回是响应数据流的&nbsp;<code>Observable</code>，这并不是正常的 <code>HTTP</code> 返回的内容，而是通过 <code>TCP</code> 协议传输的内容。所以直接获取值是获取不到的，一定要记得使用 <code>rxjs</code> 中的 <code>firstValueFrom</code> 包一层才能拿到正常的返回值。</p>\n</blockquote>\n<p><strong>第四步</strong>：物料系统中新增 <code>src/auth/permission.guard.ts</code></p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">CanActivate</span>,\n  <span class=\"hljs-title class_\">ExecutionContext</span>,\n  <span class=\"hljs-title class_\">Injectable</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Reflector</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../microservices/user.service'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">IS_PUBLIC_KEY</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../constants'</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PermissionGuard</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">CanActivate</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> reflector: Reflector, <span class=\"hljs-keyword\">private</span> userService: UserService</span>) { }\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">canActivate</span>(<span class=\"hljs-attr\">context</span>: <span class=\"hljs-title class_\">ExecutionContext</span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">boolean</span>&gt; {\n    <span class=\"hljs-keyword\">const</span> loginAuth = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">reflector</span>.<span class=\"hljs-property\">getAllAndOverride</span>&lt;<span class=\"hljs-built_in\">boolean</span>&gt;(<span class=\"hljs-variable constant_\">IS_PUBLIC_KEY</span>, [\n      context.<span class=\"hljs-title function_\">getHandler</span>(),\n      context.<span class=\"hljs-title function_\">getClass</span>(),\n    ]);\n    <span class=\"hljs-keyword\">if</span> (loginAuth) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">const</span> request = context.<span class=\"hljs-title function_\">switchToHttp</span>().<span class=\"hljs-title function_\">getRequest</span>();\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">user</span>: <span class=\"hljs-title class_\">Payload</span> = request.<span class=\"hljs-property\">user</span>;\n    <span class=\"hljs-keyword\">const</span> codes = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userService</span>.<span class=\"hljs-title function_\">getUser</span>(user);\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'microservices===&gt;'</span>, codes)\n    <span class=\"hljs-keyword\">return</span> codes;\n  }\n}\n</code></pre>\n<p><code>第五步</code>：将新的网关验证 <code>PermissionGuard</code> 导入 <code>materials.module.ts</code>：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">CacheModule</span>, <span class=\"hljs-title class_\">Module</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">APP_GUARD</span>, <span class=\"hljs-variable constant_\">APP_INTERCEPTOR</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/core'</span>;\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ConfigModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/config'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">TransformInterceptor</span>, getConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@app/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">GroupModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./materials/group/group.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">MaterialModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./materials/material/material.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ProjectModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./materials/project/project.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">TaskModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./materials/task/task.module'</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> redisStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'cache-manager-redis-store'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">JwtAuthGuard</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./auth/guards/jwt-auth.guard'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./auth/auth.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">MicroservicesModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./microservices/microservices.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">PermissionGuard</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./auth/guards/permission.guard'</span>;\n\n<span class=\"hljs-meta\">@Module</span>({\n  <span class=\"hljs-attr\">imports</span>: [\n    <span class=\"hljs-title class_\">CacheModule</span>.<span class=\"hljs-title function_\">register</span>({\n      <span class=\"hljs-attr\">isGlobal</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">store</span>: redisStore,\n      <span class=\"hljs-attr\">host</span>: <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-string\">'REDIS_CONFIG'</span>).<span class=\"hljs-property\">host</span>,\n      <span class=\"hljs-attr\">port</span>: <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-string\">'REDIS_CONFIG'</span>).<span class=\"hljs-property\">port</span>,\n      <span class=\"hljs-attr\">auth_pass</span>: <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-string\">'REDIS_CONFIG'</span>).<span class=\"hljs-property\">auth</span>,\n      <span class=\"hljs-attr\">db</span>: <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-string\">'REDIS_CONFIG'</span>).<span class=\"hljs-property\">db</span>\n    }),\n    <span class=\"hljs-title class_\">ConfigModule</span>.<span class=\"hljs-title function_\">forRoot</span>({\n      <span class=\"hljs-attr\">ignoreEnvFile</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">isGlobal</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">load</span>: [getConfig]\n    }),\n    <span class=\"hljs-title class_\">MicroservicesModule</span>,\n    <span class=\"hljs-title class_\">GroupModule</span>,\n    <span class=\"hljs-title class_\">TaskModule</span>,\n    <span class=\"hljs-title class_\">MaterialModule</span>,\n    <span class=\"hljs-title class_\">ProjectModule</span>,\n    <span class=\"hljs-title class_\">AuthModule</span>\n  ],\n  <span class=\"hljs-attr\">controllers</span>: [],\n  <span class=\"hljs-attr\">providers</span>: [\n    {\n      <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-variable constant_\">APP_INTERCEPTOR</span>,\n      <span class=\"hljs-attr\">useClass</span>: <span class=\"hljs-title class_\">TransformInterceptor</span>,\n    },\n    {\n      <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-variable constant_\">APP_GUARD</span>,\n      <span class=\"hljs-attr\">useClass</span>: <span class=\"hljs-title class_\">JwtAuthGuard</span>,\n    },\n    {\n      <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-variable constant_\">APP_GUARD</span>,\n      <span class=\"hljs-attr\">useClass</span>: <span class=\"hljs-title class_\">PermissionGuard</span>,\n    },\n  ],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MaterialsModule</span> { }\n</code></pre>\n<p>然后访问物料系统的任意 <code>API</code> 得到如下结果则代表微服务正常启动，下图中使用的接口是<a href=\"https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2Fdoc%23%2F%25E9%25A1%25B9%25E7%259B%25AE%2FProjectController_getList\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"http://localhost:3000/doc#/%E9%A1%B9%E7%9B%AE/ProjectController_getList\" ref=\"nofollow noopener noreferrer\">http://localhost:3000/doc#/%E9%A1%B9%E7%9B%AE/ProjectController_getList</a></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a6ed6fcdd464a09bf15d605c93fcf70~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<blockquote>\n<p>由于是两个项目，启动后是不同的端口，所以在用户系统中登录之后保存的 <code>token</code> 是不会共享 <code>cookie</code> 在物料系统下面，所以为了方便，大家可以在用户系统登录完毕之后，手动将 <code>cookie</code> 存在物料系统下，如下图所示：</p>\n</blockquote>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56532ebefe634c9ba62531171d4883a8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>至此已经完成了用户与物料系统的微服务打通，有兴趣的话，可以再将 <code>auth</code> 与 <code>microservices</code> 模块也一起放在 <code>libs common</code> 模块中，这样网关 <code>Core</code> 系统也能直接使用通用的鉴权工具。</p>\n<h2 data-id=\"heading-7\">写在最后</h2>\n<p>本章的示例代码在 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway%2Ftree%2Ffeat%2Fmicroservices\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway/tree/feat/microservices\" ref=\"nofollow noopener noreferrer\">feat/microservices</a>，后续会进行持续的迭代，有需要的同学自取。</p>\n<p>本章主要介绍了如何在 <code>NestJS</code> 中使用 <code>RPC</code> 来打通各个微服务中的功能，前文的例子非常简单，实际上我们可以做的内容非常多的，比如在 <code>PermissionGuard</code> 中，我们可以通过 <code>RPC</code> 从用户系统中获取该登录用户的权限，然后再根据返回的权限对物料系统的接口做权限限制等。</p>\n<p>示例中我们使用的微服务通信方式为同步模式，微服务的通信方式还有异步模式（一般也就是消息队列），但在我们的网关系统中其实是没有使用消息队列的场景，所以在网关系统中就无此实战，但是消息队列在 <code>Devops</code> 与物料系统的打通中会有很大的应用场景，所以各位可以持续关注 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design\" ref=\"nofollow noopener noreferrer\">github.com/boty-design</a> 这个组织，后期会以开源的方式完成整个工程的搭建。</p>\n<p><strong>想了解后续的工程进度的同学，记得进学习群，每一次的功能发布，我都会在群里及时通知。</strong></p>\n<p>如果你有什么疑问，欢迎在评论区提出或者加群沟通。 👏</p></div>"
    },
    {
        "name": "17\n进阶篇：自动化测试\n学习时长: 25分51秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>如果已经学习到了这一章，相信你已经至少将之前的项目做了一个大概的雏形出来了。</p>\n<p>无论是参考示例还是全部靠自己做出来的，总之恭喜你已经度过了在一个项目开发周期中的最开心的时刻，因为之前每一项功能的完成，带来的都是一个个的成就感，让人能坚持下来并且乐此不彼的是在旅途中能不断的完成一些阶段性的目标，但接下来要做的我猜是大部分的开发都有点头疼的是事情，因为本章开始我们需要写自动化测试用例了。</p>\n<h2 data-id=\"heading-1\">NestJS 自动化测试</h2>\n<p>一个项目的质量需要靠什么来保证，肯定不是看开发人员的经验，只要是人一定会犯错，没有完美的人也没有完美的程序。但从概率学上来说机器一定是比较靠谱的，毕竟只有逻辑而没有感情，所以自动化测试能够给予项目一定的质量和性能保证，同时一个项目的自动测测试用例覆盖越全面，对于测试同学的负担也就越少。</p>\n<p>自动化测试有非常多的类型有单元测试，端到端(<code>e2e</code>)测试，集成测试等等，自动测试的框架也非常多，所幸<code>NestJS</code> 提供了内置开箱即用的 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Ffacebook%2Fjest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/facebook/jest\" ref=\"nofollow noopener noreferrer\">Jest</a> 和 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fvisionmedia%2Fsupertest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/visionmedia/supertest\" ref=\"nofollow noopener noreferrer\">SuperTest</a> 集成，以及在测试环境中可以模拟 <code>NestJS</code> 的依赖注入体系，更方便的测试模块，这样使得我们可以降低一定的选择困难症，直接使用 <code>NestJS</code> 集成的即可。</p>\n<blockquote>\n<p>当然你仍然可以选择自己熟悉的自动化测试框架（例如：<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fmochajs.org%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://mochajs.org/\" ref=\"nofollow noopener noreferrer\">mocha</a>）来使用，<code>NestJS</code> 框架并未对你做过多的限制，只是处于 <code>NestJS</code> 的体系当中，除非有特殊需求，否则还是建议使用自带的测试功能。</p>\n</blockquote>\n<h4 data-id=\"heading-2\">Unit TEST</h4>\n<p>首先安装 <code>NestJS</code> 测试工具的依赖 <code>@nestjs/testing</code>，如果是 <code>CLI</code> 创建的话就不需要再安装依赖了。</p>\n<pre><code class=\"hljs language-shell\" lang=\"shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">yarn add @nestjs/testing</span>\n</code></pre>\n<p>还记得之前在使用 <code>CLI</code> 快速创建的 <code>*.spec.ts</code> 文件吗？接下来我们就要使用上它了。</p>\n<p><strong>第一步</strong>：在 <code>intercepter.controller.ts</code> 中新增一个测试方法：</p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\">import {\n  Controller,\n  Get,\n  Req,\n  Res,\n} from '@nestjs/common';\nimport { FastifyReply, FastifyRequest } from 'fastify';\nimport { URL } from 'url';\nimport { IntercepterService } from './intercepter.service';\n\n@Controller()\nexport class IntercepterController {\n  constructor(private readonly intercepterService: IntercepterService) { }\n\n  @Get('*')\n  async getApp(@Req() req: FastifyRequest, @Res() res: FastifyReply) {\n    const urlObj = new URL(req.url, `http://${req.headers.host}`);\n    console.log(urlObj)\n    if (urlObj.pathname <span class=\"hljs-comment\">=== '/favicon.ico') return res.send('ico');</span>\n\n    const html = await this.intercepterService.readHtml(urlObj);\n\n    if (!html) return res.send('404');\n\n    res.headers({\n      'Content-Type': 'text/html',\n    });\n    res.send(html);\n  }\n\n<span class=\"hljs-addition\">+  @Get('test')</span>\n<span class=\"hljs-addition\">+  getTest() {</span>\n<span class=\"hljs-addition\">+    return 'test'</span>\n<span class=\"hljs-addition\">+  }</span>\n}\n\n</code></pre>\n<p><strong>第二步</strong>：新建 <code>intercepter.controller.spec.ts</code>，一般单元测试用例与测试模块保持在同一个目录下。</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">IntercepterController</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./intercepter.controller'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">IntercepterService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./intercepter.service'</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ConfigService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/config'</span>;\n<span class=\"hljs-keyword\">import</span> { getConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@app/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FastifyRequest</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'fastify'</span>;\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">'IntercepterController'</span>, <span class=\"hljs-function\">() =&gt;</span> {\n\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">intercepterController</span>: <span class=\"hljs-title class_\">IntercepterController</span>;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">intercepterService</span>: <span class=\"hljs-title class_\">IntercepterService</span>;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">configService</span>: <span class=\"hljs-title class_\">ConfigService</span>;\n\n  <span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    configService = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConfigService</span>({\n      <span class=\"hljs-attr\">isGlobal</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">load</span>: [getConfig]\n    })\n\n    intercepterService = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IntercepterService</span>(configService);\n    intercepterController = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IntercepterController</span>(intercepterService);\n  });\n\n  <span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">'getTest'</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">'should return an html'</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n <span class=\"hljs-comment\">//     const result = 'devops';</span>\n      <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-string\">'test'</span>;\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-keyword\">await</span> intercepterController.<span class=\"hljs-title function_\">getTest</span>()).<span class=\"hljs-title function_\">toBe</span>(result);\n    });\n  });\n});\n</code></pre>\n<p><strong>第三步</strong>：运行测试命令 <code>yarn test</code>，即可获得如下结果，当 <code>result</code> 分别是 <code>devops</code> 与 <code>test</code> 的测试结果如下：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41fc4c9c93bd48c0bbfbcdd660ed6b46~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6bb7d968b9a44d348dfe3766a14fb0b3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>如上一个非常简单测试用例就完成了，接下来我们挑战一下高难的测试用例开发，来测试我们之前的网关代理接口。</p>\n<p>首先看下 <code>IntercepterController</code> 的 <code>getApp</code> 这个方法，它的入参分别为 <code>@Req</code> 与 <code>@Res</code>，在单元测试中是没有正常的请求体的，所以需要手动将这两个入参数据模拟出来，我们可以借助 <code>mock-req-res</code> 这个库来生成模拟参数：</p>\n<pre><code class=\"hljs language-shell\" lang=\"shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">yarn add mock-req-res</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">yarn add sinon</span>\n</code></pre>\n<p>在 <code>intercepter.controller.spec.ts</code> 中新增测试方法：</p>\n<pre><code class=\"hljs language-dart\" lang=\"dart\">  describe(<span class=\"hljs-string\">'getApp'</span>, () =&gt; {\n    it(<span class=\"hljs-string\">'should return devops'</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n      <span class=\"hljs-keyword\">const</span> req = mockRequest({\n        headers: {\n          host: <span class=\"hljs-string\">'www.cookieboty.com'</span>\n        },\n        url: <span class=\"hljs-string\">'/devops'</span>\n      })\n      <span class=\"hljs-keyword\">const</span> res = mockResponse()\n      <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-string\">'devops'</span>;\n      expect(<span class=\"hljs-keyword\">await</span> intercepterController.getApp(req, res)).toBe(result);\n    });\n  });\n</code></pre>\n<p>继续执行之前的测试脚本：<code>yarn test</code> 即可得到如下结果：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0feed309c6074543971312a9b6ebf7ea~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>啊嘞，报错很正常，从报错信息能很明显看出是模拟的 <code>@Res</code> 参数有问题，另外在 <code>getApp</code> 中是直接使用了 <code>res.send</code> 返回数据，这样在单元测试中是无法拿到正常的返回值，所以也需要同时修改 <code>getApp</code> 的返回方法：</p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\"> @Get('*')\n  async getApp(@Req() req: FastifyRequest, @Res() res: FastifyReply) {\n    const urlObj = new URL(req.url, `http://${req.headers.host}`);\n    if (urlObj.pathname <span class=\"hljs-comment\">=== '/favicon.ico') return res.send('ico');</span>\n    const html = await this.intercepterService.readHtml(urlObj);\n\n    if (!html) return res.send('404');\n\n    res.headers({\n      'Content-Type': 'text/html',\n    });\n<span class=\"hljs-deletion\">-   res.send(html);</span>\n<span class=\"hljs-addition\">+   return res.send(html);</span>\n  }\n</code></pre>\n<p>然后在修改 <code>intercepter.controller.spec.ts</code> 的 <code>getApp</code> 方法：</p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\">describe('getApp', () =&gt; {\n    it('should return devops', async () =&gt; {\n      const req = mockRequest({\n        headers: {\n          host: 'www.cookieboty.com'\n        },\n        url: '/devops'\n      })\n<span class=\"hljs-deletion\">-      const res = mockResponse()</span>\n<span class=\"hljs-addition\">+      const res = mockResponse({</span>\n<span class=\"hljs-addition\">+        headers: () =&gt; { },</span>\n<span class=\"hljs-addition\">+        send: d =&gt; d</span>\n<span class=\"hljs-addition\">+      })</span>\n      const result = 'devops';\n      expect(await intercepterController.getApp(req, res)).toBe(result);\n    });\n  });\n</code></pre>\n<p>再次运行测试脚本得到如下结果代表测试成功：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/adc693c624454185b6f8f4b56a02adc9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>上述的测试脚本，其实还没有使用到 <code>NestJS</code> 给我们提供的测试工具，大家可以发现，我们是将 <code>ConfigService</code> 与 <code>IntercepterService</code> 实例直接传递的，当依赖的测试模块多起来的时候并不是非常方便，接下来我们使用 <code>NestJS</code> 提供的测试工具来修改我们的脚本。</p>\n<pre><code class=\"hljs language-diff\" lang=\"diff\">// intercepter.controller.spec.ts\n  beforeEach(async () =&gt; {\n  \n<span class=\"hljs-deletion\">-    configService = new ConfigService({</span>\n<span class=\"hljs-deletion\">-      isGlobal: true,</span>\n<span class=\"hljs-deletion\">-      load: [getConfig]</span>\n<span class=\"hljs-deletion\">-    })</span>\n<span class=\"hljs-deletion\">-    intercepterService = new IntercepterService(configService);</span>\n<span class=\"hljs-deletion\">-    intercepterController = new IntercepterController(intercepterService);</span>\n    \n<span class=\"hljs-addition\">+    const moduleRef = await Test.createTestingModule({</span>\n<span class=\"hljs-addition\">+      imports: [IntercepterModule,</span>\n<span class=\"hljs-addition\">+        ConfigModule.forRoot({</span>\n<span class=\"hljs-addition\">+          ignoreEnvFile: true,</span>\n<span class=\"hljs-addition\">+          isGlobal: true,</span>\n<span class=\"hljs-addition\">+          load: [getConfig]</span>\n<span class=\"hljs-addition\">+        }),],</span>\n<span class=\"hljs-addition\">+    }).compile();</span>\n\n<span class=\"hljs-addition\">+    intercepterService = moduleRef.get&lt;IntercepterService&gt;(IntercepterService);</span>\n<span class=\"hljs-addition\">+    intercepterController = moduleRef.get&lt;IntercepterController&gt;(IntercepterController);</span>\n  });\n</code></pre>\n<p>从以上代码对比大家可以发现，使用了 <code>NestJS</code> 自带的 <code>Test.createTestingModule</code> 方法后，除了不再需要主动实例化类之外，其他所有相关的依赖，我们只需要借助 <code>NestJS</code> 本身的依赖注入就可以完成，同时使用 <code>createTestingModule</code> ，会模拟 <code>NestJS</code> 的运行时，可以获取到上下文，所以拓展性会变得更高，有兴趣的同学可以试试更多的功能。</p>\n<h4 data-id=\"heading-3\">E2E TEST</h4>\n<p>单元测试主要是某个方法或者模块的逻辑测试，而 <code>E2E</code> 测试在更聚合的层面覆盖了类和模块的交互，尽可能的模拟用户在生产环境的操作。</p>\n<p>当需要测试的链路非常长与复杂的情况下，单元测试是无法很好的保证链路可靠性，或者说它会变得更加复杂，所以这个时候也就需要 <code>E2E</code> 测试来保证链接的稳定与正确性。</p>\n<p>接下来我们来一起学习 E2E 的测试用例开发。</p>\n<p>首先在项目的 <code>test</code> 文件夹下创建 <code>apps/fast-gateway/test/intercepter.e2e-spec.ts</code> 文件：</p>\n<pre><code class=\"hljs language-ts\" lang=\"ts\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> request <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'supertest'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Test</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/testing'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FastifyAdapter</span>, <span class=\"hljs-title class_\">NestFastifyApplication</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/platform-fastify'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">IntercepterModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../src/core/intercepter.module'</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ConfigService</span>, <span class=\"hljs-title class_\">ConfigModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/config'</span>;\n<span class=\"hljs-keyword\">import</span> { getConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../src/utils/index'</span>;\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">'Cats'</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">app</span>: <span class=\"hljs-title class_\">NestFastifyApplication</span>;\n\n  <span class=\"hljs-title function_\">beforeAll</span>(<span class=\"hljs-keyword\">async</span> () =&gt; {\n    <span class=\"hljs-keyword\">const</span> moduleRef = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Test</span>.<span class=\"hljs-title function_\">createTestingModule</span>({\n      <span class=\"hljs-attr\">imports</span>: [<span class=\"hljs-title class_\">IntercepterModule</span>,\n        <span class=\"hljs-title class_\">ConfigModule</span>.<span class=\"hljs-title function_\">forRoot</span>({\n          <span class=\"hljs-attr\">ignoreEnvFile</span>: <span class=\"hljs-literal\">true</span>,\n          <span class=\"hljs-attr\">isGlobal</span>: <span class=\"hljs-literal\">true</span>,\n          <span class=\"hljs-attr\">load</span>: [getConfig]\n        }),],\n    }).<span class=\"hljs-title function_\">compile</span>();\n\n    app = moduleRef.<span class=\"hljs-property\">createNestApplication</span>&lt;<span class=\"hljs-title class_\">NestFastifyApplication</span>&gt;(\n      <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FastifyAdapter</span>(),\n    );\n\n    <span class=\"hljs-keyword\">await</span> app.<span class=\"hljs-title function_\">init</span>();\n    <span class=\"hljs-keyword\">await</span> app.<span class=\"hljs-title function_\">getHttpAdapter</span>().<span class=\"hljs-title function_\">getInstance</span>().<span class=\"hljs-title function_\">ready</span>();\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">`/GET devops`</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">request</span>(app.<span class=\"hljs-title function_\">getHttpServer</span>())\n      .<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'/devops'</span>)\n      .<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'host'</span>, <span class=\"hljs-string\">'www.cookieboty.com'</span>)\n      .<span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-number\">200</span>)\n      .<span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-string\">'devops'</span>);\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">`/GET jenkins`</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">request</span>(app.<span class=\"hljs-title function_\">getHttpServer</span>())\n      .<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'/jenkins'</span>)\n      .<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'host'</span>, <span class=\"hljs-string\">'www.cookieboty.com'</span>)\n      .<span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-number\">200</span>)\n      .<span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-string\">'jenkins'</span>);\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">`/GET 404`</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">request</span>(app.<span class=\"hljs-title function_\">getHttpServer</span>())\n      .<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'/jenk'</span>)\n      .<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'host'</span>, <span class=\"hljs-string\">'www.cookieboty.com'</span>)\n      .<span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-number\">200</span>)\n      .<span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-string\">'404'</span>);\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">`/GET nginx`</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">request</span>(app.<span class=\"hljs-title function_\">getHttpServer</span>())\n      .<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'/nginx'</span>)\n      .<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'host'</span>, <span class=\"hljs-string\">'www.cookieboty.com'</span>)\n      .<span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-number\">200</span>)\n      .<span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-string\">'nginx2'</span>);\n  });\n\n  <span class=\"hljs-title function_\">afterAll</span>(<span class=\"hljs-keyword\">async</span> () =&gt; {\n    <span class=\"hljs-keyword\">await</span> app.<span class=\"hljs-title function_\">close</span>();\n  });\n});\n</code></pre>\n<blockquote>\n<p><code>e2e</code> 的测试文件一定要放在对应项目的 <code>test</code> 文件夹中，否则不会生效。</p>\n</blockquote>\n<p>接下来运行 <code>e2e</code> 测试脚本：<code>yarn test:e2e</code>，下图分别是测试用例正常与异常的示例：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0804420a6cf4137a1a295052d102a91~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b265c3df26764b72b3dd0a835ffcf5ad~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<h2 data-id=\"heading-4\">写在最后</h2>\n<p>本章的示例代码在 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fboty-design%2Fgateway%2Ftree%2Ffeat%2Fmicroservices\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://github.com/boty-design/gateway/tree/feat/microservices\" ref=\"nofollow noopener noreferrer\">feat/microservices</a>，后续会进行持续的迭代，有需要的同学自取。</p>\n<p>大家对比一下可以我们的开发代码与测试代码即可发现，测试用例的代码量远超开发的代码，由于要涵盖的逻辑非常多，所以为了保证测试用例的质量会有大量的用例判断。</p>\n<p>虽然测试用例能很好的保证代码的质量，但是会消耗非常多的时间来开发，这也是为什么我在开发项目最开始的时候跟大家提过，如果项目紧急的情况下，可以先把测试用例开发放在最后，测试用例覆盖最主要的核心功能即可。</p>\n<p>由于网关系统代理的测试用例很特殊，需要针对域名做处理，所以本章的例子主要围绕着模拟请求体与修改 <code>Host</code> 来展现，其他简单的 <code>CURD</code> 的测试用例大家可以尽可能的多写写，熟能生巧。</p>\n<p><code>Jest</code> 的功能还是非常强大的，还有非常多有趣以及有用的 <code>Api</code> 大家可以自行研究参考下，有问题的话欢迎在群里提出交流，</p>\n<p>如果你有什么疑问，欢迎在评论区提出或者加群沟通。 👏</p></div>"
    },
    {
        "name": "18\n进阶篇：应用部署\n学习时长: 10分2秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>按照目前的进度，相信很多同学已经完成基础篇的内容，也有部分同学完成了用户或者物料系统的开发，所以应广大同学的要求，将应用部署这章提前写出来，方便大家完成项目开发流程中关键的最后一步。</p>\n<p>与开发环境不同，在生产环境中服务端的项目都需要后台启动，如果是前端启动的话，当你关闭 <code>shh</code> 连接或者控制台的时候，程序也就自动退出了，这显然不是我们希望的结果。</p>\n<p>本章将介绍 <code>NestJS</code> 两种方式的发布类型： <code>PM2</code> 与 <code>Docker Compose</code> 部署。</p>\n<h2 data-id=\"heading-1\">PM2</h2>\n<p><a href=\"https://link.juejin.cn?target=https%3A%2F%2Fpm2.keymetrics.io%2Fdocs%2Fusage%2Fquick-start%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" title=\"https://pm2.keymetrics.io/docs/usage/quick-start/\" ref=\"nofollow noopener noreferrer\">PM2</a> 是一款使用于生产环境的 <code>NodeJS</code> 的进程管理工具，操作非常简便，内置了进程管理、监控、日志以及负载均衡的能力。</p>\n<p>首先需要安装 <code>PM2</code> 的依赖，一般会安装在全局依赖：</p>\n<pre><code class=\"hljs language-shell\" lang=\"shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">yarn global add pm2</span>\n</code></pre>\n<p>普通的前端项目启动的话，直接使用以下命令就行了：</p>\n<pre><code class=\"hljs language-shell\" lang=\"shell\">pm2 start app.js\n</code></pre>\n<p>但毕竟是这一个实战的项目而且也有不同的环境变量存在，直接这么启动并不合适，可以借助 <code>Ecosystem File</code> 来完成我们的需求。</p>\n<ol>\n<li>项目根目录新建 <code>ecosystem.config.js</code>：</li>\n</ol>\n<pre><code class=\"hljs language-js\" lang=\"js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">apps</span>: [\n    {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"gateway\"</span>,\n      <span class=\"hljs-attr\">script</span>: <span class=\"hljs-string\">\"dist/src/main.js\"</span>,\n      <span class=\"hljs-attr\">env_production</span>: {\n        <span class=\"hljs-attr\">RUNNING_ENV</span>: <span class=\"hljs-string\">\"prod\"</span>\n      },\n      <span class=\"hljs-attr\">env_development</span>: {\n        <span class=\"hljs-attr\">RUNNING_ENV</span>: <span class=\"hljs-string\">\"dev\"</span>\n      }\n    }\n  ]\n}\n</code></pre>\n<ol start=\"2\">\n<li>添加 <code>package.json</code> 中的 <code>scripts</code> 构建命令：</li>\n</ol>\n<pre><code class=\"hljs language-diff\" lang=\"diff\"><span class=\"hljs-addition\">+ \"build\": \"nest build\",</span>\n<span class=\"hljs-addition\">+ \"build:webpack\": \"nest build --webpack\",</span>\n</code></pre>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9413666d6ab417bb3a04f8387bab393~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>对比一下两种构建命令的不同点：</p>\n<ul>\n<li><code>nest build</code>：将 <code>NestJS</code> 项目的源码从 <code>TS</code> 编译成 <code>JS</code> 之后再使用 <code>node main.js</code> 来运行项目，这样有个好处是还能看到大概的工程路径，也可以使用 <code>TypeOrm</code> 动态注册实体类的功能。</li>\n<li><code>nest build --webpack</code> 会将 <code>NestJS</code> 项目打包成一个独立的 <code>main.js</code>，从文件类型的角度来说，做了一次混淆跟合并，原理跟之前提到过的热更新启动是一样的，按照这种模式的话来使用的话，<strong>就不能使用动态注册实体类的功能，只能手动引入实体类</strong>。</li>\n</ul>\n<p>两种构建产物的方式都可以完成要求，按照自己的喜好选择就行，但无论是 <code>webpack</code> 打包成单文件的模式还是使用 <code>TSC</code> 模式生成 <code>JS</code> 项目代码，都需要在发布工程里面添加 <code>node_modules</code>，否则是没办法正常启动。</p>\n<p>因为这两种模式并没有将依赖直接打包进产物内，虽然可以曲线修改 <code>webpack.config</code> 可以使得在 <code>webpack</code> 模式下，能将所有的依赖都打入单文件，但是由于环境依赖的问题，这种模式的产物大概率只能在相同的环境运行依赖，例如 <code>windows</code> 下打包的产物是无法部署在 <code>linux</code> 环境下。</p>\n<ol start=\"3\">\n<li>在 <code>package.json</code> 的 <code>scripts</code> 中添加启动脚本：</li>\n</ol>\n<pre><code class=\"hljs language-diff\" lang=\"diff\"><span class=\"hljs-addition\">+ \"start:prod\": \"nest build &amp;&amp; pm2 start ecosystem.config.js --env production\"</span>\n</code></pre>\n<p>添加完毕之后，执行 <code>yarn start:prod</code> 出现如下界面既完成了项目生产环境的部署，如果不能正常访问接口的话，可以使用 <code>pm2 log gateway</code> 查看启动日志，如果按照我给的方案走一般不会出现问题，有问题的话，大概率是配置文件找不到，调整配置文件即可。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e6ebe6ebbc04661893303c0aa76ba47~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<blockquote>\n<p><strong>切记，如果使用 webpack 模式部署生产环境，一定要手动注册实体类！！！！不然会报错的！！！！</strong></p>\n</blockquote>\n<p>更多的 <code>PM2</code> 的 <code>API</code> 使用与黑科技，用兴趣的同学可以自己进行摸索，这里就不过多介绍了。</p>\n<h2 data-id=\"heading-2\">Docker Compose</h2>\n<p><code>Docker Compose</code> 项目是 <code>Docker</code> 官方的开源项目，负责实现对 <code>Docker</code> 容器集群的快速编排日常开发工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。</p>\n<p>比如我们的网关服务体系就由 <strong>3</strong> 个不同的服务组成，其中还不包括 <code>Redis</code>、<code>Mysql</code> 这种中间件的服务，所以每个服务都使用直接 <code>Docker</code> 来部署的话，效率低下而且维护麻烦，而借助 <code>Docker Compose</code> 可以将我们的服务统一一次性部署完成。</p>\n<p><strong>第一步</strong>：要把项目工程打包成 <code>image</code>，根路径创建文件 <code>Dockerfile</code>:</p>\n<pre><code class=\"hljs language-arduino\" lang=\"arduino\">FROM node:<span class=\"hljs-number\">16</span>-alpine3<span class=\"hljs-number\">.15</span>\n\nRUN mkdir -p /home/app/\n\nWORKDIR /home/app/\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nEXPOSE <span class=\"hljs-number\">3000</span>\n\nENTRYPOINT [<span class=\"hljs-string\">\"npm\"</span>, <span class=\"hljs-string\">\"run\"</span>]\n\nCMD [<span class=\"hljs-string\">\"start\"</span>]\n</code></pre>\n<p><strong>第二步</strong>：根目录运行以下脚本来就行构建：</p>\n<pre><code class=\"hljs language-shell\" lang=\"shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">docker build -f ./Dockerfile -t gateway:0.0.1 .</span>\n</code></pre>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c719d5ac1ad49b58bdc554c7e672868~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p><strong>第三步</strong>：运行以下命令既可以启动容器运行：</p>\n<pre><code class=\"hljs language-shell\" lang=\"shell\">docker run -d -e RUNNING_ENV=prod -p 3000:3000 gateway:0.0.1\n</code></pre>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18c0205306a64373a6361e6ee15438eb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>使用 <code>docker logs [容器id] </code>既可以看到我们的项目已经正常启动了：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c22bfa0ebc0b47ca95ede19bfd303fd0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"image.png\" loading=\"lazy\" class=\"medium-zoom-image\"></p>\n<p>以上是直接使用 <code>Docker</code> 来部署项目，换成 <code>Docker Compose</code> 的话，则需要额外新建文件 <code>docker-compose.gateway-service-dev.yml</code>：</p>\n<pre><code class=\"hljs language-yaml\" lang=\"yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\"3\"</span>\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">gateway-service-dev:</span>\n    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">gateway-service-dev</span>\n    <span class=\"hljs-attr\">build:</span>\n      <span class=\"hljs-attr\">context:</span> <span class=\"hljs-string\">./</span>\n      <span class=\"hljs-attr\">dockerfile:</span> <span class=\"hljs-string\">Dockerfile</span>\n    <span class=\"hljs-attr\">ports:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"3000:3000\"</span>\n    <span class=\"hljs-attr\">environment:</span>\n      <span class=\"hljs-attr\">RUNNING_ENV:</span> <span class=\"hljs-string\">'dev'</span>\n    <span class=\"hljs-attr\">networks:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">servicebus</span>\n<span class=\"hljs-attr\">networks:</span>\n  <span class=\"hljs-attr\">servicebus:</span>\n    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">servicebus</span>\n</code></pre>\n<p>启动命令为：</p>\n<pre><code class=\"hljs language-shell\" lang=\"shell\">docker-compose -f docker-compose.gateway-service-dev.yml up -d  --build\n</code></pre>\n<p>其中 <code>build</code> 参数代表构建过程，所以我们在使用 docker-compose 构建的时候可以省去第二步构建镜像的步骤，配合 <code>docker file</code> 中的前置安装依赖步骤，可以在每次更新代码后需要重新构建时，项目依赖不更新的情况下，使用缓存构建，大幅度减少构建时间。</p>\n<h2 data-id=\"heading-3\">写在最后</h2>\n<p>部署篇的章节为了方便大家快速使用，目前较为简单，等待所有的项目都完成之后，会在 <code>docker compose</code> 部分扩充内容，给大家展示容器编排的优势。</p>\n<p>另外如果有机会或者想尝试 <code>K8S</code> 部署的话，可以参考 <code>Devops</code> 的小册，里面有 <code>Rancher</code> 章节是关于集群部署的</p>\n<p>如果你有什么疑问，欢迎在评论区提出或者加群沟通。 👏</p></div>"
    },
    {
        "name": "19\n🏆 完结篇：课程总结\n学习时长: 2分16秒",
        "content": "<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:16px;overflow-x:hidden;color:#252933}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:24px;line-height:38px;margin-bottom:5px}.markdown-body h2{font-size:22px;line-height:34px;padding-bottom:12px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:20px;line-height:28px}.markdown-body h4{font-size:18px;line-height:26px}.markdown-body h5{font-size:17px;line-height:24px}.markdown-body h6{font-size:16px;line-height:24px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><style data-highlight=\"\" data-highlight-key=\"juejin\">.markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}</style><h2 data-id=\"heading-0\">学习里程碑 | 🏆 - 完结篇</h2>\n<p>如果你看到了这章，恭喜你已经走到了这段旅途的终点，一路走来想必非常不容易吧。</p>\n<p>有些同学是第一次接触 <code>NestJs</code>，对 <code>IoC</code> 的开发模式不能很好的理解，各种模块的注入开发很不习惯，也有些同学是第一次接触服务端开发，可能在飞书那个章节又被【劝退】了吧。</p>\n<p>很正常，我也理解，因为我也是这么过来的，学习本身就并不是一件容易的事情，知识的获取如果能这么容易的话，这个世界就非常和平了。</p>\n<h2 data-id=\"heading-1\">小册总结</h2>\n<p>这次小册的内容可能与大部分的小册都不太一样，从小册的内容与学习模式上都略有不同。</p>\n<p>大家在阅读的时候会发现，在学习篇的时候，每一个步骤、每一个阶段的内容都非常详细，尽最大可能的保证从文章中就能直接写出可用的代码，并且在写小册的过程中也在不断收集大家的问题，中间还对学习篇的所有章节进行了一次调整。因为这个时候大家是在打基础，而且开发的都是公共模块与脚手架搭建，所以这一块的详细是为了让大家轻松上手，后期能够快速开发项目。</p>\n<p>但是学习篇之后的项目实战风格就急速转变，以概念与最小单元模块实现为主，单只看小册的示例代码已经无法将功能完全写出来了。</p>\n<p>原因之前也有提到过，我并不想教大家写出来的都是一摸一样的代码，先入为主的思维是可怕的，除非不到万不得已，最好学习路径就是跟着架构设计然后自己实现一遍，这样不仅印象深刻，也会在开发过程中夹杂自己的思考，为什么要这么做？能不能做的更好？</p>\n<p>小册并不是买了就会，也不是看完就会，之所以挑了这三个实战的项目，是因为它们可能是能够真实给你团队带来拓展技术与业务的项目，至少其中的物料项目对于前端来说是必然有一定的价值的。</p>\n<p>人都是有惰性的，<strong>只有你工作中不断地能使用起来，并且它能够给你带来直接的价值，你才有机会、有动力去更深入的去学习、去了解它。</strong></p>\n<h2 data-id=\"heading-2\">学习成果</h2>\n<p>通过全篇的学习，你大概能够掌握以下这些技能：</p>\n<ol>\n<li>对服务端开发非常熟悉，同时对掌握 <code>IoC</code> 开发模式，可能原理还不太清楚，但全篇走完后熟练开发是不在话下的；</li>\n<li>掌握处理三方对接的能力，包括排查错误、阅读文档等；</li>\n<li>学会安装各种中间件，例如 <code>Mysql</code>、<code>Redis</code> 等等；</li>\n<li>解决版本依赖错误，毕竟在这边小册书写的过程中，<code>NestJS</code> 做了一个版本升级，不少同学卡在了依赖错误上；</li>\n<li>熟悉用户、物料、网关的系统架构设计。</li>\n</ol>\n<p>如果你没有很好的掌握以上的技能的话，那么大概率你有可能参考示例太多了，自己手写的代码太少了，收获也就自然少了。</p>\n<h2 data-id=\"heading-3\">写在最后</h2>\n<p>历时五周，整体的流程大纲已经完成的差不多了，小册暂时也告一段落了，至于为什么会这么快就完结，可能也是对上本小册作为史上最长连载的补偿吧。</p>\n<p>非常感谢各位同学的支持，以及掘金小编给予的协助。但接下来的旅途并未结束，小册里面的实战项目仍然会继续更新，包括各位提的意见以及后续随着实战项目的更新，依然会对小册的内容做一些调整与升级。</p>\n<p>同时小册的三个实战项目都将与九月计划好的 <code>Devops</code> 小册重构的项目进行联动，大家还是可以对这个实战项目有一些些期待，届时也可以对项目的功能、不足都提些意见，能够让它更加的完善。</p>\n<p>按照目前主流的观点，程序员的旅途我快走到头了，在可能要结束的旅途中，我还是想留一下一些曾经我也在这个道路的影子。</p></div>"
    }
]
const fetch = require("node-fetch");
const stream = require("stream");
async function getImgReplace(content) {
  const match = content.match(/https:\/\/\S{10,}awebp/g) || [];

  for await (let img of match) {
    let imgPath = img.replace("https:/", "").replace(/\//g, "").replace(/:/g, '');
    content = content.replace(img, imgPath);
    const response = await fetch(img);
    stream.pipeline(response.body, fs.createWriteStream(imgPath), (err) => {
      console.log(err);
    });
  }
  return content;
}

totalData.map(async (i) => {
  const index = i.name.split("\n")[0];
  const name = i.name.split("\n")[1];
  const content = await getImgReplace(i.content);
  fs.writeFileSync(
    `./${index}${name}.html`,

    `<!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title></title>
    </head>
    <body>
    ${content}
    </body>
    </html>`
  );
});